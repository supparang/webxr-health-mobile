export const name='‡∏à‡∏±‡∏î‡∏à‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û';

const QUOTA = { grain:2, veg:2, protein:1, fruit:1, dairy:1 };
const GROUPS = {
  grain:['üçû','üçö','ü•ñ','ü•®'],
  veg:['ü•¶','ü•ï','ü•í','ü•¨'],
  protein:['ü•©','üçó','ü•ö','üêü'],
  fruit:['üçé','üçå','üçá','üçä'],
  dairy:['ü•õ','üßÄ']
};
const LABELS = { grain:'‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä', veg:'‡∏ú‡∏±‡∏Å', protein:'‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô', fruit:'‡∏ú‡∏•‡πÑ‡∏°‡πâ', dairy:'‡∏ô‡∏°' };

export function init(state,hud){
  // set plate state (‡∏Å‡∏±‡∏ô‡∏û‡∏±‡∏á)
  state.plate = state.plate || { grain:0, veg:0, protein:0, fruit:0, dairy:0 };

  // ‡πÅ‡∏™‡∏î‡∏á tracker & pills
  const wrap=document.getElementById('plateTracker');
  if(wrap) wrap.style.display='block';
  renderPills(state);

  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á badge ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡πà‡∏≠‡∏ô
  updatePlateHUD(state);
}

function remainingCounts(state){
  const plate = state.plate || {};
  const rem = {};
  for(const k of Object.keys(QUOTA)){
    rem[k] = Math.max(0, (QUOTA[k]||0) - (plate[k]||0));
  }
  return rem;
}

function nextRecommended(state){
  const rem = remainingCounts(state);
  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏ñ‡πâ‡∏≤‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ)
  const order = ['veg','grain','protein','fruit','dairy']; // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà "‡∏ú‡∏±‡∏Å" ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
  let best = null, bestVal = -1;
  for(const k of order){
    if(rem[k] > bestVal){
      best = rem[k] > 0 ? k : best; // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö
      bestVal = rem[k];
    }
  }
  return best; // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô null ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
}

function updatePlateHUD(state){
  const wrap = document.getElementById('targetWrap');
  if(wrap) wrap.style.display = 'block';

  const badge = document.getElementById('targetBadge');
  if(!badge) return;

  const next = nextRecommended(state);
  if(next){
    const cur = (state.plate?.[next]||0), need=(QUOTA[next]||0);
    // ‡πÅ‡∏™‡∏î‡∏á ‚Äú‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡πà‡∏≠‡∏ô (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô/‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤)‚Äù
    badge.textContent = `${LABELS[next]} (${cur}/${need})`;
  }else{
    badge.textContent = '‡∏Ñ‡∏£‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡πÅ‡∏•‡πâ‡∏ß!'; // all set
  }
}

function renderPills(state){
  state.plate = state.plate || { grain:0, veg:0, protein:0, fruit:0, dairy:0 };
  const pills=document.getElementById('platePills'); if(!pills) return;
  pills.innerHTML='';
  Object.keys(QUOTA).forEach(k=>{
    const cur=state.plate[k]||0, need=QUOTA[k];
    const el=document.createElement('div');
    el.className='pill'+(cur>=need?' done':'');
    el.textContent=`${LABELS[k]} ${cur}/${need}`;
    pills.appendChild(el);
  });
}

export function pickMeta(diff,state){
  const keys=Object.keys(GROUPS);
  const k=keys[Math.floor(Math.random()*keys.length)] || 'fruit';
  const arr=GROUPS[k] || GROUPS.fruit;
  const char=arr[Math.floor(Math.random()*arr.length)];
  return {type:'plate', group:k, char};
}

export function onHit(meta,systems,state){
  // ‡∏Å‡∏±‡∏ô‡∏û‡∏±‡∏á
  state.plate = state.plate || { grain:0, veg:0, protein:0, fruit:0, dairy:0 };

  const k=meta.group;
  const need=QUOTA[k] ?? 0;
  const cur=state.plate[k]||0;

  if(cur<need){
    state.plate[k]=cur+1;
    systems.score.add(6);
    state.ctx.plateFills=(state.ctx.plateFills||0)+1;

    const done=Object.keys(QUOTA).every(g=> (state.plate[g]||0) >= QUOTA[g]);
    if(done){
      systems.score.add(14);
      state.ctx.perfectPlates=(state.ctx.perfectPlates||0)+1;
      // reset ‡∏à‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
      state.plate={grain:0,veg:0,protein:0,fruit:0,dairy:0};
    }
  }else{
    systems.score.add(-2);
    state.timeLeft=Math.max(0,(state.timeLeft||0)-1);
    state.ctx.overfillCount=(state.ctx.overfillCount||0)+1;
    if(systems.score.combo>0) systems.score.bad();
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HUD ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô
  renderPills(state);
  updatePlateHUD(state);
}

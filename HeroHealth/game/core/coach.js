// game/core/coach.js
// Coach: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à ‡∏õ‡∏•‡∏∏‡∏Å‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏ü‡∏µ‡∏î‡πÅ‡∏ö‡πá‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏•‡πà‡∏ô (TH/EN)
// ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö DOM: #coachHUD > #coachText

export class Coach {
  constructor(opts = {}) {
    this.lang = opts.lang || 'TH';
    this.enabled = true;

    // DOM
    this.hud = document.getElementById('coachHUD') || this._makeHUD();
    this.label = document.getElementById('coachText');

    // timing / anti-spam
    this.lastMsgAt = 0;
    this.cooldownMs = 1200;   // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    this.visibleMs  = 2200;   // ‡∏Ñ‡πâ‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á
    this.fadeTimer = 0;

    // heartbeat encouragement
    this.active = false;
    this.heartbeatTimer = 0;
    this.heartbeatEvery = 15000; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÄ‡∏Å‡∏¥‡∏ô 15s ‡∏õ‡∏•‡∏∏‡∏Å‡πÉ‡∏à‡∏™‡∏±‡πâ‡∏ô ‡πÜ
    this.minSince = 6000;        // ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ

    // remember last mood (‡∏î‡∏µ/‡∏û‡∏•‡∏≤‡∏î/‡πÄ‡∏ü‡∏µ‡πÄ‡∏ß‡∏≠‡∏£‡πå) ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏™‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
    this.mood = 'neutral';
  }

  // ======== Public controls ========
  setLang(l) { this.lang = l || 'TH'; }
  setEnabled(on) { this.enabled = !!on; }

  say(text, opt = {}) {
    if (!this.enabled) return;
    const now = performance?.now?.() || Date.now();
    if (!opt.force && now - this.lastMsgAt < this.cooldownMs) return;
    this.lastMsgAt = now;

    if (this.label) this.label.textContent = text || '';
    if (this.hud) {
      this.hud.style.display = 'block';
      this.hud.style.opacity = '1';
    }
    clearTimeout(this.fadeTimer);
    this.fadeTimer = setTimeout(() => {
      try {
        this.hud.style.opacity = '0';
        setTimeout(()=>{ this.hud.style.display = 'none'; }, 240);
      } catch {}
    }, opt.stayMs || this.visibleMs);
  }

  // ======== Game lifecycle hooks ========
  onStart(modeKey) {
    this.active = true;
    this._startHeartbeat();
    const t = TEXT[this.lang] || TEXT.TH;
    this.say(pick(t.start[modeKey]) || pick(t.start.generic));
  }

  onEnd(score, meta={}) {
    const t = TEXT[this.lang] || TEXT.TH;
    this.active = false;
    this._stopHeartbeat();
    const grade = meta.grade || (score>=200?'A':score>=120?'B':'C');
    const msg = (score>=200) ? pick(t.end.high) :
                (score>=120) ? pick(t.end.mid)  :
                               pick(t.end.low);
    this.say(msg.replace('{score}', score).replace('{grade}', grade), { stayMs: 2800, force: true });
  }

  // ======== Moment hooks ========
  onCombo(x) {
    const t = TEXT[this.lang] || TEXT.TH;
    if (x===0) return;
    if (x===5)  this.say(pick(t.combo.c5));
    if (x===10) this.say(pick(t.combo.c10));
    if (x===20) this.say(pick(t.combo.c20));
    this.mood = 'combo';
  }

  onFever() {
    const t = TEXT[this.lang] || TEXT.TH;
    this.say(pick(t.fever.start), { force:true });
    this.mood = 'fever';
  }

  onGood() {
    const t = TEXT[this.lang] || TEXT.TH;
    if (Math.random() < 0.28) this.say(pick(t.moment.good));
    this.mood = 'good';
  }

  onBad(modeKey) {
    const t = TEXT[this.lang] || TEXT.TH;
    if (Math.random() < 0.45) this.say(pick(t.moment.bad));
    this.mood = 'bad';
  }

  // ‡πÄ‡∏Ñ‡∏ß‡∏™‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ï‡πà‡∏≤‡∏á ‡πÜ (goodjunk ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ)
  onQuestStart(name) {
    const t = TEXT[this.lang] || TEXT.TH;
    if (Math.random() < 0.9) this.say((t.quest.start[name] && pick(t.quest.start[name])) || pick(t.quest.start.generic));
  }
  onQuestComplete(name) {
    const t = TEXT[this.lang] || TEXT.TH;
    this.say((t.quest.done[name] && pick(t.quest.done[name])) || pick(t.quest.done.generic), { force:true });
    this.mood = 'good';
  }
  onQuestFail(name) {
    const t = TEXT[this.lang] || TEXT.TH;
    this.say((t.quest.fail[name] && pick(t.quest.fail[name])) || pick(t.quest.fail.generic), { force:true });
    this.mood = 'bad';
  }

  // ======== Heartbeat encouragement ========
  _startHeartbeat() {
    this._stopHeartbeat();
    this.heartbeatTimer = setInterval(() => {
      if (!this.active || !this.enabled) return;
      const now = performance?.now?.() || Date.now();
      if (now - this.lastMsgAt < this.minSince) return;
      // gently nudge
      const t = TEXT[this.lang] || TEXT.TH;
      this.say(pick(t.heartbeat[this.mood] || t.heartbeat.neutral));
    }, this.heartbeatEvery);
  }
  _stopHeartbeat() {
    clearInterval(this.heartbeatTimer);
    this.heartbeatTimer = 0;
  }

  // ======== HUD ========
  _makeHUD() {
    const box = document.createElement('div');
    box.id = 'coachHUD';
    box.className = 'coach';
    box.style.cssText = `
      position:fixed;left:50%;top:84px;transform:translateX(-50%);
      padding:8px 12px;border-radius:12px;background:#111c;color:#fff;
      border:1px solid #fff3;box-shadow:0 4px 18px #0006;
      font:700 14px/1.25 ui-rounded,system-ui,Segoe UI,Arial;
      z-index:140;display:none;opacity:0;transition:opacity .24s ease;
      pointer-events:none;
    `;
    const span = document.createElement('div');
    span.id = 'coachText';
    box.appendChild(span);
    document.body.appendChild(box);
    return box;
  }
}

// ======== Texts (TH / EN) ========
const TEXT = {
  TH: {
    start: {
      generic: ['‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏∏‡∏¢!','‡∏™‡∏π‡πâ ‡πÜ ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô!','‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢!'],
      goodjunk: ['‡πÇ‡∏´‡∏°‡∏î‡∏î‡∏µ vs ‡∏Ç‡∏¢‡∏∞‚Äî‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞!','‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏î‡∏µ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÑ‡∏ß!'],
      groups: ['‡∏î‡∏π üéØ ‡πÄ‡∏õ‡πâ‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏´‡∏°‡∏ß‡∏î!'],
      hydration: ['‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÅ‡∏ñ‡∏ö‡∏ô‡πâ‡∏≥ 45‚Äì65%!','‡∏à‡∏¥‡∏ö‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ ‡∏™‡∏π‡πâ!'],
      plate: ['‡πÄ‡∏ï‡∏¥‡∏°‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏ï‡πà‡∏≠!']
    },
    end: {
      high: ['‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î! {score} ‡πÅ‡∏ï‡πâ‡∏° ‡πÄ‡∏Å‡∏£‡∏î {grade}!','‡πÄ‡∏ó‡∏û‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {score}!'],
      mid:  ['‡∏î‡∏µ‡∏°‡∏≤‡∏Å! {score} ‡πÅ‡∏ï‡πâ‡∏° ‡∏•‡∏≠‡∏á‡∏î‡∏±‡∏ô‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤!','‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏•‡∏¢ {score}!'],
      low:  ['‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î! {score} ‡πÅ‡∏ï‡πâ‡∏°','‡∏™‡∏π‡πâ‡∏ï‡πà‡∏≠! ‡∏£‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏ô‡πà!']
    },
    combo: {
      c5:  ['‡∏ï‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß!','‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏ß‡∏¢!'],
      c10: ['‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡πÑ‡∏ü‡∏•‡∏∏‡∏Å!','‡πÅ‡∏£‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ!'],
      c20: ['‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡πÄ‡∏ó‡∏û! ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÑ‡∏ß‡πâ!','‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏î‡∏µ‡∏°‡∏≤‡∏Å!']
    },
    fever: {
      start: ['FEVER ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß! ‡πÇ‡∏Å‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô!','‡πÑ‡∏ü‡∏•‡∏∏‡∏Å! ‡∏à‡∏±‡∏î‡πÄ‡∏ï‡πá‡∏°!']
    },
    moment: {
      good: ['‡∏î‡∏µ‡∏°‡∏≤‡∏Å!','‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô!','‡∏™‡∏ß‡∏¢!'],
      bad:  ['‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ï‡∏¥!','‡∏û‡∏•‡∏≤‡∏î‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏•‡∏∏‡∏¢‡∏ï‡πà‡∏≠!','‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞!']
    },
    quest: {
      start: {
        generic: ['‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à! ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤!'],
        collect_good: ['‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡πÄ‡∏•‡∏¢!'],
        avoid_junk:   ['‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏∞!'],
        perfect:      ['‡πÑ‡∏•‡πà Perfect ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á!'],
        powerups:     ['‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö!'],
        reach_combo:  ['‡∏î‡∏±‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢!']
      },
      done: {
        generic: ['‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å!'],
        collect_good: ['‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß!'],
        avoid_junk:   ['‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'],
        perfect:      ['Perfect ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö!'],
        powerups:     ['‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß!'],
        reach_combo:  ['‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!']
      },
      fail: {
        generic: ['‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£!'],
        collect_good: ['‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ‡πÑ‡∏õ‡∏•‡∏∏‡∏¢‡πÉ‡∏´‡∏°‡πà!'],
        avoid_junk:   ['‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏¢‡∏∞‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏≠‡∏á!'],
        perfect:      ['‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏≠‡∏≤ Perfect ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ!'],
        powerups:     ['‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ!'],
        reach_combo:  ['‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡∏î‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î!']
      }
    },
    heartbeat: {
      neutral: ['‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å ‡πÜ ‡πÇ‡∏ü‡∏Å‡∏±‡∏™!','‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡πÑ‡∏õ ‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏Å‡∏ß‡πà‡∏≤!'],
      good:    ['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÑ‡∏ß‡πâ!'],
      bad:     ['‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤!'],
      combo:   ['‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏´‡∏•‡∏∏‡∏î‡∏ô‡∏∞!'],
      fever:   ['‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡πâ‡∏° FEVER!']
    }
  },

  EN: {
    start: {
      generic: ['Let‚Äôs go!','You got this!','Game on!'],
      goodjunk: ['Good vs Junk‚Äîgrab healthy, avoid junk!','Focus on the greens!'],
      groups: ['Follow the üéØ target!'],
      hydration: ['Keep hydration 45‚Äì65%!'],
      plate: ['Fill quotas and push on!']
    },
    end: {
      high: ['Awesome! {score} pts, grade {grade}!','Insane score {score}!'],
      mid:  ['Great run! {score} pts‚Äîpush next time!','Nice! {score}!'],
      low:  ['No worries‚Äîtry again! {score} pts','Keep going!']
    },
    combo: {
      c5:  ['You‚Äôre rolling!'],
      c10: ['Combo heating up!'],
      c20: ['Godlike combo‚Äîkeep it!']
    },
    fever: {
      start: ['FEVER on‚Äîfarm points!','Burning hot!']
    },
    moment: {
      good: ['Nice!','Clean!','Sweet!'],
      bad:  ['Shake it off!','Refocus!']
    },
    quest: {
      start: {
        generic: ['Quest started‚Äîbeat the timer!'],
        collect_good: ['Collect those greens!'],
        avoid_junk:   ['Avoid junk continuously!'],
        perfect:      ['Stack those perfects!'],
        powerups:     ['Grab power-ups!'],
        reach_combo:  ['Push the combo target!']
      },
      done: {
        generic: ['Quest complete!'],
        collect_good: ['Greens collected!'],
        avoid_junk:   ['Clean streak‚Äînice!'],
        perfect:      ['Perfects achieved!'],
        powerups:     ['Power-ups secured!'],
        reach_combo:  ['Combo reached!']
      },
      fail: {
        generic: ['Quest failed‚Äîno worries!'],
        collect_good: ['Out of time‚Äîtry again!'],
        avoid_junk:   ['Junk slipped in‚Äîreset!'],
        perfect:      ['Next time‚Äînail those perfects!'],
        powerups:     ['Not enough‚Äîone more run!'],
        reach_combo:  ['So close‚Äîpush again!']
      }
    },
    heartbeat: {
      neutral: ['Deep breath, focus.','Steady pace wins.'],
      good:    ['Great rhythm‚Äîkeep it!'],
      bad:     ['Bounce back‚Äîlet‚Äôs go!'],
      combo:   ['Don‚Äôt drop the combo!'],
      fever:   ['Max out the FEVER!']
    }
  }
};

// utils
function pick(arr){ return arr[(Math.random()*arr.length)|0]; }

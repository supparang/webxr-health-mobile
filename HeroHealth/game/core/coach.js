// game/core/coach.js
// ‡πÇ‡∏Ñ‡πâ‡∏ä: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏∏‡∏Å‡πÉ‡∏à/‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏•‡πà‡∏ô + auto-hide + ‡∏Ñ‡∏¥‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
export class Coach {
  constructor(opts = {}) {
    this.lang = opts.lang || 'TH';
    this.wrap = document.getElementById('coachHUD');
    this.text = document.getElementById('coachText');
    if (!this.wrap || !this.text) {
      this.wrap = document.createElement('div');
      this.wrap.id = 'coachHUD';
      this.wrap.className = 'coach';
      this.wrap.style.display = 'none';
      this.text = document.createElement('div');
      this.text.id = 'coachText';
      this.wrap.appendChild(this.text);
      document.body.appendChild(this.wrap);
    }
    this.queue = [];
    this.showing = false;
    this.hideTimer = 0;
    this.lastPep = 0;
    this.cooldownMs = 1800;
  }

  setLang(l) { this.lang = l || 'TH'; }

  say(msg, { stayMs = 1400, force = false } = {}) {
    if (!msg) return;
    this.queue.push({ msg, stayMs, force });
    this.#drain();
  }

  onStart(modeKey) {
    const th = ['‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏∏‡∏¢! ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ô‡∏∞ üí™', '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß! ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ ‡πÜ ‚ú®', '‡πÑ‡∏õ‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢! ‡∏≠‡∏¢‡πà‡∏≤‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ! üî•'];
    const en = ['Let‚Äôs go! Pick the good stuff üí™', 'Game on! Focus on the good ‚ú®', 'Go go go! Don‚Äôt give up! üî•'];
    this.say((this.lang === 'TH' ? th : en)[(Math.random() * th.length) | 0], { stayMs: 1600 });
  }

  onEnd(score, info) {
    const good = this.lang === 'TH'
      ? `‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÑ‡∏î‡πâ ${score} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`
      : `Great job! You scored ${score}`;
    this.say(good, { stayMs: 1800, force: true });
  }

  onCombo(x) {
    const now = Date.now();
    if (now - this.lastPep < this.cooldownMs) return;
    this.lastPep = now;
    let line;
    if (this.lang === 'TH') {
      if (x >= 20) line = '‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡πÑ‡∏ü‡∏•‡∏∏‡∏Å! ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÑ‡∏ß‡πâ! üî•';
      else if (x >= 10) line = '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á! ‚ú®';
      else if (x >= 5)  line = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏µ! ‡πÑ‡∏õ‡∏ï‡πà‡∏≠! üí™';
    } else {
      if (x >= 20) line = 'Combo on fire! Keep it up! üî•';
      else if (x >= 10) line = 'You‚Äôre rolling! Keep going! ‚ú®';
      else if (x >= 5)  line = 'Nice rhythm! Push on! üí™';
    }
    if (line) this.say(line, { stayMs: 1200 });
  }

  onFever() {
    const line = this.lang === 'TH' ? 'FEVER! ‡∏Ñ‡∏π‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏Å‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏î! ‚ú®' : 'FEVER! Score it big! ‚ú®';
    this.say(line, { stayMs: 1400, force: true });
  }

  // ===== Cheer mini-quests for goodjunk =====
  onQuestStart(q) {
    const TH = {
      collect: `‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö ${q.need} ‡∏ä‡∏¥‡πâ‡∏ô ‚ú®`,
      avoid:   `‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: ‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞ ${q.need}s ‚è≥`,
      perfect: `‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: PERFECT ${q.need} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á üíé`,
      combo:   `‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: ‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö x${q.need} üöÄ`,
      streak:  `‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: ‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô ${q.need} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á üîó`,
    };
    const EN = {
      collect: `Quest: Collect ${q.need} healthy ‚ú®`,
      avoid:   `Quest: Avoid junk for ${q.need}s ‚è≥`,
      perfect: `Quest: Get ${q.need} PERFECT üíé`,
      combo:   `Quest: Reach combo x${q.need} üöÄ`,
      streak:  `Quest: ${q.need} healthy in a row üîó`,
    };
    const msg = (this.lang === 'TH' ? TH : EN)[q.type] || 'Quest!';
    this.say(msg, { stayMs: 1600, force: true });
  }

  onQuestProgress(q) {
    const TH = {
      collect: `‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ${q.progress}/${q.need} ‡πÅ‡∏•‡πâ‡∏ß ‚ú®`,
      avoid:   `‡πÉ‡∏Å‡∏•‡πâ‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${Math.max(0, q.remain|0)}s ‚è≥`,
      perfect: `PERFECT ${q.progress}/${q.need} üíé`,
      combo:   `‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô x${q.comboNow||0} / x${q.need}`,
      streak:  `‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô ${q.streak||0}/${q.need} üîó`,
    };
    const EN = {
      collect: `Nice! ${q.progress}/${q.need} ‚ú®`,
      avoid:   `Almost! ${Math.max(0, q.remain|0)}s left ‚è≥`,
      perfect: `PERFECT ${q.progress}/${q.need} üíé`,
      combo:   `Combo x${q.comboNow||0} / x${q.need}`,
      streak:  `In a row ${q.streak||0}/${q.need} üîó`,
    };
    const msg = (this.lang === 'TH' ? TH : EN)[q.type];
    if (msg) this.say(msg, { stayMs: 1100 });
  }

  onQuestComplete(q) {
    const msg = this.lang === 'TH' ? 'üèÅ ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' : 'üèÅ Quest Complete!';
    this.say(msg, { stayMs: 1500, force: true });
  }

  onQuestFail(q) {
    const msg = this.lang === 'TH' ? '‚åõ ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Äî ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà!' : '‚åõ Quest failed ‚Äî try again!';
    this.say(msg, { stayMs: 1500 });
  }

  // ===== queue driver =====
  #drain() {
    if (this.showing || this.queue.length === 0) return;
    const { msg, stayMs } = this.queue.shift();
    this.text.textContent = msg;
    this.wrap.style.display = 'block';
    this.wrap.style.opacity = '0';
    this.wrap.style.transform = 'translate(-50%, -8px)';
    requestAnimationFrame(() => {
      this.wrap.style.transition = 'opacity .18s ease, transform .18s ease';
      this.wrap.style.opacity = '1';
      this.wrap.style.transform = 'translate(-50%, 0)';
    });

    this.showing = true;
    clearTimeout(this.hideTimer);
    this.hideTimer = setTimeout(() => {
      this.wrap.style.opacity = '0';
      this.wrap.style.transform = 'translate(-50%, -8px)';
      setTimeout(() => {
        this.wrap.style.display = 'none';
        this.showing = false;
        this.#drain();
      }, 200);
    }, Math.max(800, stayMs | 0));
  }
}

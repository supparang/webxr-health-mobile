// ./game/core/coach.js
export class Coach {
  constructor(opts = {}) {
    this.lang = opts.lang || 'TH';       // 'TH' | 'EN' | 'L3'(‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏π‡πà)
    this.minGap = opts.minGap ?? 1200;   // ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    this.autoHideMs = opts.autoHideMs ?? 2000;
    this._last = 0;
    this._hideT = null;
  }

  setLang(lang){ this.lang = lang; }
  setGap(ms){ this.minGap = Math.max(200, ms|0); }

  _emit(html){
    const box = document.getElementById('coachHUD');
    const text = document.getElementById('coachText');
    if(!box || !text) return;
    text.innerHTML = html;
    box.style.display = 'block';
    clearTimeout(this._hideT);
    this._hideT = setTimeout(()=>{ box.style.display='none'; }, this.autoHideMs);
  }

  _sayRaw(t){
    const now = performance.now();
    if(now - this._last < this.minGap) return;
    this._last = now;
    this._emit(t);
  }

  say(th, en){
    if(this.lang === 'TH') this._sayRaw(th);
    else if(this.lang === 'EN') this._sayRaw(en);
    else this._sayRaw(`${th} <span style="opacity:.8">| ${en}</span>`);
  }

  // ============ Hooks ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å ============

  onStart(mode){
    const m = {
      goodjunk:  ['‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏î‡∏µ ‡∏´‡∏•‡∏µ‡∏Å‡∏Ç‡∏¢‡∏∞!','Focus good, dodge junk!'],
      groups:    ['‡∏°‡∏≠‡∏á üéØ ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏´‡∏°‡∏ß‡∏î','Match the target group!'],
      hydration: ['‡∏Ñ‡∏∏‡∏° 45‚Äì65%','Keep 45‚Äì65%'],
      plate:     ['‡πÄ‡∏ï‡∏¥‡∏°‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö','Fill the quotas']
    };
    const t = m[mode] || ['‡∏•‡∏∏‡∏¢!','Let‚Äôs go!'];
    this.say(t[0], t[1]);
  }

  onGood(){ this.say('‡∏î‡∏µ‡∏°‡∏≤‡∏Å!','Nice!'); }

  onBad(mode){
    const m = {
      goodjunk:  ['‡∏Ç‡∏¢‡∏∞! ‡∏£‡∏∞‡∏ß‡∏±‡∏á','Junk! Careful'],
      groups:    ['‡∏ú‡∏¥‡∏î‡∏´‡∏°‡∏ß‡∏î','Wrong group'],
      hydration: ['‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô','Off balance'],
      plate:     ['‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤','Over quota']
    };
    const t = m[mode] || ['‡∏£‡∏∞‡∏ß‡∏±‡∏á','Careful'];
    this.say(t[0], t[1]);
  }

  onCombo(x){
    if(x>0 && x%5===0){
      this.say(`‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö x${x}!`, `Combo x${x}!`);
    }
  }

  onFever(){
    this.say('FEVER! ‡∏•‡∏∏‡∏¢!','FEVER time!');
  }

  onPower(k){
    const m = {
      boost: ['‡∏ö‡∏π‡∏™‡∏ï‡πå‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô!','Score boost!'],
      slow:  ['‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡πâ‡∏≤‡∏•‡∏á','Time slowed'],
      shield:['‡∏°‡∏µ‡πÄ‡∏Å‡∏£‡∏≤‡∏∞!','Shielded!'],
      timep: ['‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°!','Time up!'],
      timen: ['‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏ô‡∏•‡∏î!','Time down!']
    };
    const t = m[k] || ['‡∏û‡∏•‡∏±‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°!','Power up!'];
    this.say(t[0], t[1]);
  }

  // z: 'low' | 'ok' | 'high'
  onHydrationZoneChange(z){
    const m = {
      low:  ['‡∏ô‡πâ‡∏≥‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ ‡πÄ‡∏ï‡∏¥‡∏° üíß','Low hydration‚Äîgrab üíß'],
      ok:   ['‡∏Ñ‡∏∏‡∏°‡πÑ‡∏î‡πâ‡∏î‡∏µ','Great‚Äîsteady'],
      high: ['‡∏ô‡πâ‡∏≥‡∏°‡∏≤‡∏Å‡πÑ‡∏õ ‡πÄ‡∏ö‡∏£‡∏Å‡∏Å‡πà‡∏≠‡∏ô','Too high‚Äîease up']
    };
    const t = m[z] || ['‡∏î‡∏π‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ô‡πâ‡∏≥','Watch hydration'];
    this.say(t[0], t[1]);
  }

  // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á accuracy/‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ
  onEnd(score, grade, extra){
    const acc = (extra?.accuracyPct!=null) ? ` | Accuracy ${extra.accuracyPct}%` : '';
    this.say(`‡∏™‡∏£‡∏∏‡∏õ: ${score} | ‡πÄ‡∏Å‡∏£‡∏î ${grade}${acc}`, `Summary: ${score} | Grade ${grade}${acc}`);
  }
}

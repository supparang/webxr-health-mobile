// game/modes/goodjunk.js
// ‡πÇ‡∏´‡∏°‡∏î: ‡∏î‡∏µ vs ‡∏Ç‡∏¢‡∏∞ ‚Äî ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏¢‡∏∞
// ‡∏°‡∏¥‡∏ô‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° 3 ‡∏à‡∏≤‡∏Å 5 ‡πÅ‡∏ö‡∏ö ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô #missionLine ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
// ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ main.js: 'good' | 'bad' | 'perfect' | 'power'

/* ========== ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ========== */
const HEALTHY = ['ü•¶','üçé','ü•ï','üçÖ','üçá','üçâ','ü•ó','ü•í','ü•¨','üåΩ'];
const JUNK    = ['üçî','üçü','üç©','üçï','ü•§','üç´','üå≠','üßÅ','üç™','üßÉ'];
const TRAPS   = ['üí£','‚ò†Ô∏è'];

const GOOD_RATIO = { Easy:0.72, Normal:0.65, Hard:0.58 };
const POWER_RATE = { Easy:0.08, Normal:0.10, Hard:0.12 };
const ENABLED_POWERS = ['scorex2','freeze'];
const ENABLE_TRAPS = true;
const TRAP_RATE = 0.06;

const PERFECT_WINDOW_MS = 320;
const MIN_LIFE_BY_DIFF  = { Easy:2600, Normal:2200, Hard:1900 };

/* ========== ‡∏°‡∏¥‡∏ô‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå 5 ‡πÅ‡∏ö‡∏ö ==========
   ‡∏à‡∏∞‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤ 3 ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î
   - collectGood: ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô X
   - avoidJunk:   ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏¢‡∏∞ (‡∏Å‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô M ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
   - perfectTaps: ‡∏ó‡∏≥ PERFECT ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö X ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
   - streakGood:  ‡∏ó‡∏≥‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏î‡∏µ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á X ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏ô bad ‡∏Ñ‡∏±‡πà‡∏ô
   - powerHunter: ‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏õ X ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
*/
const QUEST_POOL = {
  Easy:   { collectGood:8,  perfectTaps:3, streakGood:6,  powerHunter:2, avoidBadMax:2,  time:45 },
  Normal: { collectGood:10, perfectTaps:4, streakGood:8,  powerHunter:3, avoidBadMax:2,  time:45 },
  Hard:   { collectGood:12, perfectTaps:5, streakGood:10, powerHunter:4, avoidBadMax:1,  time:45 }
};

const QUEST_DEFS = (diff) => {
  const p = QUEST_POOL[diff] || QUEST_POOL.Normal;
  return [
    { key:'collectGood', need:p.collectGood, label:(n)=>`ü•ó ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö ${n}` },
    { key:'avoidJunk',   need:p.avoidBadMax, label:(n)=>`üö´ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏¢‡∏∞ (‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô ${n})` },
    { key:'perfectTaps', need:p.perfectTaps, label:(n)=>`‚ú® ‡∏ó‡∏≥ PERFECT ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö ${n}` },
    { key:'streakGood',  need:p.streakGood,  label:(n)=>`üî• ‡∏ó‡∏≥‡∏î‡∏µ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô ${n} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á` },
    { key:'powerHunter', need:p.powerHunter, label:(n)=>`‚ö° ‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏õ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö ${n}` },
  ].map(x=>({ ...x, time: p.time }));
};

function pick(arr){ return arr[(Math.random()*arr.length)|0]; }
function sampleN(arr,n){
  const a = arr.slice(); const out=[];
  while (a.length && out.length<n){ out.push(a.splice((Math.random()*a.length)|0,1)[0]); }
  return out;
}
function iconOf(power){
  if (power==='scorex2') return '‚úñÔ∏è2';
  if (power==='freeze')  return 'üßä';
  return '‚ú®';
}
function lifeAdaptive(diff, state, mul=1){
  const gj = state.ctx?.gj || {};
  const hits = gj.hits|0, miss = gj.miss|0;
  const acc  = (hits+miss)>0 ? (hits/(hits+miss)) : 1;
  const boost= acc < 0.55 ? 1.25 : acc < 0.75 ? 1.12 : 1.0;
  const base = (diff?.life || 3000) * boost * mul;
  const minL = MIN_LIFE_BY_DIFF[state.difficulty] || 2100;
  return Math.max(minL, Math.round(base));
}

/* ========== ‡∏°‡∏¥‡∏ô‡∏¥ HUD helpers (#missionLine) ========== */
function showMissionLine(on){ const el=document.getElementById('missionLine'); if(el) el.style.display = on?'block':'none'; }
function setMissionText(text){ const el=document.getElementById('missionLine'); if(el) el.textContent = text || '‚Äî'; }
function fmtTime(s){ s|=0; return s<10?('0'+s):(''+s); }

function renderQuestHUD(state){
  const gj = state.ctx?.gj; if(!gj) return;
  const qs = gj.quests; const i = gj.qIndex|0;
  if (!qs || !qs.length || i>=qs.length){
    setMissionText('üèÅ ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
    return;
  }
  const q = qs[i];
  let line = `üéØ ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå ${i+1}/${qs.length}: ${q.label(q.need)} ‚Ä¢ ${q.progress|0}/${q.need}`;
  if (q.key==='avoidJunk'){ line = `üéØ ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå ${i+1}/${qs.length}: ${q.label(q.need)} ‚Ä¢ ‡∏û‡∏•‡∏≤‡∏î: ${q.badCount|0}/${q.need}`; }
  line += ` ‚Ä¢ ${fmtTime(q.remain)}s`;
  setMissionText(line);
}

/* ========== Public API ========== */
export function init(state){
  state.ctx = state.ctx || {};
  const defs = QUEST_DEFS(state.difficulty);
  const picks = sampleN(defs, 3); // ‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤ 3 ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  state.ctx.gj = {
    hits:0, miss:0,
    lastTapTs:0,
    // counters ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå
    counters:{ good:0, perfect:0, power:0, streak:0, bad:0 },
    // ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
    quests: picks.map(q=>({
      ...q,
      progress: 0,
      badCount: 0,     // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ avoidJunk
      remain: q.time,
      done: false,
      success: false
    })),
    qIndex: 0
  };

  showMissionLine(true);
  renderQuestHUD(state);
}

export function pickMeta(diff, state){
  const ts = performance?.now?.() || Date.now();

  // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå
  if (Math.random() < (POWER_RATE[state.difficulty] || POWER_RATE.Normal) && ENABLED_POWERS.length){
    const p = pick(ENABLED_POWERS);
    return { type:'power', power:p, char:iconOf(p), life: lifeAdaptive(diff, state, 1.0), ts };
  }

  // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å
  if (ENABLE_TRAPS && Math.random() < TRAP_RATE){
    const char = pick(TRAPS);
    return { type:'trap', char, good:false, life: lifeAdaptive(diff, state, 1.05), ts };
  }

  // ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  const wantGood = Math.random() < (GOOD_RATIO[state.difficulty] || GOOD_RATIO.Normal);
  const char = wantGood ? pick(HEALTHY) : pick(JUNK);
  return { type:'food', char, good:wantGood, life: lifeAdaptive(diff, state, 1.0), ts };
}

export function onHit(meta, sys, state){
  const { sfx, power, fx, coach } = sys || {};
  const gj = state.ctx?.gj || (state.ctx.gj = { hits:0, miss:0, counters:{}, quests:[], qIndex:0 });

  // ===== ‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏õ =====
  if (meta.type === 'power'){
    try{ sfx?.play?.('sfx-powerup'); }catch{}
    gj.counters.power = (gj.counters.power|0) + 1;
    // ‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå
    if (meta.power === 'scorex2'){ try{ power?.apply?.('boost'); }catch{} fx?.popText?.('SCORE √ó2',{color:'#b0ff66'}); }
    else if (meta.power === 'freeze'){
      const now = performance?.now?.()||Date.now();
      state.freezeUntil = now + 2000;
      fx?.popText?.('FREEZE!',{color:'#66e0ff'});
    }
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå powerHunter ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    updateQuestProgress('powerHunter', 1, state, coach);
    renderQuestHUD(state);
    return 'power';
  }

  // ===== ‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å =====
  if (meta.type === 'trap'){
    gj.miss++; gj.counters.bad = (gj.counters.bad|0) + 1;
    // streak ‡πÇ‡∏î‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
    gj.counters.streak = 0;
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå avoidJunk (‡∏ô‡∏±‡∏ö bad)
    updateQuestAvoidBad(state, 1, coach);
    try{ sfx?.bad?.(); }catch{}
    fx?.popText?.('TRAP!',{color:'#ff9b9b'});
    renderQuestHUD(state);
    return 'bad';
  }

  // ===== ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ =====
  if (meta.type === 'food'){
    if (meta.good){
      gj.hits++;
      gj.counters.good = (gj.counters.good|0) + 1;
      gj.counters.streak = (gj.counters.streak|0) + 1;

      // PERFECT window
      if (meta.ts){
        const dt = (performance?.now?.()||Date.now()) - meta.ts;
        if (dt <= PERFECT_WINDOW_MS){
          gj.counters.perfect = (gj.counters.perfect|0) + 1;
          updateQuestProgress('perfectTaps', 1, state, coach);
          updateQuestProgress('streakGood', 1, state, coach, true); // true = ‡∏ô‡∏±‡∏ö‡∏ó‡∏µ‡∏•‡∏∞ 1 ‡∏à‡∏≤‡∏Å streak
          updateQuestProgress('collectGood', 1, state, coach);
          try{ sfx?.good?.(); }catch{}
          fx?.popText?.('PERFECT',{color:'#ccff88'});
          renderQuestHUD(state);
          return 'perfect';
        }
      }
      // GOOD (‡πÑ‡∏°‡πà perfect)
      updateQuestProgress('collectGood', 1, state, coach);
      updateQuestProgress('streakGood', 1, state, coach, true);
      try{ sfx?.good?.(); }catch{}
      fx?.popText?.('GOOD',{color:'#7fffd4'});
      renderQuestHUD(state);
      return 'good';
    } else {
      // ‡πÇ‡∏î‡∏ô Junk
      gj.miss++;
      gj.counters.bad = (gj.counters.bad|0) + 1;
      // streak ‡πÇ‡∏î‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
      gj.counters.streak = 0;
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï avoidJunk
      updateQuestAvoidBad(state, 1, coach);
      try{ sfx?.bad?.(); }catch{}
      fx?.popText?.('JUNK!',{color:'#ff9b9b'});
      renderQuestHUD(state);
      return 'bad';
    }
  }

  return 'ok';
}

export function tick(state, sys){
  const { sfx, fx, coach } = sys || {};
  const gj = state.ctx?.gj; if (!gj?.quests || !gj.quests.length) return;

  const i = gj.qIndex|0;
  if (i >= gj.quests.length){ return; } // ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß

  const q = gj.quests[i];
  if (q.done) return;

  // ‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
  q.remain = Math.max(0, (q.remain|0) - 1);

  // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå (‡∏ö‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å counters ‡πÉ‡∏ô onHit ‡πÅ‡∏•‡πâ‡∏ß)
  // - collectGood, perfectTaps, powerHunter, streakGood: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô onHit
  // - avoidJunk: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢ badCount <= need
  if (q.key === 'avoidJunk' && q.remain === 0){
    if ((q.badCount|0) <= q.need){
      q.done = true; q.success = true;
      fx?.popText?.('üèÅ Mission Complete', { color:'#7fffd4' });
      coach?.say?.('‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å');
      moveToNextQuest(state);
    }else{
      q.done = true; q.success = false;
      fx?.popText?.('‚åõ Mission Failed', { color:'#ff9b9b' });
      coach?.say?.('‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ!');
      moveToNextQuest(state);
    }
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HUD ‡πÄ‡∏™‡∏°‡∏≠
  renderQuestHUD(state);
}

export function cleanup(state){
  // ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏ñ‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î
  showMissionLine(false);
}

/* ========== Quest helpers ========== */
function moveToNextQuest(state){
  const gj = state.ctx?.gj; if(!gj) return;
  gj.qIndex = (gj.qIndex|0) + 1;
  // ‡∏ñ‡πâ‡∏≤‡∏à‡∏ö‡∏Ñ‡∏£‡∏ö 3 ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå‡πÅ‡∏•‡πâ‡∏ß ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô
  if (gj.qIndex >= gj.quests.length){
    setMissionText('üèÅ ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
    // ‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ 2 ‡∏ß‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏ã‡πà‡∏≠‡∏ô
    setTimeout(()=>showMissionLine(false), 2000);
  }else{
    renderQuestHUD(state);
  }
}

function updateQuestProgress(key, inc, state, coach, isStreak=false){
  const gj = state.ctx?.gj; if(!gj) return;
  const i = gj.qIndex|0;
  const qs = gj.quests; if(!qs || i>=qs.length) return;
  const q = qs[i]; if(q.key !== key || q.done) return;

  if (key === 'streakGood'){
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö streak ‡πÉ‡∏ô gj.counters
    if (isStreak){
      q.progress = Math.max(q.progress|0, gj.counters.streak|0); // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏±‡πâ‡∏ô
    }
  } else {
    q.progress = Math.min(q.need, (q.progress|0) + (inc|0));
  }

  if ((q.progress|0) >= (q.need|0)){
    q.done = true; q.success = true;
    coach?.say?.('‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î! ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    try{ state?.ctx && (state.ctx.lastQuestKey = key); }catch{}
    // ‡πÇ‡∏ä‡∏ß‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    moveToNextQuest(state);
  }
}

function updateQuestAvoidBad(state, badInc=1, coach){
  const gj = state.ctx?.gj; if(!gj) return;
  const i = gj.qIndex|0;
  const qs = gj.quests; if(!qs || i>=qs.length) return;
  const q = qs[i]; if(q.key !== 'avoidJunk' || q.done) return;

  q.badCount = Math.max(0, (q.badCount|0) + (badInc|0));
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ‚Äî ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà ‚Äú‡∏à‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‚Äù
  // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ï‡∏≠‡∏ô‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô tick()
}

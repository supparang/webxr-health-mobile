// === Hero Health Academy ‚Äî game/modes/goodjunk.js
// Mode: Good vs Trash
// - DOM-spawn (‡πÉ‡∏ä‡πâ #spawnHost ‡∏Ç‡∏≠‡∏á main)
// - Anti-repeat emoji (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô 2 ‡∏ä‡∏¥‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
// - Golden Assist (‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ / ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏±‡∏°‡πÅ‡∏ö‡πá‡∏Å)
// - Dynamic lifetime + end-phase speedup (‡∏ä‡πà‡∏ß‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
// - Soft penalty (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÅ‡∏£‡∏á‡πÄ‡∏Å‡∏¥‡∏ô, ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏µ‡πà ScoreSystem)
// - Freeze-on-bad 300ms (‡∏Å‡∏±‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏î‡∏£‡∏±‡∏ß‡∏ú‡∏¥‡∏î)
// - Mini-quests (Eat Good / Avoid Junk) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡πà‡∏≤‡∏ô HUD

export const name = 'goodjunk';

/* Pools */
const GOOD = ['ü•¶','ü•ï','üçé','üçå','ü•ó','üêü','ü•ú','üçö','üçû','ü•õ','üçá','üçì','üçä','üçÖ','üçÜ','ü•¨','ü•ù','üçç','üçê','üçë'];
const JUNK = ['üçî','üçü','üå≠','üçï','üç©','üç™','üç∞','üßã','ü•§','üç´','üçú','üçñ','üçó','üßÇ','üç≠','üßÅ'];

/* Local state (‡∏ï‡πà‡∏≠‡∏£‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) */
let _state = null;           // STATE ‡∏à‡∏≤‡∏Å main
let _hud = null;             // HUD ‡∏à‡∏≤‡∏Å main
let _startT = 0;             // performance.now()
let _lastPicks = [];         // anti-repeat (‡∏à‡∏≥ 2 ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏™‡∏∏‡∏î)
let _quest = {               // mini-quests
  eatGood:   { need: 10, progress: 0 },
  avoidJunk: { need: 6,  progress: 0 },
};
let _nextQuestAnnounce = 0;

/* ---------- Lifecycle ---------- */
export function init(STATE, hud, opts = {}) {
  _state = STATE;
  _hud = hud;
  _startT = (performance?.now?.() || Date.now());
  _lastPicks.length = 0;

  // Reset quests
  _quest = {
    eatGood:   { need: 10, progress: 0 },
    avoidJunk: { need: 6,  progress: 0 },
  };
  _pushQuests();

  // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
  try { _hud.setTarget('‡∏ú‡∏•‡πÑ‡∏°‡πâ/‡∏ú‡∏±‡∏Å/‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏î‡∏µ', _quest.eatGood.progress, _quest.eatGood.need); } catch {}
  try { _hud.showTarget(); } catch {}
}

export function cleanup() {
  _state = null;
  _hud = null;
}

/* per-frame tick (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å main.loop) */
export function tick(STATE, { sfx = {}, fx = {}, power }, hud) {
  const t = performance?.now?.() || Date.now();
  if (t > _nextQuestAnnounce) {
    _nextQuestAnnounce = t + 500; // ‡∏•‡∏î‡∏á‡∏≤‡∏ô DOM
    _pushQuests();
  }
}

/* ---------- Spawn meta picker ---------- */
export function pickMeta(control = { life: 3000 }, STATE) {
  const now = performance?.now?.() || Date.now();
  const elapsed = Math.max(0, (now - _startT) / 1000);
  const remain  = Math.max(0, (STATE?.endAt ? (STATE.endAt - (performance?.now?.() || Date.now())) / 1000 : 0));
  const endPhase = remain <= 15;

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ï‡∏£‡∏≤ 65/35 ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö
  let goodBias = 0.65;
  const combo = (STATE?.combo|0);
  if (combo > 10) goodBias -= 0.07;
  if (combo > 20) goodBias -= 0.05;

  // ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ä‡∏¥‡πâ‡∏ô ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡πâ‡∏≤‡∏¢
  const baseLife = Math.max(1200, control.life || 3000);
  let life = Math.min(baseLife, 2600);
  if (elapsed > 20) life -= 200;
  if (elapsed > 35) life -= 200;
  if (endPhase)     life -= 300;
  life = Math.max(700, life);

  // Golden Assist ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏ï‡∏Å/‡∏û‡∏•‡∏≤‡∏î‡∏ö‡πà‡∏≠‡∏¢
  const bad = (STATE?.stats?.bad|0);
  const goldenChance = Math.min(0.25, 0.06 + (combo === 0 ? 0.08 : 0) + Math.min(0.1, bad * 0.01));

  const useGood = Math.random() < goodBias;
  const char = pickEmoji(useGood ? GOOD : JUNK);
  const golden = useGood && Math.random() < goldenChance;

  const aria = useGood ? 'Healthy food' : 'Junk food';
  const label = char;

  return { char, label, aria, good: !!useGood, golden, life };
}

/* ---------- On hit ---------- */
/** ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: "perfect" | "good" | "bad" | "ok" */
export function onHit(meta, { sfx = {}, fx = {}, power }, STATE, hud) {
  // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢: ‡∏Ç‡∏≠‡∏á‡∏î‡∏µ ‚Üí 35% perfect, ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ good / ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢ ‚Üí bad
  let outcome = meta.good ? (Math.random() < 0.35 ? 'perfect' : 'good') : 'bad';

  // Golden ‚Üí perfect + ‡∏ö‡∏±‡∏ü
  if (meta.golden && meta.good && outcome !== 'bad') {
    outcome = 'perfect';
    try { power?.apply?.('x2', 5); } catch {}
    try { hud?.toast?.('√ó2 Boost (5s)!'); } catch {}
  }

  // ‡∏ñ‡πâ‡∏≤ bad ‚Üí freeze 300ms ‡∏Å‡∏±‡∏ô‡∏£‡∏±‡∏ß‡∏ú‡∏¥‡∏î
  if (outcome === 'bad') {
    try { hud?.flashDanger?.(); } catch {}
    const t = (performance?.now?.() || Date.now());
    STATE.freezeUntil = t + 300;
  }

  return outcome;
}

/* ---------- FX hooks (optional) ---------- */
export const fx = {
  onSpawn(el, STATE) {
    // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á: main ‡∏à‡∏∞ tilt 3D ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
  },
  onHit(x, y, meta, STATE) {
    try {
      const HFX = (window.HHA_FX || {});
      if (meta.golden && meta.good) {
        HFX.shatter3D?.(x, y, { shards: 28, sparks: 18 });
      } else if (meta.good) {
        HFX.shatter3D?.(x, y, { shards: 18, sparks: 8 });
      } else {
        HFX.shatter3D?.(x, y, { shards: 10, sparks: 4 });
      }
    } catch {}
  }
};

/* ---------- Helpers ---------- */
function pickEmoji(pool){
  if (!Array.isArray(pool) || pool.length === 0) return 'üçé';
  let choice = pool[(Math.random()*pool.length)|0];

  // anti-repeat: ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ 2 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  let tries = 0;
  while (_lastPicks.includes(choice) && tries < 6) {
    choice = pool[(Math.random()*pool.length)|0];
    tries++;
  }
  _lastPicks.push(choice);
  if (_lastPicks.length > 2) _lastPicks.shift();
  return choice;
}

function _pushQuests(){
  if (!_hud) return;
  const list = [
    {
      key: 'eatGood',
      name: 'Eat Healthy',
      icon: 'ü•ó',
      need: _quest.eatGood.need,
      progress: _quest.eatGood.progress,
      done: _quest.eatGood.progress >= _quest.eatGood.need
    },
    {
      key: 'avoidJunk',
      name: 'Avoid Junk',
      icon: 'üö´üçî',
      need: _quest.avoidJunk.need,
      progress: _quest.avoidJunk.progress,
      done: _quest.avoidJunk.progress >= _quest.avoidJunk.need
    }
  ];
  _hud.setQuestChips(list);
}

/* ---------- ‡πÄ‡∏™‡∏£‡∏¥‡∏°: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå‡∏´‡∏•‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏î‡πÇ‡∏î‡∏ô ---------- */
/* ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å main ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ outcome/meta (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö ‡πÅ‡∏ï‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥) */
export function postHitForQuest(outcome, meta){
  if (!_hud || !meta) return;
  if (meta.good && (outcome === 'good' || outcome === 'perfect')) {
    _quest.eatGood.progress = Math.min(_quest.eatGood.need, _quest.eatGood.progress + 1);
    if (_quest.eatGood.progress === _quest.eatGood.need) {
      try { _hud.toast('Quest: Eat Healthy ‚úì'); } catch {}
    }
    // ‡∏Å‡∏•‡πÑ‡∏Å‡∏á‡πà‡∏≤‡∏¢: ‡∏ó‡∏∏‡∏Å 2 Good ‚Üí ‡∏ô‡∏±‡∏ö‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á Junk +1
    if ((_quest.eatGood.progress % 2) === 0) {
      _quest.avoidJunk.progress = Math.min(_quest.avoidJunk.need, _quest.avoidJunk.progress + 1);
      if (_quest.avoidJunk.progress === _quest.avoidJunk.need) {
        try { _hud.toast('Quest: Avoid Junk ‚úì'); } catch {}
      }
    }
    _pushQuests();
  }
}

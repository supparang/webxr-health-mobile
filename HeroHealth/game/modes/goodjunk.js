// game/modes/goodjunk.js
// ‡πÇ‡∏´‡∏°‡∏î: ‡∏î‡∏µ vs ‡∏Ç‡∏¢‡∏∞ ‚Äî ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞
// ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ main.js: 'good' | 'bad' | 'perfect' | 'power'
// ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå: life ‡πÅ‡∏ö‡∏ö adaptive, Mini-Quests (5 ‡πÅ‡∏ö‡∏ö ‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤ 3), Power-ups (x2 / Freeze),
//          Coach ‡∏û‡∏π‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à/‡∏û‡∏•‡∏≤‡∏î ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï missionLine ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤

/* =========================
   1) ‡∏Ñ‡∏≠‡∏ô‡∏™‡πÅ‡∏ï‡∏ô‡∏ï‡πå & ‡∏¢‡∏π‡∏ó‡∏¥‡∏•
   ========================= */
const HEALTHY = ['ü•¶','üçé','ü•ï','üçÖ','üçá','üçâ','ü•ó','ü•í','ü•¨','üåΩ'];
const JUNK    = ['üçî','üçü','üç©','üçï','ü•§','üç´','üå≠','üßÅ','üç™','üßÉ'];
const TRAPS   = ['üí£','‚ò†Ô∏è'];

const GOOD_RATIO   = { Easy:0.72, Normal:0.65, Hard:0.58 };
const POWER_RATE   = { Easy:0.08, Normal:0.10, Hard:0.12 };
const ENABLED_POWERS = ['scorex2','freeze'];
const TRAP_RATE    = 0.06;
const PERFECT_WIN  = 320; // ms
const MIN_LIFE     = { Easy:2600, Normal:2200, Hard:1900 };

// ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏à‡∏∞‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤ 3 ‡πÅ‡∏ö‡∏ö/‡∏£‡∏≠‡∏ö)
const QUEST_POOL = [
  { id:'collect_good', icon:'ü•¶', color:'#7fffd4' },
  { id:'avoid_junk',   icon:'üö´üçî', color:'#ffd54a' },
  { id:'perfect',      icon:'‚ú®', color:'#ccff88' },
  { id:'powerups',     icon:'‚úñÔ∏è2/üßä', color:'#b0ff66' },
  { id:'reach_combo',  icon:'üî•', color:'#ffca28' }
];

const QUEST_NEED = {
  collect_good: { Easy: 8, Normal:10, Hard:12 },
  avoid_junk:   { Easy:10, Normal:12, Hard:15 },   // ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏ô JUNK
  perfect:      { Easy: 3, Normal: 4, Hard: 5 },
  powerups:     { Easy: 2, Normal: 3, Hard: 3 },
  reach_combo:  { Easy:10, Normal:12, Hard:15 }    // ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
};

function pick(arr){ return arr[(Math.random()*arr.length)|0]; }
function pick3Distinct(arr){
  const a = [...arr];
  for (let i=a.length-1;i>0;i--){ const j=(Math.random()*(i+1))|0; [a[i],a[j]]=[a[j],a[i]]; }
  return a.slice(0,3);
}
function iconOf(power){ return power==='scorex2'?'‚úñÔ∏è2':(power==='freeze'?'üßä':'‚ú®'); }

function lifeAdaptive(diff, state, mul=1){
  const gj = state.ctx?.gj || {};
  const hits = gj.hits|0, miss = gj.miss|0;
  const acc = (hits+miss)>0 ? (hits/(hits+miss)) : 1;
  const boost = acc < 0.55 ? 1.25 : acc < 0.75 ? 1.12 : 1.00;
  const base = (diff?.life||3000) * boost * mul;
  const minL = MIN_LIFE[state.difficulty] || 2100;
  return Math.max(minL, Math.round(base));
}

/* =========================
   2) Mission HUD helpers
   ========================= */
function questTitle(q, lang='TH'){
  const need = q.need|0, p = q.progress|0;
  const leftSec = q.remain|0;
  const mapTH = {
    collect_good: `‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ ${p}/${need}`,
    avoid_junk:   `‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞ ${p}/${need}s`,
    perfect:      `Perfect Tap ${p}/${need}`,
    powerups:     `‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© ${p}/${need}`,
    reach_combo:  `‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á ${need} (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ${q.comboNow|0})`
  };
  const mapEN = {
    collect_good: `Collect healthy ${p}/${need}`,
    avoid_junk:   `Avoid junk ${p}/${need}s`,
    perfect:      `Perfect taps ${p}/${need}`,
    powerups:     `Grab power-ups ${p}/${need}`,
    reach_combo:  `Reach combo ${need} (now ${q.comboNow|0})`
  };
  const body = (lang==='EN'?mapEN:mapTH)[q.id] || q.id;
  return `${q.icon} ${body} ‚Ä¢ ${leftSec}s`;
}

function updateMissionLine(state){
  const el = document.getElementById('missionLine');
  if (!el) return;
  const lang = state.lang || 'TH';
  const gj = state.ctx?.gj;
  if (!gj || !gj.quests){ el.style.display='none'; return; }

  // ‡πÅ‡∏™‡∏î‡∏á 2 ‡∏á‡∏≤‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å)
  const open = gj.quests.filter(q=>!q.done && !q.fail);
  const show = (open.length?open:gj.quests).slice(0,2);
  const text = show.map(q=>questTitle(q, lang)).join(' ‚Ä¢ ');
  el.textContent = text || (lang==='EN'?'All quests done!':'‡πÄ‡∏Ñ‡∏ß‡∏™‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß!');
  el.style.display = 'block';
}

function questSay(coach, msg){
  try{ coach?.say?.(msg); }catch{}
}

/* =========================
   3) Public API
   ========================= */
export function init(state, hud, diff){
  state.ctx = state.ctx || {};
  // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏ß‡∏™ 3/5
  const selected = pick3Distinct(QUEST_POOL).map(q=>({ ...q }));
  // ‡πÉ‡∏™‡πà need / progress / timer
  for (const q of selected){
    const need = (QUEST_NEED[q.id]||{} )[state.difficulty] ?? 10;
    Object.assign(q, {
      need,
      progress: 0,
      remain: 45,     // ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏ß‡∏™‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤ 45s ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
      done: false,
      fail: false,
      // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      comboNow: 0,
      avoidTimer: 0,  // ‡∏™‡∏∞‡∏™‡∏°‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà "‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏ô JUNK" ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô
      icon: q.icon
    });
  }

  state.ctx.gj = {
    hits:0, miss:0,
    lastTapTs:0,
    quests: selected
  };

  // ‡∏ö‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏ä‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°
  questSay(state?.coach, state.lang==='EN'
    ? 'Mini-quests started! Complete 3 goals in 45s.'
    : '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏¥‡∏ô‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏™‡πÅ‡∏•‡πâ‡∏ß! ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 3 ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô 45 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ');

  updateMissionLine(state);
}

export function pickMeta(diff, state){
  const ts = performance?.now?.() || Date.now();

  // ‡∏™‡∏∏‡πà‡∏°‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå
  if (Math.random() < (POWER_RATE[state.difficulty] || POWER_RATE.Normal) && ENABLED_POWERS.length){
    const p = pick(ENABLED_POWERS);
    return { type:'power', power:p, char:iconOf(p), life: lifeAdaptive(diff, state, 1.0), ts };
  }
  // ‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å
  if (Math.random() < TRAP_RATE){
    return { type:'trap', char: pick(TRAPS), good:false, life: lifeAdaptive(diff, state, 1.05), ts };
  }
  // ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ/‡∏Ç‡∏¢‡∏∞
  const wantGood = Math.random() < (GOOD_RATIO[state.difficulty] || GOOD_RATIO.Normal);
  const char = wantGood ? pick(HEALTHY) : pick(JUNK);
  return { type:'food', char, good:wantGood, life: lifeAdaptive(diff, state, 1.0), ts };
}

export function onHit(meta, sys, state){
  const { sfx, power, fx, coach } = sys || {};
  const gj = state.ctx?.gj || (state.ctx.gj = { hits:0, miss:0, quests:[] });

  // ---------- Power ----------
  if (meta.type === 'power'){
    try{ sfx?.play?.('sfx-powerup'); }catch{}
    // ‡πÄ‡∏Ñ‡∏ß‡∏™ powerups
    const qP = gj.quests?.find(q=>q.id==='powerups' && !q.done && !q.fail);
    if (qP){ qP.progress = Math.min(qP.need, (qP.progress|0)+1); if (qP.progress>=qP.need){ qP.done=true; fx?.popText?.('Quest ‚úì',{color:qP.color}); questSay(coach, state.lang==='EN'?'Power-up quest complete!':'‡πÄ‡∏Ñ‡∏ß‡∏™‡∏û‡∏•‡∏±‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'); } }

    if (meta.power === 'scorex2'){ try{ power?.apply?.('boost'); }catch{} fx?.popText?.('SCORE √ó2', { color:'#b0ff66' }); }
    else if (meta.power === 'freeze'){ const now = performance?.now?.()||Date.now(); state.freezeUntil = now + 2000; fx?.popText?.('FREEZE!', { color:'#66e0ff' }); }

    updateMissionLine(state);
    return 'power';
  }

  // ---------- Trap ----------
  if (meta.type === 'trap'){
    gj.miss++;
    // ‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å‡πÄ‡∏Ñ‡∏ß‡∏™ avoid_junk (‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏∞‡∏™‡∏°)
    const qA = gj.quests?.find(q=>q.id==='avoid_junk' && !q.done && !q.fail);
    if (qA){ qA.avoidTimer = 0; }
    try{ sfx?.bad?.(); }catch{}
    fx?.popText?.('TRAP!', { color:'#ff9b9b' });
    updateMissionLine(state);
    return 'bad';
  }

  // ---------- Food ----------
  if (meta.type === 'food'){
    const now = performance?.now?.() || Date.now();
    if (meta.good){
      gj.hits++;

      // ‡πÄ‡∏Ñ‡∏ß‡∏™ collect_good
      const qC = gj.quests?.find(q=>q.id==='collect_good' && !q.done && !q.fail);
      if (qC){ qC.progress = Math.min(qC.need, (qC.progress|0)+1); if (qC.progress>=qC.need){ qC.done=true; fx?.popText?.('Quest ‚úì',{color:qC.color}); questSay(coach, state.lang==='EN'?'Great! Healthy items collected.':'‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß'); } }

      // ‡πÄ‡∏Ñ‡∏ß‡∏™ reach_combo (‡∏î‡∏π‡∏à‡∏≤‡∏Å state.combo ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
      const qR = gj.quests?.find(q=>q.id==='reach_combo' && !q.done && !q.fail);
      if (qR){ qR.comboNow = Math.max(qR.comboNow|0, state.combo|0); if ((state.combo|0) >= (qR.need|0)){ qR.done=true; fx?.popText?.('Quest ‚úì',{color:qR.color}); questSay(coach, state.lang==='EN'?'Combo quest complete!':'‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢!'); } }

      // Perfect tap
      let isPerfect = false;
      if (meta.ts){ const dt = (now - meta.ts)|0; if (dt <= PERFECT_WIN){ isPerfect = true; } }
      if (isPerfect){
        // ‡πÄ‡∏Ñ‡∏ß‡∏™ perfect
        const qPf = gj.quests?.find(q=>q.id==='perfect' && !q.done && !q.fail);
        if (qPf){ qPf.progress = Math.min(qPf.need, (qPf.progress|0)+1); if (qPf.progress>=qPf.need){ qPf.done=true; fx?.popText?.('Quest ‚úì',{color:qPf.color}); questSay(coach, state.lang==='EN'?'Perfect quest complete!':'‡πÄ‡∏Ñ‡∏ß‡∏™ Perfect ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'); } }
        try{ sfx?.good?.(); }catch{}
        fx?.popText?.('PERFECT',{color:'#ccff88'});
        updateMissionLine(state);
        return 'perfect';
      }

      try{ sfx?.good?.(); }catch{}
      fx?.popText?.('GOOD',{color:'#7fffd4'});
      updateMissionLine(state);
      return 'good';

    } else {
      gj.miss++;
      // ‡πÇ‡∏î‡∏ô JUNK ‚Üí ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™ avoid_junk
      const qA = gj.quests?.find(q=>q.id==='avoid_junk' && !q.done && !q.fail);
      if (qA){ qA.avoidTimer = 0; }
      try{ sfx?.bad?.(); }catch{}
      fx?.popText?.('JUNK!',{color:'#ff9b9b'});
      updateMissionLine(state);
      return 'bad';
    }
  }

  return 'ok';
}

export function tick(state /*, sys */){
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™ (‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
  const gj = state.ctx?.gj; if (!gj || !gj.quests) return;

  for (const q of gj.quests){
    if (q.done || q.fail) continue;

    // ‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
    q.remain = Math.max(0, (q.remain|0) - 1);

    // ‡πÄ‡∏Ñ‡∏ß‡∏™ avoid_junk: ‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏ß‡∏•‡∏≤ "‡∏õ‡∏•‡∏≠‡∏î JUNK" (‡πÄ‡∏û‡∏¥‡πà‡∏° 1s/‡∏ï‡∏¥‡πä‡∏Å ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏ô JUNK)
    if (q.id === 'avoid_junk'){
      q.avoidTimer = Math.min(q.need, (q.avoidTimer|0) + 1);
      q.progress = q.avoidTimer;
      if (q.progress >= q.need){
        q.done = true;
        try{ state?.coach?.say?.(state.lang==='EN'?'Clean eating!':'‡∏™‡∏∞‡∏≠‡∏≤‡∏î! ‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'); }catch{}
      }
    }

    // ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤ ‚Üí fail
    if (q.remain === 0 && !q.done){
      q.fail = true;
      try{ state?.coach?.say?.(state.lang==='EN'?'Quest failed. Try again!':'‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏ß‡∏™ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ!'); }catch{}
    }
  }

  updateMissionLine(state);
}

export function cleanup(/* state */){ /* no-op */ }

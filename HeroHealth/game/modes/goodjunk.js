// game/modes/goodjunk.js
// ‡πÇ‡∏´‡∏°‡∏î: ‡∏î‡∏µ vs ‡∏Ç‡∏¢‡∏∞ ‚Äî ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞
// ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ main.js: 'good' | 'bad' | 'perfect' | 'power'
// ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå: life ‡πÅ‡∏ö‡∏ö adaptive, Perfect tap (‡∏Å‡∏î‡πÑ‡∏ß‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô), Power-ups (x2 / Freeze)

const HEALTHY = ['ü•¶','üçé','ü•ï','üçÖ','üçá','üçâ','ü•ó','ü•í','ü•¨','üåΩ'];
const JUNK    = ['üçî','üçü','üç©','üçï','ü•§','üç´','üå≠','üßÅ','üç™','üßÉ'];
const TRAPS   = ['üí£','‚ò†Ô∏è']; // ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á ENABLE_TRAPS=false

/* ====== ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ====== */
// ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô ‚Äú‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‚Äù ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
const GOOD_RATIO = { Easy:0.72, Normal:0.65, Hard:0.58 };
// ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏õ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏õ‡∏ß‡∏ô‡πå (0..1)
const POWER_RATE = { Easy:0.08, Normal:0.10, Hard:0.12 };
// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ
const ENABLED_POWERS = ['scorex2','freeze']; // ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° 'heal' ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏£‡∏∞‡∏ö‡∏ö HP
// ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å (‡∏à‡∏∞‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô TRAPS ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
const ENABLE_TRAPS = true;
const TRAP_RATE = 0.06; // 6% ‡∏°‡∏µ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å

// ‡πÄ‡∏Å‡∏ì‡∏ë‡πå PERFECT tap (ms) ‚Äî ‡∏Å‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ X ms ‡∏à‡∏∞‡πÑ‡∏î‡πâ perfect
const PERFECT_WINDOW_MS = 320;

// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ life ‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å (‡∏Å‡∏±‡∏ô‡∏´‡∏≤‡∏¢‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô)
const MIN_LIFE_BY_DIFF = { Easy:2600, Normal:2200, Hard:1900 };

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î power_freeze ‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î/‡∏ä‡∏∞‡∏•‡∏≠ spawn ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
const FREEZE_SECONDS = 2;

/* =================================== */

export function init(state /*, hud, diff */){
  state.ctx = state.ctx || {};
  state.ctx.gj = { hits:0, miss:0 };
}

export function pickMeta(diff, state){
  const now = (typeof performance!=='undefined' && performance.now) ? performance.now() : Date.now();

  // 1) ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏õ
  if (Math.random() < (POWER_RATE[state.difficulty] || POWER_RATE.Normal) && ENABLED_POWERS.length){
    const p = pick(ENABLED_POWERS);
    return {
      type: 'power',
      power: p,                   // 'scorex2' | 'freeze' | ...
      char: powerIcon(p),
      life: clampLife(diff, state, {boost:1.0}),
      ts: now
    };
  }

  // 2) ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å
  if (ENABLE_TRAPS && Math.random() < TRAP_RATE){
    const char = TRAPS[(Math.random()*TRAPS.length)|0];
    return {
      type: 'trap',
      char,
      good: false,
      life: clampLife(diff, state, {boost:1.05}), // ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏à‡∏≠‡∏ô‡∏≤‡∏ô‡∏ô‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏ö
      ts: now
    };
  }

  // 3) ‡∏Ç‡∏≠‡∏á‡∏î‡∏µ/‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞
  const wantGood = Math.random() < (GOOD_RATIO[state.difficulty] || GOOD_RATIO.Normal);
  const char = wantGood
    ? HEALTHY[(Math.random()*HEALTHY.length)|0]
    : JUNK[(Math.random()*JUNK.length)|0];

  return {
    type: 'food',
    char,
    good: wantGood,
    life: clampLife(diff, state, {boost:1.0}),
    ts: now
  };
}

export function onHit(meta, sys, state /*, hud */){
  const { score, sfx, power, fx } = sys || {};
  const gj = state.ctx?.gj || (state.ctx.gj = { hits:0, miss:0 });

  // ---- Power-ups ----
  if (meta.type === 'power'){
    try { sfx?.play?.('sfx-powerup'); } catch {}
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î
    if (meta.power === 'scorex2'){
      // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏π‡∏™‡∏ï‡πå‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å PowerUpSystem (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      try { power?.apply?.('boost'); } catch {}
      fx?.popText?.('SCORE √ó2', { color:'#b0ff66' });
    } else if (meta.power === 'freeze'){
      // ‡∏ä‡∏∞‡∏•‡∏≠‡∏™‡πÅ‡∏õ‡∏ß‡∏ô‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      const old = power?.timeScale ?? 1;
      if (power) power.timeScale = 99;
      fx?.popText?.('FREEZE!', { color:'#66e0ff' });
      setTimeout(()=>{ if(power) power.timeScale = old||1; }, FREEZE_SECONDS*1000);
    }
    return 'power';
  }

  // ---- Traps ----
  if (meta.type === 'trap'){
    try { sfx?.bad?.(); } catch {}
    fx?.popText?.('TRAP!', { color:'#ff7a7a' });
    gj.miss++;
    return 'bad';
  }

  // ---- Foods ----
  if (meta.type !== 'food'){
    // ‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î
    try { sfx?.bad?.(); } catch {}
    return 'bad';
  }

  const quickMs = elapsedSince(meta);
  const isPerfectTap = (meta.good && quickMs <= PERFECT_WINDOW_MS) || (state?.fever?.active);

  if (meta.good){
    gj.hits++;
    try { sfx?.good?.(); } catch {}
    if (isPerfectTap){
      fx?.popText?.('PERFECT!', { color:'#ccff88' });
      return 'perfect';
    }
    return 'good';
  } else {
    gj.miss++;
    try { sfx?.bad?.(); } catch {}
    return 'bad';
  }
}

export function tick(/* state, sys, hud */){
  // ‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©
}

export function cleanup(state /*, hud */){
  if (state?.ctx?.gj){ state.ctx.gj = { hits:0, miss:0 }; }
}

/* ========== Helpers ========== */
function pick(arr){ return arr[(Math.random()*arr.length)|0]; }

function powerIcon(kind){
  if (kind==='scorex2') return '‚úñÔ∏è2';
  if (kind==='freeze')  return 'üßä';
  return '‚ú®';
}

function clampLife(diff, state, {boost=1.0}={}){
  // ‡∏õ‡∏£‡∏±‡∏ö life ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const cfg = diff || {};
  const g = state.ctx?.gj || { hits:0, miss:0 };
  const tot = g.hits + g.miss;
  const acc = tot>0 ? g.hits/tot : 1;

  // ‡πÅ‡∏°‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‚Üí ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô, ‡πÅ‡∏°‡πà‡∏ô‡∏™‡∏π‡∏á ‚Üí ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
  const adapt = acc < 0.60 ? 1.22 : (acc < 0.80 ? 1.10 : 0.98);
  const baseLife = (cfg.life || 3000) * adapt * boost;

  const minLife = MIN_LIFE_BY_DIFF[state.difficulty] || MIN_LIFE_BY_DIFF.Normal;
  return Math.max(minLife, Math.round(baseLife));
}

function elapsedSince(meta){
  const now = (typeof performance!=='undefined' && performance.now) ? performance.now() : Date.now();
  const ts  = meta?.ts || now;
  return Math.max(0, now - ts);
}

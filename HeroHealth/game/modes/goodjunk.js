// === Hero Health Academy ‚Äî modes/goodjunk.js (resilient drop-in) ===
export const name = 'goodjunk';

/* ------------------------------------------------------------------ */
/* 1) Catalog (‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ/‡∏Ç‡∏¢‡∏∞) ‚Äî ‡πÉ‡∏ä‡πâ emoji ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
   ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á id -> URL ‡πÉ‡∏ô engine ‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ó‡∏ô
/* ------------------------------------------------------------------ */
const GOOD = [
  { id:'apple',    labelEN:'Apple',     labelTH:'‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡∏•',    icon:'üçé' },
  { id:'carrot',   labelEN:'Carrot',    labelTH:'‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó',      icon:'ü•ï' },
  { id:'broccoli', labelEN:'Broccoli',  labelTH:'‡∏ö‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏•‡∏µ',  icon:'ü•¶' },
  { id:'rice',     labelEN:'Rice',      labelTH:'‡∏Ç‡πâ‡∏≤‡∏ß',       icon:'üçö' },
  { id:'fish',     labelEN:'Fish',      labelTH:'‡∏õ‡∏•‡∏≤',        icon:'üêü' },
  { id:'egg',      labelEN:'Egg',       labelTH:'‡πÑ‡∏Ç‡πà',        icon:'ü•ö' },
  { id:'milk',     labelEN:'Milk',      labelTH:'‡∏ô‡∏°',         icon:'ü•õ' },
];

const JUNK = [
  { id:'donut',    labelEN:'Donut',     labelTH:'‡πÇ‡∏î‡∏ô‡∏±‡∏ó',       icon:'üç©' },
  { id:'burger',   labelEN:'Burger',    labelTH:'‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏≠‡∏£‡πå',  icon:'üçî' },
  { id:'fries',    labelEN:'Fries',     labelTH:'‡πÄ‡∏ü‡∏£‡∏ô‡∏ä‡πå‡∏ü‡∏£‡∏≤‡∏¢‡∏™‡πå',icon:'üçü' },
  { id:'soda',     labelEN:'Soda',      labelTH:'‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏î‡∏•‡∏°',    icon:'ü•§' },
  { id:'candy',    labelEN:'Candy',     labelTH:'‡∏•‡∏π‡∏Å‡∏≠‡∏°',       icon:'üç¨' },
  { id:'cookie',   labelEN:'Cookie',    labelTH:'‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ',      icon:'üç™' },
  { id:'pizza',    labelEN:'Pizza',     labelTH:'‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤',      icon:'üçï' },
];

/* ------------------------------------------------------------------ */
/* 2) Local state (‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)                                     */
/* ------------------------------------------------------------------ */
const ST = {
  lang: 'TH',
  needGood: 0,
  gotGood: 0,
  x2Until: 0,
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à/‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  streakGood: 0,
  avoidJunkTimerMs: 0,
  lastTickTs: 0,
  // refs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö clean up ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ timer/pointer ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
  _timers: [],
};

function resetLocal() {
  ST.gotGood = 0;
  ST.streakGood = 0;
  ST.avoidJunkTimerMs = 0;
  ST.x2Until = 0;
  ST.lastTickTs = performance.now();
  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timer ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  ST._timers.forEach(id => clearInterval(id));
  ST._timers.length = 0;
}

/* ------------------------------------------------------------------ */
/* 3) Safe i18n helper                                                 */
/* ------------------------------------------------------------------ */
function t(th, en, lang) { return lang === 'EN' ? en : th; }

/* ------------------------------------------------------------------ */
/* 4) (Optional) FX import ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‚Äî ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö path absolute        */
/*    - ‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° import fx.js ‡∏à‡∏≤‡∏Å 2 path: relative ‡∏Å‡∏±‡∏ö absolute ‡πÄ‡∏î‡∏¥‡∏°   */
/* ------------------------------------------------------------------ */
let FX = {
  add3DTilt: () => {},
  shatter3D: () => {}
};

(async () => {
  // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° relative ‡∏Å‡πà‡∏≠‡∏ô (‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö main engine ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
  try {
    const m = await import('../game/core/fx.js').catch(() => null);
    if (m) FX = { add3DTilt: m.add3DTilt || (()=>{}), shatter3D: m.shatter3D || (()=>{}) };
  } catch(e) {}
  // ‡∏™‡∏≥‡∏£‡∏≠‡∏á: path absolute ‡πÅ‡∏ö‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°
  if (!FX.add3DTilt || !FX.shatter3D) {
    try {
      const m2 = await import('/webxr-health-mobile/HeroHealth/game/core/fx.js').catch(() => null);
      if (m2) FX = { add3DTilt: m2.add3DTilt || (()=>{}), shatter3D: m2.shatter3D || (()=>{}) };
    } catch(e) {}
  }
})();

/* ------------------------------------------------------------------ */
/* 5) Engine hooks                                                      */
/*    ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤ A‚ÄìD (missions-safe):                              */
/*    - init(gameState, hud, diff)                                     */
/*    - cleanup()                                                      */
/*    - tick(dtMs?, now?)  (optional)                                  */
/*    - pickMeta(diff) -> meta                                         */
/*    - onHit(meta, systems) -> 'good'|'bad'|'ignore' (‡∏ú‡∏•‡πÉ‡∏´‡πâ engine‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô) */
/*    - getPowerDurations(), powers.*                                  */
/*    - fx.onSpawn/ onHit                                              */
/* ------------------------------------------------------------------ */

export function init(gameState = {}, hud = null, diff = {}) {
  ST.lang = (localStorage.getItem('hha_lang') || gameState.lang || 'TH').toUpperCase();
  resetLocal();

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‚Äú‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏î‡∏π‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
  // (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏à‡∏ö‡πÄ‡∏Å‡∏°)
  const d = (gameState?.difficulty || diff?.name || '').toString().toLowerCase();
  ST.needGood = d === 'hard' ? 20 : (d === 'easy' ? 10 : 15);

  // ‡∏ñ‡πâ‡∏≤ engine ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á ‚Äú‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‚Äù
  try {
    hud?.mission?.setPrimary?.(
      t(`‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ${ST.needGood} ‡∏ä‡∏¥‡πâ‡∏ô`,
        `Collect at least ${ST.needGood} healthy items`,
        ST.lang)
    );
  } catch(e) {}
}

export function cleanup() {
  resetLocal();
}

export function tick(dtMs = 0, now = performance.now()) {
  // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Mission: ‚Äú‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞ n ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‚Äù
  // ‡πÇ‡∏î‡∏¢ dtMs ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å engine (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏≠‡∏á)
  if (!dtMs) {
    dtMs = now - (ST.lastTickTs || now);
  }
  ST.lastTickTs = now;
  ST.avoidJunkTimerMs += dtMs;
}

/* ------------------------------------------------------------------ */
/* 6) Spawn meta: engine ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ó‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ö‡∏ô‡∏â‡∏≤‡∏Å             */
/*    - ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô GOOD:JUNK ~ 60:40                                     */
/*    - life (TTL) ‡∏°‡∏µ‡πÄ‡∏û‡∏î‡∏≤‡∏ô/‡∏û‡∏∑‡πâ‡∏ô                                        */
/*    - mult = 2 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á x2Until                               */
/*    - points ‡πÉ‡∏™‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward-compat (engine ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≤‡∏à‡∏≠‡πà‡∏≤‡∏ô meta.points) */
/* ------------------------------------------------------------------ */
export function pickMeta(diff = {}) {
  const isGood = Math.random() < 0.6;
  const pool = isGood ? GOOD : JUNK;
  const it = pool[(Math.random() * pool.length) | 0];

  const golden = performance.now() < ST.x2Until;
  const mult = golden ? 2 : 1;

  const baseLife = Number(diff.life) > 0 ? Number(diff.life) : 3000;
  const life = clamp(baseLife, 700, 4500);

  // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡∏ñ‡πâ‡∏≤ engine ‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏≠‡∏á‡∏à‡∏≤‡∏Å 'good/bad' ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£
  const basePoints = isGood ? 10 : -5;

  return {
    // identity
    id: it.id,
    labelEN: it.labelEN,
    labelTH: it.labelTH,
    char: it.icon,

    // gameplay
    good: isGood,
    points: basePoints, // for backward compatibility
    mult,
    life,
    golden,

    // hint ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ engine ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
    // e.g., category:'food', rarity:'common'
  };
}

/* ------------------------------------------------------------------ */
/* 7) Hit logic: ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ engine                                  */
/*    return: 'good' | 'bad' | 'ignore'                                */
/* ------------------------------------------------------------------ */
export function onHit(meta = {}, systems = {}) {
  const coach = systems.coach;
  // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏î‡∏ô ‚Äú‡∏î‡∏µ‚Äù
  if (meta.good) {
    ST.gotGood++;
    ST.streakGood++;
    ST.avoidJunkTimerMs = 0; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô ‚Äú‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏¢‡∏∞‚Äù

    // ‡πÇ‡∏Ñ‡πâ‡∏ä‡∏û‡∏π‡∏î (‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö coach)
    safeCoachSay(
      coach,
      t('‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ', 'Great! Healthy pick', ST.lang)
    );

    // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå mission (‡∏ñ‡πâ‡∏≤ engine ‡∏ü‡∏±‡∏á)
    systems.mission?.emit?.('good-pick', { streakGood: ST.streakGood, gotGood: ST.gotGood });

    // ‡πÅ‡∏à‡πâ‡∏á HUD ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å
    try {
      systems.hud?.mission?.setProgress?.(ST.gotGood / Math.max(1, ST.needGood));
    } catch(e) {}

    return 'good';
  }

  // ‡πÇ‡∏î‡∏ô ‚Äú‡∏Ç‡∏¢‡∏∞‚Äù
  ST.streakGood = 0;
  ST.avoidJunkTimerMs = 0;

  safeCoachSay(
    coach,
    t('‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞!', 'Careful, junk!', ST.lang)
  );

  systems.mission?.emit?.('junk-hit', {});

  return 'bad';
}

/* ------------------------------------------------------------------ */
/* 8) Powers & durations: ‡πÉ‡∏´‡πâ engine ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö UI bar ‡πÑ‡∏î‡πâ                  */
/* ------------------------------------------------------------------ */
export function getPowerDurations() {
  return { x2: 8, freeze: 3, magnet: 0 };
}

export const powers = {
  x2Target() {
    ST.x2Until = performance.now() + 8000;
  },
  freezeTarget() {
    // ‡πÉ‡∏´‡πâ engine ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ freeze spawn ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
  },
  magnetNext() {
    // ‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏°‡πà‡πÄ‡∏´‡∏•‡πá‡∏Å (‡πÄ‡∏ß‡πâ‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ engine ‡∏Ç‡πâ‡∏≤‡∏°)
  },
};

/* ------------------------------------------------------------------ */
/* 9) FX hooks: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡πà‡∏≤‡∏ô engine ‡∏ï‡∏≠‡∏ô spawn/hit                         */
/* ------------------------------------------------------------------ */
export const fx = {
  onSpawn(el/*, state*/) {
    try { FX.add3DTilt?.(el); } catch(e) {}
  },
  onHit(x, y/*, meta, state*/) {
    try { FX.shatter3D?.(x, y); } catch(e) {}
  }
};

/* ------------------------------------------------------------------ */
/* 10) Utils                                                           */
/* ------------------------------------------------------------------ */
function clamp(n, a, b) { return Math.max(a, Math.min(b, n)); }

function safeCoachSay(coach, text) {
  try { coach?.say?.(text); } catch(e) {}
}

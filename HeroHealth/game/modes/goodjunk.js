// game/modes/groups.js
// ‡πÇ‡∏´‡∏°‡∏î: ‡∏à‡∏≤‡∏ô 5 ‡∏´‡∏°‡∏π‡πà (‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ + ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à 45s + power-ups) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö/‡∏ü‡∏µ‡πÄ‡∏ß‡∏≠‡∏£‡πå

/* =========================
   1) ‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å / ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
   ========================= */
const GROUPS = {
  grain:   { labelTH:'‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä',  em:['üçö','üçû','ü•ñ','ü•Ø','üçú'] },
  veg:     { labelTH:'‡∏ú‡∏±‡∏Å',     em:['ü•¶','ü•ï','ü•¨','üåΩ','ü´ë'] },
  protein: { labelTH:'‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô',  em:['ü•©','üçó','üçñ','ü•ö','üêü'] },
  fruit:   { labelTH:'‡∏ú‡∏•‡πÑ‡∏°‡πâ',   em:['üçé','üçå','üçá','üçì','üçä'] },
  dairy:   { labelTH:'‡∏ô‡∏°',      em:['ü•õ','üßÄ','üç¶','üç®'] }
};
const KEYS = Object.keys(GROUPS);
const pick = (arr)=>arr[(Math.random()*arr.length)|0];

// ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à 45 ‡∏ß‡∏¥‚Äî‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
const MISSION_NEED = { Easy:6, Normal:8, Hard:10 };

// ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î power-up ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏õ‡∏ß‡∏ô‡πå
const POWERUP_RATE  = { Easy:0.09, Normal:0.11, Hard:0.13 };
// ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå
const POWERUP_MIX = [
  { type:'power_dual',   w:4, icon:'‚ú®' }, // ‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤ 2 ‡∏´‡∏°‡∏ß‡∏î
  { type:'power_scorex2',w:3, icon:'‚úñÔ∏è2' }, // ‡πÅ‡∏à‡πâ‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ 'power' ‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå
  { type:'power_freeze', w:2, icon:'üßä' },  // ‡∏ä‡∏∞‡∏•‡∏≠‡∏™‡πÅ‡∏õ‡∏ß‡∏ô‡πå (‡∏ú‡πà‡∏≤‡∏ô power.timeScale ‡∏ó‡∏µ‡πà main.js ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
  { type:'power_rotate', w:2, icon:'üîÑ' }   // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
];

// ‡∏™‡∏∏‡πà‡∏°‡∏ä‡∏ô‡∏¥‡∏î power-up ‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
function rollPower(){
  const total = POWERUP_MIX.reduce((s,x)=>s+x.w,0);
  let r = Math.random()*total;
  for(const it of POWERUP_MIX){ if((r-=it.w)<=0) return it; }
  return POWERUP_MIX[0];
}

/* =========================
   2) HUD helpers (fallback DOM)
   ========================= */
function setTargetBadge(text){
  const w = document.getElementById('targetWrap');
  const b = document.getElementById('targetBadge');
  if (w) w.style.display = 'block';
  if (b) b.textContent = text || '‚Äî';
}
function labelTH(k){ return GROUPS[k]?.labelTH || '‚Äî'; }
function rotateSingleTarget(exceptA, exceptB){
  const pool = KEYS.filter(k=>k!==exceptA && k!==exceptB);
  return pick(pool.length?pool:KEYS);
}
function targetChanceByDiff(diff){
  if (diff==='Easy') return 0.5;
  if (diff==='Hard') return 0.7;
  return 0.6;
}
function isOnTarget(k, gctx){ return k===gctx.target1 || (!!gctx.target2 && k===gctx.target2); }
function pad(n){ n|=0; return n<10?('0'+n):(''+n); }

function refreshTargetHUD(state){
  const g = state.ctx.groups;
  const keys = [g.target1, g.target2].filter(Boolean);
  let text = keys.length ? keys.map(labelTH).join(' + ') : '‚Äî';
  const tags = [];
  if (g.dualRemain>0)    tags.push(`DUAL ${pad(g.dualRemain)}s`);
  if (g.freezeRemain>0)  tags.push(`FREEZE ${pad(g.freezeRemain)}s`);
  if (g.scorex2Remain>0) tags.push(`x2 ${pad(g.scorex2Remain)}s`);
  if (tags.length) text += ' ‚Ä¢ ' + tags.join(' | ');
  setTargetBadge(text);
}

function updateMissionLine(state){
  const el = document.getElementById('missionLine');
  if (!el) return;
  const m = state.ctx.groups.mission;
  if (!m){ el.style.display='none'; return; }
  el.style.display = 'block';
  if (m.done) el.textContent = m.fail ? '‚åõ Mission Failed' : 'üèÅ Mission Complete';
  else el.textContent = `üéØ ‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤ ${m.progress}/${m.need} ‚Ä¢ ${m.remain|0}s`;
}

/* =========================
   3) Public API
   ========================= */
export function init(state){
  state.ctx = state.ctx || {};
  state.ctx.groups = {
    target1: rotateSingleTarget(), // ‡πÄ‡∏õ‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    target2: null,
    targetHits: 0,
    // timers
    dualRemain: 0,
    scorex2Remain: 0,
    freezeRemain: 0,
    // mission
    mission: {
      need: MISSION_NEED[state.difficulty] ?? 8,
      progress: 0,
      remain: 45,
      done: false,
      fail: false
    }
  };
  refresh

// === Hero Health Academy ‚Äî game/modes/goodjunk.js
// Mode: Good vs Trash
// - DOM-spawn (‡πÉ‡∏ä‡πâ #spawnHost ‡∏Ç‡∏≠‡∏á main)
// - Anti-repeat emoji (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô 2 ‡∏ä‡∏¥‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
// - Golden Assist (‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ / ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏±‡∏°‡πÅ‡∏ö‡πá‡∏Å)
// - Dynamic lifetime + end-phase speedup (‡∏ä‡πà‡∏ß‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
// - Soft penalty (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÅ‡∏£‡∏á‡πÄ‡∏Å‡∏¥‡∏ô, ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏µ‡πà ScoreSystem)
// - Freeze-on-bad 300ms (‡∏Å‡∏±‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏î‡∏£‡∏±‡∏ß‡∏ú‡∏¥‡∏î)
// - Mini-quests (Eat Good / Avoid Junk) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡πà‡∏≤‡∏ô HUD

export const name = 'goodjunk';

/* Pools */
const GOOD = ['ü•¶','ü•ï','üçé','üçå','ü•ó','üêü','ü•ú','üçö','üçû','ü•õ','üçá','üçì','üçä','üçÖ','üçÜ','ü•¨','ü•ù','üçç','üçê','üçë'];
const JUNK = ['üçî','üçü','üå≠','üçï','üç©','üç™','üç∞','üßã','ü•§','üç´','üçú','üçñ','üçó','üçü','üßÇ','üç≠','üßÅ'];

/* Local state (lives only inside this module per run) */
let _state = null;           // ref STATE from main
let _hud = null;             // ref HUD from main
let _startT = 0;             // ms (performance.now)
let _lastPicks = [];         // last 2 chars to avoid repeats
let _quest = {               // mini-quests progress
  eatGood: { need: 10, progress: 0 },
  avoidJunk: { need: 6, progress: 0, /* ‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å "‡πÑ‡∏°‡πà‡∏Å‡∏î Junk" ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ */ },
};
let _nextQuestAnnounce = 0;

/* ---------- Lifecycle ---------- */

export function init(STATE, hud, opts = {}) {
  _state = STATE;
  _hud = hud;
  _startT = (performance?.now?.() || Date.now());

  _lastPicks.length = 0;

  // Reset/seed quests
  _quest = {
    eatGood:   { need: 10, progress: 0 },
    avoidJunk: { need: 6, progress: 0 },
  };
  _pushQuests();

  // ‡πÅ‡∏™‡∏î‡∏á Target ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à (‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ = ‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ)
  try { _hud.setTarget('‡∏ú‡∏•‡πÑ‡∏°‡πâ/‡∏ú‡∏±‡∏Å/‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏î‡∏µ', _quest.eatGood.progress, _quest.eatGood.need); } catch {}
  try { _hud.showTarget(); } catch {}
}

export function cleanup(/*STATE, hud*/) {
  // ‡πÑ‡∏°‡πà‡∏°‡∏µ interval ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ (‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô main)
  _state = null;
  _hud = null;
}

/* per-frame tick (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å main.loop) */
export function tick(STATE, { sfx = {}, fx = {}, power }, hud) {
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï quest chip ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡πà‡∏≤‡∏á ‡πÜ (‡∏ó‡∏∏‡∏Å ~500ms) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏á‡∏≤‡∏ô DOM
  const t = performance?.now?.() || Date.now();
  if (t > _nextQuestAnnounce) {
    _nextQuestAnnounce = t + 500;
    _pushQuests();
  }
}

/* ---------- Spawn meta picker ---------- */
/** main.js ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å pickMeta() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• spawn ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô */
export function pickMeta(control = { life: 3000 }, STATE) {
  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£
  const now = performance?.now?.() || Date.now();
  const elapsed = Math.max(0, (now - _startT) / 1000);           // sec
  const remain = Math.max(0, (STATE?.endAt ? (STATE.endAt - (performance?.now?.() || Date.now())) / 1000 : 0));
  const endPhase = remain <= 15;                                  // ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏Å‡∏°

  // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡πÅ‡∏õ‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó GOOD/JUNK (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ï‡∏£‡∏≤ 65/35 ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
  let goodBias = 0.65;
  // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏™‡∏π‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° Junk ‡∏ö‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢
  if (STATE?.combo > 10) goodBias -= 0.07;
  if (STATE?.combo > 20) goodBias -= 0.05;

  // ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡πâ‡∏≤‡∏¢ ‡πÄ‡∏£‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  const baseLife = Math.max(1200, control.life || 3000);
  let life = Math.min(baseLife, 2600);
  if (elapsed > 20) life -= 200;
  if (elapsed > 35) life -= 200;
  if (endPhase) life -= 300;                      // end-phase speedup
  life = Math.max(700, life);

  // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Golden Assist:
  // - ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏ï‡∏Å 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏•‡∏≤‡∏î‡∏ö‡πà‡∏≠‡∏¢ ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ä‡πà‡∏ß‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
  // - ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
  const combo = (STATE?.combo|0);
  const bad = (STATE?.stats?.bad|0);
  const goldenChance =
    Math.min(0.25, 0.06 + (combo === 0 ? 0.08 : 0) + Math.min(0.1, bad * 0.01));

  const useGood = Math.random() < goodBias;
  const char = pickEmoji(useGood ? GOOD : JUNK);
  const golden = useGood && Math.random() < goldenChance;

  const aria = useGood ? 'Healthy food' : 'Junk food';
  const label = char; // ‡πÉ‡∏ä‡πâ emoji ‡πÄ‡∏õ‡πá‡∏ô label ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢/‡πÉ‡∏´‡∏ç‡πà)

  return { char, label, aria, good: !!useGood, golden, life };
}

/* ---------- On hit ---------- */
/**
 * @returns "perfect" | "good" | "bad" | "ok"
 * main.js ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö/‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏ï‡πà‡∏≠
 */
export function onHit(meta, { sfx = {}, fx = {}, power }, STATE, hud) {
  // ‡∏ß‡∏±‡∏î "‡πÄ‡∏£‡πá‡∏ß" = perfect, ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ = good
  // (‡∏á‡πà‡∏≤‡∏¢ ‡πÜ: random‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡πÉ‡∏ô meta ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏ï‡∏≤‡∏° life%)
  let outcome = meta.good ? (Math.random() < 0.35 ? 'perfect' : 'good') : 'bad';

  // Golden ‡∏ä‡πà‡∏ß‡∏¢: ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ ‚Üí ‡πÉ‡∏´‡πâ‡∏ú‡∏• perfect ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ü‡πÄ‡∏•‡πá‡∏Å ‡πÜ
  if (meta.golden && meta.good && outcome !== 'bad') {
    outcome = 'perfect';
    try { power?.apply?.('x2', 5); } catch {}
    try { hud?.toast?.('√ó2 Boost (5s)!'); } catch {}
  }

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô bad ‚Üí freeze-on-bad 300ms ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏£‡∏±‡∏ß‡∏ú‡∏¥‡∏î
  if (outcome === 'bad') {
    try { hud?.flashDanger?.(); } catch {}
    // freeze
    const t = (performance?.now?.() || Date.now());
    STATE.freezeUntil = t + 300;
  }

  return outcome;
}

/* ---------- FX hooks (optional) ---------- */
export const fx = {
  onSpawn(el, STATE) {
    // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡∏á‡∏î‡∏µ/‡∏ó‡∏≠‡∏á ‡∏°‡∏µ‡πÅ‡∏™‡∏á/‡∏ß‡∏¥‡∏ö‡∏ß‡∏±‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    // (‡πÉ‡∏ä‡πâ class / style ‡∏ï‡∏£‡∏á ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö lib)
    // meta ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å main ‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á el
    // ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å data-* ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    // (‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á: main ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å FX.add3DTilt ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß)
  },
  onHit(x, y, meta, STATE) {
    try {
      // ‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà main ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ß‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      const HFX = (window.HHA_FX || {});
      if (meta.golden && meta.good) {
        HFX.shatter3D?.(x, y, { shards: 28, sparks: 18 });
      } else if (meta.good) {
        HFX.shatter3D?.(x, y, { shards: 18, sparks: 8 });
      } else {
        HFX.shatter3D?.(x, y, { shards: 10, sparks: 4 });
      }
    } catch {}
  }
};

/* ---------- Helpers ---------- */
function pickEmoji(pool){
  // anti-repeat: ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ 2 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  if (!Array.isArray(pool) || pool.length === 0) return 'üçé';
  let choice = pool[(Math.random()*pool.length)|0];

  let tries = 0;
  while (_lastPicks.includes(choice) && tries < 6) {
    choice = pool[(Math.random()*pool.length)|0];
    tries++;
  }
  _lastPicks.push(choice);
  if (_lastPicks.length > 2) _lastPicks.shift();
  return choice;
}

function _pushQuests(){
  if (!_hud) return;
  const list = [
    {
      key: 'eatGood',
      name: 'Eat Healthy',
      icon: 'ü•ó',
      need: _quest.eatGood.need,
      progress: _quest.eatGood.progress,
      done: _quest.eatGood.progress >= _quest.eatGood.need
    },
    {
      key: 'avoidJunk',
      name: 'Avoid Junk',
      icon: 'üö´üçî',
      need: _quest.avoidJunk.need,
      progress: _quest.avoidJunk.progress,
      done: _quest.avoidJunk.progress >= _quest.av

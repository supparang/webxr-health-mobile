// /webxr-health-mobile/HeroHealth/game/modes/goodjunk.js
// Good vs Junk (DOM spawn) ‚Äî 2025-10-31
// - ‡πÉ‡∏ä‡πâ #spawnHost ‡πÉ‡∏ô #gameLayer
// - export API: name, help(lang), start(cfg), pause(), resume(), stop(), update(dt)
// - ‡πÑ‡∏°‡πà‡∏û‡∏∂‡πà‡∏á optional chaining
// - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö main.js ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö:
//   1) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ window.__HHA_modeHooks.addScore / badHit ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏á
//   2) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ window.addScore / badHit (global) ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏á
//   3) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï #score/#combo ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (self-contained)

export const name = 'goodjunk';

const GOOD = ['ü•¶','ü•ï','üçé','üçå','ü•ó','üêü','ü•ú','üçö','üçû','ü•õ','üçá','üçì','üçä','üçÖ','üçÜ','ü•¨','ü•ù','üçç','üçê','üçë'];
const JUNK = ['üçî','üçü','üå≠','üçï','üç©','üç™','üç∞','üßã','ü•§','üçó','üçñ','üç´','ü•ì','üçø','üßà','üßÇ'];

let host    = null;
let alive   = false;
let spawnT  = 0;
let rate    = 700;   // ms between spawns
let life    = 1600;  // ms lifetime
let rndBusy = false;

// ---------- Glue: score / bad ----------
function emitScore(delta, perfect){
  try{
    if (window.__HHA_modeHooks && typeof window.__HHA_modeHooks.addScore === 'function'){
      window.__HHA_modeHooks.addScore(delta, !!perfect); return;
    }
    if (typeof window.addScore === 'function'){ window.addScore(delta, !!perfect); return; }
  }catch(_e){}
  // DOM fallback (update #score/#combo ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
  try{
    const s = document.getElementById('score');
    const c = document.getElementById('combo');
    if(s){
      const cur = parseInt(s.textContent || '0', 10) || 0;
      s.textContent = String(cur + delta);
    }
    if(c){
      const curc = parseInt(String(c.textContent || 'x0').replace('x',''), 10) || 0;
      c.textContent = 'x' + String(curc + 1);
    }
  }catch(_e2){}
}

function emitBad(){
  try{
    if (window.__HHA_modeHooks && typeof window.__HHA_modeHooks.badHit === 'function'){
      window.__HHA_modeHooks.badHit(); return;
    }
    if (typeof window.badHit === 'function'){ window.badHit(); return; }
  }catch(_e){}
  // DOM fallback
  try{
    const c = document.getElementById('combo');
    if(c) c.textContent = 'x0';
    // flash ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    const gl = document.getElementById('gameLayer');
    if(gl){
      const old = gl.style.background;
      gl.style.transition='background 120ms ease';
      gl.style.background='radial-gradient(1200px 500px at 50% -40%, #411a26 12%, #2a0c16 55%, #200b16)';
      setTimeout(()=>{ gl.style.background = old; }, 140);
    }
  }catch(_e2){}
}

// ---------- Helpers ----------
function on(el, ev, fn){ if(el) el.addEventListener(ev, fn, false); }
function rng(a,b){ return Math.floor(a + Math.random()*(b-a+1)); }

function makeItem(txt, isGood){
  const d = document.createElement('button');
  d.className = 'spawn-emoji';
  d.setAttribute('aria-label', isGood ? 'good item' : 'junk item');
  d.textContent = txt;
  d.style.position = 'absolute';
  d.style.border = '0';
  d.style.background = 'transparent';
  d.style.fontSize = '38px';
  d.style.filter = 'drop-shadow(0 3px 6px rgba(0,0,0,.45))';
  d.dataset.good = isGood ? '1' : '0';

  const W = host.clientWidth  || 640;
  const H = host.clientHeight || 360;
  const pad = 24;
  const x = rng(pad, Math.max(pad, W - 64));
  const y = rng(pad, Math.max(pad, H - 64));
  d.style.left = x + 'px';
  d.style.top  = y + 'px';

  // lifetime
  const lifeMs = rng(life - 250, life + 250);
  let gone = false;
  const killto = setTimeout(()=>{ if(!gone) leave(); }, lifeMs);

  function leave(){
    gone = true;
    d.style.transition = 'transform 160ms ease, opacity 160ms ease';
    d.style.transform = 'scale(.6) translateY(10px)';
    d.style.opacity = '0';
    setTimeout(()=>{ if(d.parentNode) d.parentNode.removeChild(d); }, 170);
  }

  on(d,'click', function(){
    if(!alive) return;
    clearTimeout(killto);
    d.style.transition = 'transform 120ms ease, opacity 120ms ease';
    d.style.transform  = 'scale(1.25)';
    setTimeout(()=>{ d.style.opacity='0'; }, 90);
    setTimeout(()=>{ if(d.parentNode) d.parentNode.removeChild(d); }, 130);

    if(d.dataset.good === '1'){
      const perfect = Math.random() < 0.22;
      emitScore(perfect ? 200 : 100, perfect);
      // small pop on good
      try{
        host.style.transition='transform 80ms ease';
        host.style.transform='scale(1.01)';
        setTimeout(()=>{ host.style.transform='scale(1)'; }, 90);
      }catch(_e){}
    }else{
      emitBad();
    }
  });

  host.appendChild(d);
}

// ---------- Public API ----------
export function help(lang){
  return (lang === 'en')
    ? 'Tap healthy foods to score. Avoid junk! Bad hits reset combo. Race against the clock!'
    : '‡πÅ‡∏ï‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‚Äú‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏¢‡∏∞ ‡πÇ‡∏î‡∏ô‡∏Ç‡∏¢‡∏∞‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î!';
}

export function start(cfg){
  host = document.getElementById('spawnHost');
  if(!host){
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á host ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
    const gl = document.getElementById('gameLayer');
    host = document.createElement('div');
    host.id = 'spawnHost';
    host.style.position='absolute';
    host.style.inset='0';
    if(gl) gl.appendChild(host); else document.body.appendChild(host);
  }

  alive  = true;
  spawnT = 0;

  // difficulty
  const d = cfg && cfg.difficulty ? String(cfg.difficulty) : 'Normal';
  if(d === 'Easy'){ rate = 820; life = 1900; }
  else if(d === 'Hard'){ rate = 560; life = 1400; }
  else { rate = 700; life = 1600; }

  // ‡πÅ‡∏™‡∏î‡∏á HUD ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ
  try{
    const hud = document.getElementById('hudWrap');
    if(hud) hud.style.display = 'block';
  }catch(_e){}

  // ‡πÇ‡∏Ñ‡πâ‡∏ä: ‚Äú‡πÄ‡∏£‡∏¥‡πà‡∏°!‚Äù
  try{
    const coach = document.getElementById('coachText');
    if(coach) coach.textContent = (cfg && cfg.lang === 'en') ? 'Go!' : '‡πÄ‡∏£‡∏¥‡πà‡∏°!';
  }catch(_e){}
}

export function pause(){ alive = false; }
export function resume(){ alive = true; }

export function stop(){
  alive = false;
  if(host){
    const nodes = host.querySelectorAll('.spawn-emoji');
    for(let i=0;i<nodes.length;i++){
      const n = nodes[i];
      if(n && n.parentNode) n.parentNode.removeChild(n);
    }
  }
}

// dt = milliseconds (‡∏à‡∏≤‡∏Å main loop)
export function update(dt){
  if(!alive) return;
  spawnT += dt;
  // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏π‡∏ì‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏ö lag
  if(spawnT >= rate){
    // ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    spawnT = Math.max(0, spawnT - rate);
    // burst ‡πÄ‡∏•‡πá‡∏Å ‡πÜ
    const count = (Math.random() < 0.15) ? 2 : 1;
    for(let i=0;i<count;i++){
      const isGood = Math.random() < 0.7;
      if(Math.random() < 0.12){
        makeItem('üåü', true);
      }else{
        makeItem(isGood ? GOOD[rng(0,GOOD.length-1)] : JUNK[rng(0,JUNK.length-1)], isGood);
      }
    }
  }
}

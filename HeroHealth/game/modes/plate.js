// === /webxr-health-mobile/HeroHealth/game/modes/plate.js ===
// Plate mode: ‡∏™‡∏∏‡πà‡∏°‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤, ‡∏à‡∏≤‡∏ô‡∏ó‡∏≠‡∏á, Daily Focus, Dynamic Difficulty, HUD, FX, Coach, Missions, Progress

import { Progress } from '/webxr-health-mobile/HeroHealth/game/core/progression.js';

// -------- Config / Data --------
const GROUPS = {
  grains:   { key:'grains',   th:'‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä',    en:'Grains',    color:'#f4c430', icons:['üçö','üçû','ü•ñ','ü•ê','ü•Ø','ü•®','ü´ì','üçô','üçú','üçù'] },
  veggies:  { key:'veggies',  th:'‡∏ú‡∏±‡∏Å',       en:'Vegetables',color:'#5cb85c', icons:['ü•¶','ü•¨','ü•í','üåΩ','ü´ë','üçÖ','ü•ï','üßÑ','üßÖ','üçÜ'] },
  fruits:   { key:'fruits',   th:'‡∏ú‡∏•‡πÑ‡∏°‡πâ',     en:'Fruits',    color:'#ff8a3d', icons:['üçé','üçå','üçì','üçç','üçä','üçá','üçë','üçâ','ü•ù','üçê'] },
  protein:  { key:'protein',  th:'‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô',    en:'Protein',   color:'#e74c3c', icons:['üçó','ü•©','üçñ','üç§','üç≥','üßÜ','ü´ò','üßà','ü•ì','üßÄ'] },
  dairy:    { key:'dairy',    th:'‡∏ô‡∏°/‡∏ô‡∏°‡∏ñ‡∏±‡πà‡∏ß', en:'Dairy',     color:'#4fc3f7', icons:['ü•õ','üßÄ','üç¶','üç®','ü•û','üßá','üçÆ','ü•Ø','üßà','üçß'] },
};
const ORDER = ['grains','veggies','fruits','protein','dairy'];

// difficulty base quotas (will be jittered)
const BASE_QUOTA = {
  Easy:   { grains:2, veggies:3, fruits:2, protein:2, dairy:1 },
  Normal: { grains:2, veggies:3, fruits:2, protein:2, dairy:2 },
  Hard:   { grains:3, veggies:3, fruits:3, protein:3, dairy:2 },
};

// visual FX helpers (use CSS classes already in project)
function popGlow(x,y,hex='#ffd54a'){
  const el = document.createElement('div');
  el.style.cssText = `
    position:fixed;left:${x}px;top:${y}px;transform:translate(-50%,-50%);
    width:70px;height:70px;border-radius:50%;
    background:${hex};filter:blur(14px) brightness(1.1);
    mix-blend-mode:screen;opacity:.85;pointer-events:none;z-index:120;
    animation:plateGlow .45s ease-out forwards`;
  document.body.appendChild(el);
  setTimeout(()=>{ try{ el.remove(); }catch{} }, 460);
}
(function ensureKF(){
  if (document.getElementById('plateKF')) return;
  const st=document.createElement('style'); st.id='plateKF';
  st.textContent = `
  @keyframes plateGlow{from{transform:translate(-50%,-50%) scale(.7);opacity:0}
                        70%{opacity:.9}
                        to{transform:translate(-50%,-50%) scale(1.2);opacity:0}}
  `;
  document.head.appendChild(st);
})();

// -------- State (internal to this mode) --------
let ctx = null; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏ô state.ctx ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug ‡∏à‡∏≤‡∏Å main

// -------- Helpers --------
function cloneQuota(q){
  return { grains:q.grains|0, veggies:q.veggies|0, fruits:q.fruits|0, protein:q.protein|0, dairy:q.dairy|0 };
}
function sumQuota(q){ return ORDER.reduce((s,k)=>s+(q[k]||0),0); }
function isStageDone(q,c){ return ORDER.every(k => (c[k]||0) >= (q[k]||0)); }

function jitterQuota(base, rng = 1){
  const q = cloneQuota(base);
  // ‡∏™‡∏∏‡πà‡∏° ¬±1 ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•
  ORDER.forEach(k=>{
    if (q[k]===0) return;
    const d = (Math.random()<0.5? -1: +1);
    q[k] = Math.max(0, q[k] + (Math.random()<0.5?0:d));
  });
  // ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏ß‡∏°‡∏ï‡πâ‡∏≠‡∏á >= 6
  if (sumQuota(q) < 6){
    const pick = ORDER[(Math.random()*ORDER.length)|0];
    q[pick] += 1;
  }
  return q;
}

function pickDailyFocus(){
  // sync ‡∏Å‡∏±‡∏ö Progress.genDaily() ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏≠‡∏á
  try{
    const d = Progress.genDaily?.();
    const keys = ORDER;
    if (d?.missions?.some(m=>m.kind==='acc' || m.id==='accuracy80')){
      // ‡∏ß‡∏±‡∏ô‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô -> ‡πÇ‡∏ü‡∏Å‡∏±‡∏™ 'veggies' ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏±‡∏î
      return 'veggies';
    }
    return keys[(Math.random()*keys.length)|0];
  }catch{
    return ORDER[(Math.random()*ORDER.length)|0];
  }
}

function updateHUD(){
  const host = document.getElementById('plateTracker');
  const pills = document.getElementById('platePills');
  if (!host || !pills || !ctx) return;
  host.style.display = 'block';

  const rows = ORDER.map(k=>{
    const g = GROUPS[k]; const need = ctx.quota[k]||0; const have = ctx.count[k]||0;
    const done = have>=need;
    const color = g.color;
    const barPct = need>0? Math.min(100, have/need*100) : 100;
    return `
      <div class="pp-row" style="display:flex;align-items:center;gap:6px;margin:2px 0">
        <span style="font-size:18px">${g.icons[0]}</span>
        <span style="min-width:78px;font-weight:800">${g.th}</span>
        <span style="font-variant-numeric:tabular-nums">${have}/${need}</span>
        <span class="pp-bar" style="flex:1;height:8px;background:#0004;border-radius:99px;overflow:hidden">
          <i style="display:block;height:100%;width:${barPct}%;background:${color};opacity:${done?1:.85}"></i>
        </span>
      </div>`;
  }).join('');
  pills.innerHTML = rows;
  const tgt = document.getElementById('t_quota'); if (tgt) tgt.textContent = `‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ (Stage ${ctx.stage})`;
}

function coachSay(coach, txtTH, txtEN){
  try{
    if (!coach?.say) return;
    const lang = (localStorage.getItem('hha_lang')||'TH');
    coach.say(lang==='EN'?txtEN:txtTH);
  }catch{}
}

// Dynamic difficulty: ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡∏™‡πÄ‡∏ï‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
function adaptNextQuota(prevAcc){
  const base = BASE_QUOTA[ctx.difficulty] || BASE_QUOTA.Normal;
  let q = jitterQuota(base);
  if (prevAcc>=0.85){
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° +1 (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏Å‡∏•‡∏∏‡πà‡∏°)
    const k = ORDER[(Math.random()*ORDER.length)|0];
    q[k] += 1;
  }else if (prevAcc<0.60){
    // ‡∏•‡∏î‡∏£‡∏ß‡∏°‡∏•‡∏á -1 ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡πÑ‡∏î‡πâ
    const keys = ORDER.filter(k=>q[k]>0);
    if (keys.length){
      const k = keys[(Math.random()*keys.length)|0];
      q[k] = Math.max(0, q[k]-1);
    }
  }
  return q;
}

function beginStage(state, coach){
  const base = BASE_QUOTA[state.difficulty] || BASE_QUOTA.Normal;
  // ‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô + ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏™‡πÄ‡∏ï‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  const q = ctx.stage===1 ? jitterQuota(base) : adaptNextQuota(ctx.prevAcc||0.75);

  // Daily Focus
  if (!ctx.dailyFocus) ctx.dailyFocus = pickDailyFocus();
  // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô +1 ‡πÅ‡∏•‡∏∞‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  q[ctx.dailyFocus] = (q[ctx.dailyFocus]||0) + 1;

  // Golden Plate: ‡∏ñ‡πâ‡∏≤‡∏™‡πÄ‡∏ï‡∏à‡∏Å‡πà‡∏≠‡∏ô‡πÜ ‡πÑ‡∏°‡πà‡∏°‡∏µ miss ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á >= 3
  ctx.goldenPlate = (ctx.consecCleanStages>=3);
  ctx.consecCleanStages = Math.min(3, ctx.consecCleanStages); // clamp
  ctx.quota = q;
  ctx.count = { grains:0, veggies:0, fruits:0, protein:0, dairy:0 };
  ctx.stageStartHits = ctx.totalHits;
  ctx.stageBad = 0;

  updateHUD();
  coachSay(coach,
    `‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${ctx.stage}! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ô‡πâ‡∏ô ${GROUPS[ctx.dailyFocus].th}`,
    `Plate ${ctx.stage}! Daily focus: ${GROUPS[ctx.dailyFocus].en}`
  );
}

function endStage(state, coach){
  // accuracy stage
  const hits = Math.max(1, (ctx.totalHits - ctx.stageStartHits));
  const justGood = Math.max(0, ctx.stageGood - (ctx.prevStageGood||0));
  const justPerfect = Math.max(0, ctx.stagePerfect - (ctx.prevStagePerfect||0));
  const justBad = Math.max(0, ctx.stageBad);
  const acc = Math.max(0, Math.min(1, (justGood + justPerfect) / (justGood + justPerfect + justBad || 1)));
  ctx.prevAcc = acc;

  if (ctx.stageBad===0) ctx.consecCleanStages++; else ctx.consecCleanStages = 0;

  // ‡πÅ‡∏à‡πâ‡∏á Progress
  try{ Progress.event('plate_complete', { stage: ctx.stage, acc }); }catch{}

  // ‡πÇ‡∏Ñ‡πâ‡∏ä & ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå
  coachSay(coach,
    ctx.goldenPlate ? '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏à‡∏≤‡∏ô‡∏ó‡∏≠‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!' : '‡∏à‡∏≤‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!',
    ctx.goldenPlate ? 'Amazing! Golden plate!' : 'Plate complete!'
  );

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πÄ‡∏ï‡∏à‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  ctx.stage++;
  ctx.goldenPlate = false;
  ctx.prevStageGood = ctx.stageGood;
  ctx.prevStagePerfect = ctx.stagePerfect;
  beginStage(state, coach);
}

function biasPickNeeded(){
  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà "‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î" ‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
  const weights = [];
  for (const k of ORDER){
    const need = ctx.quota[k]||0, have = ctx.count[k]||0;
    const deficit = Math.max(0, need - have);
    const w = deficit>0 ? (2 + deficit) : 1; // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 3.. ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ decoy
    weights.push({k, w});
  }
  // roulette wheel
  const sum = weights.reduce((s,o)=>s+o.w,0);
  let r = Math.random()*sum;
  for (const o of weights){ r-=o.w; if (r<=0) return o.k; }
  return weights[0].k;
}

// -------- Public API (used by main.js) --------
export function init(state, hud, diff){
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ context
  ctx = state.ctx.plate = {
    difficulty: state.difficulty,
    stage: 1,
    quota: cloneQuota(BASE_QUOTA[state.difficulty] || BASE_QUOTA.Normal),
    count: { grains:0, veggies:0, fruits:0, protein:0, dairy:0 },
    dailyFocus: null,
    goldenPlate: false,
    stageGood: 0, stagePerfect: 0, stageBad: 0,
    prevStageGood: 0, prevStagePerfect: 0,
    prevAcc: 0.75, consecCleanStages: 0,
    totalHits: 0,
    bias: 0.7,          // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£" ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
    scoreMul: 1.0,      // global multiplier
    lifeBase: diff?.life || 3000
  };
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÄ‡∏ï‡∏à‡πÅ‡∏£‡∏Å
  beginStage(state, hud?.coach || null);
  // ‡πÅ‡∏™‡∏î‡∏á HUD plate
  const wrap = document.getElementById('plateTracker'); if (wrap) wrap.style.display='block';
  updateHUD();
}

export function cleanup(state){
  const wrap = document.getElementById('plateTracker'); if (wrap) wrap.style.display='none';
  state.ctx.plate = null;
  ctx = null;
}

export function tick(state){
  // ‡πÑ‡∏°‡πà‡∏°‡∏µ timeline ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏ô plate (‡πÉ‡∏ä‡πâ main tick ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
  // ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏ß‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï UI ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  if (!ctx) return;
}

// ‡∏™‡∏∏‡πà‡∏° meta ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö spawn ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡∏¥‡πâ‡∏ô
export function pickMeta(diff, state){
  if (!ctx) return { char:'üçΩÔ∏è', life: diff.life };

  // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏≠‡∏≠‡∏Å "‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£" ‡∏´‡∏£‡∏∑‡∏≠ "decoy"
  const needFirst = Math.random() < ctx.bias;
  let gkey;
  if (needFirst){
    gkey = biasPickNeeded();
  }else{
    // decoy: ‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏π‡πà
    gkey = ORDER[(Math.random()*ORDER.length)|0];
  }
  const g = GROUPS[gkey];
  const char = g.icons[(Math.random()*g.icons.length)|0];

  // item life: ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° golden / difficulty ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
  let life = Math.max(900, Math.round((ctx.lifeBase||3000) * (needFirst? 1.0 : 0.9)));

  // golden effect per item ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‚Äú‡∏à‡∏≤‡∏ô‡∏ó‡∏≠‡∏á‚Äù ‚Üí ‡πÅ‡∏Ñ‡πà visual
  const golden = !!ctx.goldenPlate && needFirst;

  return {
    id: `${gkey}_${Date.now()}_${(Math.random()*9999)|0}`,
    char,
    groupId: gkey,
    good: true,       // ‡πÉ‡∏´‡πâ main ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô item ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏¢‡∏∞)
    golden,
    life
  };
}

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
// return one of: 'perfect' | 'good' | 'ok' | 'bad' | 'power'
export function onHit(meta, { score, sfx, coach }, state, hud){
  if (!ctx) return 'ok';
  ctx.totalHits++;

  const { groupId, golden } = meta;
  const need = ctx.quota[groupId]||0;
  const have = ctx.count[groupId]||0;

  const r = (el)=>{ // center for FX
    const b = el.getBoundingClientRect?.(); if (!b) return {x:innerWidth/2,y:innerHeight/2};
    return { x: b.left+b.width/2, y: b.top+b.height/2 };
  };

  // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤"
  if (have < need){
    ctx.count[groupId] = have + 1;

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô + ‡πÇ‡∏ö‡∏ô‡∏±‡∏™ focus + ‡∏à‡∏≤‡∏ô‡∏ó‡∏≠‡∏á
    let base = 10;
    if (groupId === ctx.dailyFocus) base = Math.round(base * 1.2);
    if (golden || ctx.goldenPlate) base = Math.round(base * 1.5);

    try{ sfx.play?.('sfx-good'); }catch{}
    ctx.stageGood++;

    // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏¥‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡πÉ‡∏´‡πâ "‡∏Ñ‡∏£‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢" ‚Üí perfect + ‡∏õ‡∏¥‡∏î‡∏à‡∏≤‡∏ô
    if (isStageDone(ctx.quota, ctx.count)){
      ctx.stagePerfect++;
      // ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ main ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö/‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (return 'perfect')
      // ‡πÅ‡∏à‡πâ‡∏á Progress ‡∏ß‡πà‡∏≤‡∏à‡∏≤‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
      try{ Progress.event('plate_complete', { stage: ctx.stage }); }catch{}
      // popup FX
      const {x,y} = r(meta._el||document.body);
      popGlow(x,y,'#ffe082');

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πÄ‡∏ï‡∏à‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      endStage(state, coach);
      updateHUD();
      return 'perfect';
    }

    updateHUD();
    return 'good';
  }

  // ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ ‚Üí bad
  ctx.stageBad++;
  try{ sfx.play?.('sfx-bad'); }catch{}
  coachSay(coach, '‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞', 'Quota filled for this group');
  return 'bad';
}

// (optional) durations for powerbar (‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
export function getPowerDurations(){
  // plate ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏ñ‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á groups ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ UI reuse
  return { x2: 6, freeze: 3, magnet: 2 };
}

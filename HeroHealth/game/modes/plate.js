// === Hero Health Academy ‚Äî game/modes/plate.js ===
// ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î: ‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å 5 ‡∏´‡∏°‡∏ß‡∏î (20 ‡∏ä‡∏¥‡πâ‡∏ô/‡∏´‡∏°‡∏ß‡∏î)
// - "good" = ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
// - ‡∏Ñ‡∏£‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î => ‡πÅ‡∏à‡πâ‡∏á Progress 'plate_complete' ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà
// - ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≠‡∏á (golden) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏• 'perfect' ‡πÑ‡∏î‡πâ

import { Progress } from '/webxr-health-mobile/HeroHealth/game/core/progression.js';

const RNG = () => Math.random();

const GROUPS = {
  veggies: {
    nameTH: '‡∏ú‡∏±‡∏Å',
    list: [
      'ü•¶','ü•¨','ü•ï','üßÖ','üßÑ','üå∂Ô∏è','üçÑ','üåΩ','ü•í','ü´ë',
      'ü•ó','üçÜ','ü•î','ü´õ','ü•í','ü•ï','üå±','ü•¨','ü•¶','üçÑ'
    ]
  },
  fruits: {
    nameTH: '‡∏ú‡∏•‡πÑ‡∏°‡πâ',
    list: [
      'üçé','üçì','üçá','üçâ','üçå','üçç','üçë','üçä','üçê','ü•ù',
      'üçí','üçã','ü´ê','ü•≠','üçà','üçè','üçì','üçá','üçä','üçç'
    ]
  },
  grains: {
    nameTH: '‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä/‡πÅ‡∏õ‡πâ‡∏á',
    list: [
      'üçû','ü•ñ','ü•Ø','ü•®','üçö','üçô','üçò','üçú','üçù','ü•ê',
      'ü´ì','üç©','ü•û','üßá','üçî','üåØ','üåÆ','üçï','üçü','üçö'
    ]
  },
  protein: {
    nameTH: '‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô',
    list: [
      'üçó','üçñ','ü•©','üç£','üç§','üßÜ','ü•ö','üßà','ü•ì','üçõ',
      'üç¢','ü•ô','üçú','üç±','üç§','üçó','ü•©','üç£','ü•ö','üçõ'
    ]
  },
  dairy: {
    nameTH: '‡∏ô‡∏°/‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ô‡∏°',
    list: [
      'üßÄ','ü•õ','üç¶','üç®','üçß','üçÆ','üç∞','ü•û','üßà','ü•õ',
      'üßÄ','ü•õ','üç¶','üç®','üçß','üçÆ','üßÄ','ü•õ','üç¶','üç®'
    ]
  }
};

// ‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö (‡∏Ñ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≤‡∏ô)
const BASE_QUOTA = {
  Easy:   { veggies:3, fruits:2, grains:3, protein:2, dairy:1 },
  Normal: { veggies:3, fruits:2, grains:3, protein:2, dairy:1 },
  Hard:   { veggies:4, fruits:2, grains:3, protein:3, dairy:1 }
};

const GOLDEN_CHANCE = 1/12;   // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≠‡∏á

// ctx ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î plate ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô state.ctx.plate
function ensureCtx(state, diff){
  if (!state.ctx.plate){
    state.ctx.plate = {
      quota: { ...BASE_QUOTA[state.difficulty] },
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mini-quests ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î plate (‡∏™‡∏∏‡πà‡∏° 3 ‡∏à‡∏≤‡∏Å 5 ‚Äî ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î)
      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å progression.beginRun() ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      miniPool: [
        { id:'mq_veg3',    th:'‡πÉ‡∏™‡πà‡∏ú‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 3 ‡∏™‡πà‡∏ß‡∏ô',  en:'Add 3 veggie portions',     need:3,   type:'add_group', group:'veggies', prog:0, done:false },
        { id:'mq_combo8',  th:'‡∏ó‡∏≥‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö x8',           en:'Reach combo x8',            need:8,   type:'reach_combo', prog:0, done:false },
        { id:'mq_perfect3',th:'Perfect 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',       en:'3 Perfects',                need:3,   type:'count_perfect', prog:0, done:false },
        { id:'mq_time45',  th:'‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏≠‡∏î 45 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',     en:'Survive 45s',               need:45,  type:'survive_time', prog:0, done:false },
        { id:'mq_any10',   th:'‡∏ß‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å 10 ‡∏ä‡∏¥‡πâ‡∏ô',     en:'10 correct hits',           need:10,  type:'count_good', prog:0, done:false },
      ],
      mini: [],
      lastTickSec: 0
    };
    // ‡∏™‡∏∏‡πà‡∏° 3 ‡∏à‡∏≤‡∏Å 5
    const arr = state.ctx.plate.miniPool.slice().sort(()=>Math.random()-0.5).slice(0,3);
    state.ctx.plate.mini = arr;
  }
  return state.ctx.plate;
}

function isAllZero(quota){
  for (const k of Object.keys(quota)){ if ((quota[k]|0) > 0) return false; }
  return true;
}

function renderQuotaUI(state){
  const wrap = document.getElementById('plateTracker');
  const pills = document.getElementById('platePills');
  if (!wrap || !pills) return;
  wrap.style.display = 'block';
  const q = state.ctx.plate.quota;
  const names = { veggies:'ü•¶', fruits:'üçé', grains:'üçû', protein:'üçó', dairy:'ü•õ' };
  pills.innerHTML = Object.keys(names).map(k=>{
    const left = q[k]|0;
    const face = names[k];
    const span = `<span class="pill" data-k="${k}" title="${GROUPS[k].nameTH}">${face}√ó${left}</span>`;
    return span;
  }).join(' ');
}

function resetQuota(state){
  state.ctx.plate.quota = { ...BASE_QUOTA[state.difficulty] };
  renderQuotaUI(state);
}

// ====== Public API ======

export function init(state, hud, diff){
  ensureCtx(state, diff);
  renderQuotaUI(state);
  // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ô‡∏≥‡πÇ‡∏´‡∏°‡∏î
  const targetWrap = document.getElementById('targetWrap');
  if (targetWrap) { targetWrap.style.display='none'; }
}

export function cleanup(state, hud){
  const wrap = document.getElementById('plateTracker');
  if (wrap) wrap.style.display='none';
}

export function tick(state, systems, hud){
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï mini-quest ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ (survive_time)
  const secNow = Math.floor((performance?.now?.()||Date.now())/1000);
  const ctx = state.ctx.plate;
  if (!ctx) return;
  if (ctx.lastTickSec !== secNow){
    ctx.lastTickSec = secNow;
    for (const m of ctx.mini){
      if (m.done) continue;
      if (m.type==='survive_time'){
        m.prog = (m.prog||0) + 1;
        if (m.prog >= m.need){ m.done = true; Progress.addXP(40); }
      }
    }
  }
}

export function pickMeta(diff, state){
  const ctx = ensureCtx(state, diff);
  const q = ctx.quota;

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞ spawn:
  // 65% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£" (quota > 0), 35% ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
  const needKeys = Object.keys(q).filter(k=> (q[k]|0) > 0 );
  const allKeys  = Object.keys(GROUPS);

  let key;
  if (needKeys.length && RNG() < 0.65){
    key = needKeys[(Math.random()*needKeys.length)|0];
  }else{
    key = allKeys[(Math.random()*allKeys.length)|0];
  }

  const pool = GROUPS[key].list;
  const char = pool[(Math.random()*pool.length)|0];

  const golden = RNG() < GOLDEN_CHANCE;
  const meta = {
    id: `${key}_${Math.random().toString(36).slice(2,7)}`,
    label: GROUPS[key].nameTH,
    char,
    groupId: key,
    good: (q[key]|0) > 0,         // ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
    golden,
    life: diff.life || 3000
  };
  return meta;
}

export function onHit(meta, sys, state, hud){
  // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ => ‡∏•‡∏î‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤
  const ctx = state.ctx.plate;
  if (!ctx) return 'ok';

  let result = 'ok';
  if (meta.good){
    // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ perfect ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    const perfect = meta.golden || (Math.random() < 0.2);
    ctx.quota[meta.groupId] = Math.max(0, (ctx.quota[meta.groupId]|0) - 1);
    renderQuotaUI(state);
    result = perfect ? 'perfect' : 'good';

    // ‡∏ô‡∏±‡∏ö mini-quests ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î
    for (const m of ctx.mini){
      if (m.done) continue;
      if (m.type==='add_group' && m.group===meta.groupId){
        m.prog = (m.prog||0) + 1;
        if (m.prog >= m.need){ m.done = true; Progress.addXP(40); }
      }
      if (m.type==='count_good'){
        m.prog = (m.prog||0) + 1;
        if (m.prog >= m.need){ m.done = true; Progress.addXP(40); }
      }
      if (m.type==='count_perfect' && perfect){
        m.prog = (m.prog||0) + 1;
        if (m.prog >= m.need){ m.done = true; Progress.addXP(40); }
      }
      if (m.type==='reach_combo'){
        // ‡πÇ‡∏õ‡∏£‡∏¢‡πÉ‡∏´‡πâ progression ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï combo ‡∏î‡πâ‡∏ß‡∏¢ (main.js ‡∏™‡πà‡∏á comboNow ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
        // ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å progression ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      }
    }

    // ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï + ‡πÅ‡∏à‡πâ‡∏á progression
    if (isAllZero(ctx.quota)){
      Progress.event('plate_complete', {});
      // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
      try{ sys.score.add?.(50); }catch{}
      resetQuota(state);
    }
  }else{
    // ‡∏Å‡∏î‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    result = meta.golden ? 'ok' : 'bad';
  }

  return result;
}

// (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) Utility ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤ Help ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏≠‡∏≤‡∏¢‡∏∏‡∏û‡∏•‡∏±‡∏á ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î plate ‡πÑ‡∏°‡πà‡∏°‡∏µ powers
export function getPowerDurations(){ return {}; }

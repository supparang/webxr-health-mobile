// === Hero Health Academy ‚Äî modes/plate.js ===
// ‡πÇ‡∏´‡∏°‡∏î: ‡∏à‡∏±‡∏î‡∏à‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (Healthy Plate)
// ‡∏Å‡∏•‡πÑ‡∏Å: ‡πÅ‡∏ï‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á "‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤" ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏π‡πà ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏π‡πà = ‡∏à‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à -> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà

// ---------- Config ----------
const GROUPS = {
  veggies: { th:'‡∏ú‡∏±‡∏Å',   en:'Veggies', icon:'ü•¶', pool:['ü•¶','ü•ï','ü•¨','üåΩ','üçÖ','üßÖ','üçÜ','ü•í'] },
  fruits:  { th:'‡∏ú‡∏•‡πÑ‡∏°‡πâ', en:'Fruits',  icon:'üçé', pool:['üçé','üçå','üçá','üçâ','üçç','üçì','üçí','üçä','ü•≠'] },
  grains:  { th:'‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä',en:'Grains',  icon:'üçö', pool:['üçö','üçû','ü•ñ','ü•ê','ü•Ø','üçô','üçò','ü•û','ü´ì'] },
  protein: { th:'‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô',en:'Protein', icon:'üçó', pool:['üçó','ü•ö','ü•©','üêü','üç§','üßÜ','ü•ú','ü´ò','ü•ì'] },
  dairy:   { th:'‡∏ô‡∏°',    en:'Dairy',   icon:'ü•õ', pool:['ü•õ','üßÄ','üç¶','üç®','üç∂'] },
};

const ORDER = ['veggies','fruits','grains','protein','dairy'];

const QUOTAS = {
  Easy:   { veggies:3, fruits:2, grains:2, protein:2, dairy:1 },
  Normal: { veggies:4, fruits:2, grains:2, protein:2, dairy:1 },
  Hard:   { veggies:4, fruits:3, grains:3, protein:3, dairy:1 },
};

// ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î "‡∏ó‡∏≠‡∏á" (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ö‡∏ß‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö/fever ‡πÉ‡∏ô main)
const GOLDEN_CHANCE = 0.06;

// ---------- Utils ----------
const $ = (s)=>document.querySelector(s);
const clone = (o)=>JSON.parse(JSON.stringify(o));
const randOf = (arr)=>arr[(Math.random()*arr.length)|0];

function needLeft(need, have, g){
  return Math.max(0, (need[g]||0) - (have[g]||0));
}
function allDone(need, have){
  for (const k of ORDER){
    if (needLeft(need, have, k) > 0) return false;
  }
  return true;
}

function weightPickGroup(need, have){
  // ‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà "‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î" ‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß
  let totalW = 0;
  const weights = ORDER.map(k=>{
    const left = needLeft(need, have, k);
    const w = 1 + (left>0 ? left*2 : 0); // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î -> +‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 2 ‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î
    totalW += w;
    return {k,w};
  });
  let r = Math.random()*totalW;
  for (const it of weights){
    r -= it.w;
    if (r<=0) return it.k;
  }
  return ORDER[ORDER.length-1];
}

// ---------- HUD render ----------
function renderPlateHUD(ctx, lang='TH'){
  const wrap = $('#plateTracker'); if (!wrap) return;
  const pills = $('#platePills'); if (!pills) return;

  wrap.style.display = 'block';
  $('#targetWrap')?.style && ($('#targetWrap').style.display='none');
  $('#hydroWrap')?.style && ($('#hydroWrap').style.display='none');

  const L = (lang==='EN')?'en':'th';
  const out = ORDER.map(k=>{
    const need = ctx.need[k]||0;
    const have = ctx.have[k]||0;
    const left = Math.max(0, need-have);
    const g = GROUPS[k];
    const done = left===0;
    const dots = '‚óè'.repeat(Math.min(have,need)) + '‚óã'.repeat(left);
    return `<span class="pill${done?' done':''}" style="display:inline-flex;align-items:center;gap:6px;margin:2px 6px;padding:4px 8px;border-radius:999px;background:${done?'#1b5e20':'#203040'};border:1px solid #0004">
      <b>${g.icon}</b><span style="font-weight:700">${g[L]}</span>
      <span style="opacity:.85">${dots||'‚Äî'}</span>
    </span>`;
  }).join('');
  pills.innerHTML = out;
}

// ---------- State helpers ----------
function newPlateState(difficulty){
  const need = clone(QUOTAS[difficulty] || QUOTAS.Normal);
  const have = { veggies:0, fruits:0, grains:0, protein:0, dairy:0 };
  return { need, have, stage:1 };
}

function nextPlate(ctx){
  ctx.stage += 1;
  // ‡∏à‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡πÄ‡∏î‡∏¥‡∏° (‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ scaling)
  ctx.have = { veggies:0, fruits:0, grains:0, protein:0, dairy:0 };
}

// ---------- Exports ----------
export function init(state, hud, diff){
  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° context ‡∏Ç‡∏≠‡∏á‡πÇ‡∏´‡∏°‡∏î
  state.ctx.plate = newPlateState(state.difficulty);
  renderPlateHUD(state.ctx.plate, state.lang);

  // ‡πÇ‡∏ä‡∏ß‡πå‡πÅ‡∏ñ‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  const tracker = $('#plateTracker'); if (tracker) tracker.style.display = 'block';
}

export function cleanup(state){
  // ‡∏ã‡πà‡∏≠‡∏ô HUD ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î plate
  const tracker = $('#plateTracker'); if (tracker) tracker.style.display = 'none';
  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡πá‡∏Å‡∏ã‡πå
  if (state?.ctx) state.ctx.plate = null;
}

export function tick(state, sys, hud){
  // ‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©
  // (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï: ‡πÉ‡∏™‡πà hint/coach ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)
}

export function pickMeta(diff, state){
  const ctx = state.ctx.plate;
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏Ñ‡∏£‡∏ö‡∏à‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï (edge case) ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä HUD ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
  if (!ctx) return { char:'‚ùì', id:'noop', life: diff.life };

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà "‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î"
  const gKey = weightPickGroup(ctx.need, ctx.have);
  const g = GROUPS[gKey];
  const char = randOf(g.pool);
  const golden = (Math.random() < GOLDEN_CHANCE);

  return {
    id: gKey + ':' + char,
    char,
    groupId: gKey,
    good: true,          // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ "‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏à‡∏≤‡∏ô" (‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Å‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏ï‡∏≠‡∏ô‡∏Å‡∏î)
    golden,
    life: diff.life,     // ‡πÉ‡∏ä‡πâ TTL ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏à‡∏≤‡∏Å main
    aria: `${g.th} ${char}`
  };
}

export function onHit(meta, sys, state /*, hud*/){
  const ctx = state.ctx.plate;
  if (!ctx) return 'ok';

  const gKey = meta.groupId;
  const need = ctx.need[gKey]||0;
  const have = ctx.have[gKey]||0;

  // 1) ‡∏ñ‡πâ‡∏≤ "‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£" ‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà -> ‡∏ô‡∏±‡∏ö‡∏ä‡∏¥‡πâ‡∏ô + ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HUD
  if (have < need){
    ctx.have[gKey] = have + 1;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á Progress ‡∏ú‡πà‡∏≤‡∏ô event hit (‡∏à‡∏∞‡∏ô‡∏±‡∏ö groupCount ‡∏î‡πâ‡∏ß‡∏¢)
    // meta.good=true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
    // (main ‡∏à‡∏∞‡∏™‡πà‡∏á Progress.event('hit', ...) ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
    renderPlateHUD(ctx, state.lang);

    // ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏ö‡∏´‡∏°‡∏π‡πà (last piece of this group) ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const groupDone = (ctx.have[gKey] >= ctx.need[gKey]);
    const plateDone = allDone(ctx.need, ctx.have);

    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏ô -> ‡∏™‡πà‡∏á event ‡πÉ‡∏´‡πâ Progress + ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏ä/‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    if (plateDone){
      try{ sys?.coach?.say?.('‡∏à‡∏≤‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!'); }catch{}
      try{ sys?.sfx?.play?.('sfx-perfect'); }catch{}
      // freeze ‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•
      state.freezeUntil = (performance?.now?.()||Date.now()) + 600;
      // ‡πÅ‡∏à‡πâ‡∏á Progress (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô plate_complete)
      try{ import('/webxr-health-mobile/HeroHealth/game/core/progression.js').then(({Progress})=>{
        Progress?.event?.('plate_complete', {stage:ctx.stage});
      }).catch(()=>{}); }catch{}
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
      nextPlate(ctx);
      renderPlateHUD(ctx, state.lang);
      return 'perfect';
    }

    // ‡∏à‡∏ö‡∏´‡∏°‡∏π‡πà -> ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏ö‡∏≤ ‡πÜ
    if (groupDone){
      try{ sys?.sfx?.play?.('sfx-good'); }catch{}
      return 'perfect';
    }

    // ‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    return 'good';
  }

  // 2) ‡∏ñ‡πâ‡∏≤ "‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß" -> ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤
  try{ sys?.sfx?.play?.('sfx-bad'); }catch{}
  return 'bad';
}

// === Hero Health Academy ‚Äî game/modes/plate.js (easy mini-quests, 20 items/group) ===
import { Progress } from '/webxr-health-mobile/HeroHealth/game/core/progression.js';

// ---------- Item pools (20 each) ----------
const VEGGIES = [
  'ü•¶','ü•ï','ü•í','üåΩ','üçÖ','üçÜ','ü•ó','ü•¨','ü•î','üßÖ',
  'üßÑ','üçÑ','üå∂Ô∏è','ü•í','ü•ï','ü•¶','ü•¨','üçÖ','ü•î','üçÑ'
];
const FRUITS = [
  'üçé','üçå','üçì','üçá','üçâ','üçç','üçë','üçä','üçê','ü•≠',
  'üçí','üçã','ü•ù','üçà','ü´ê','üçé','üçå','üçä','üçá','üçç'
];
const GRAINS = [
  'üçû','ü•ñ','ü•®','üçö','üçô','üçò','üçú','üçù','üçõ','üåØ',
  'üåÆ','ü•û','ü´ì','ü•™','ü•Ø','üçû','üçö','üçù','ü•ñ','ü•®'
];
const PROTEIN = [
  'üçó','üçñ','ü•©','üç≥','üêü','üç§','ü´ò','ü•ú','üßÜ','üå≠',
  'üç£','üç¢','ü•ì','üßÜ','üçó','üç≥','üêü','üç§','ü´ò','ü•©'
];
const DAIRY = [
  'ü•õ','üßÄ','üç®','üç¶','ü•õ','üßÄ','ü•õ','üßÄ','üçß','üç¶',
  'ü•õ','üßÄ','üç®','üç¶','ü•õ','üßÄ','ü•õ','üßÄ','üçß','üç¶'
];

const GROUPS = ['veggies','fruits','grains','protein','dairy'];
const POOLS  = { veggies:VEGGIES, fruits:FRUITS, grains:GRAINS, protein:PROTEIN, dairy:DAIRY };

// ---------- Helpers ----------
const rnd = (arr)=>arr[(Math.random()*arr.length)|0];
const clamp = (x,a,b)=>Math.max(a,Math.min(b,x));

function langName(lang){
  return {
    TH: {veggies:'‡∏ú‡∏±‡∏Å', fruits:'‡∏ú‡∏•‡πÑ‡∏°‡πâ', grains:'‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä', protein:'‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô', dairy:'‡∏ô‡∏°'},
    EN: {veggies:'Veggies', fruits:'Fruits', grains:'Grains', protein:'Protein', dairy:'Dairy'}
  }[lang||'TH'];
}

// ‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ~10‚Äì14 ‡∏ä‡∏¥‡πâ‡∏ô/‡∏à‡∏≤‡∏ô)
function makeQuotas(diffKey='Normal'){
  if (diffKey==='Easy')   return { veggies:4, fruits:3, grains:2, protein:2, dairy:1 }; // 12
  if (diffKey==='Hard')   return { veggies:6, fruits:4, grains:3, protein:3, dairy:1 }; // 17
  /* Normal */            return { veggies:5, fruits:3, grains:2, protein:2, dairy:1 }; // 13
}

// ‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏´‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î (‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
function pickTargetGroup(ctx){
  let best = null, bestNeed = -1;
  for (const g of GROUPS){
    const need = (ctx.need[g]||0) - (ctx.have[g]||0);
    if (need > bestNeed){ bestNeed = need; best = g; }
  }
  return bestNeed>0 ? best : null;
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HUD (#plateTracker)
function renderPlateHUD(state){
  const host = document.getElementById('platePills'); if (!host) return;
  const L = langName(state.lang);
  const pills = GROUPS.map(g=>{
    const have = state.ctx.have[g]||0;
    const need = state.ctx.need[g]||0;
    const done = have>=need && need>0;
    const barW = need>0 ? clamp((have/need)*100, 0, 100) : 0;
    return `<div class="pill ${done?'ok':''}">
      <b>${L[g]}</b>
      <span>${have}/${need}</span>
      <i style="width:${barW}%"></i>
    </div>`;
  }).join('');
  host.innerHTML = pills;
}

// ‡∏¢‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
function flashLine(msg){
  const line = document.getElementById('missionLine'); if (!line) return;
  line.textContent = msg;
  line.style.display = 'block';
  setTimeout(()=>{ line.style.display='none'; }, 900);
}

// ---------- Easy mini-quests (5 ‚Üí pick 3 per run) ----------
function applyEasyMiniQuests(lang='TH'){
  // ‡πÉ‡∏ä‡πâ‡∏ä‡∏ô‡∏¥‡∏î mission ‡∏ó‡∏µ‡πà Progress.event('hit', ‚Ä¶) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
  const pool = [
    { id:'pl_target8',  th:'‡∏ß‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏ß‡∏° 8 ‡∏ä‡∏¥‡πâ‡∏ô',     en:'Collect 8 target items',  need:8,  type:'count_target' },
    { id:'pl_veg2',     th:'‡πÉ‡∏™‡πà‡∏ú‡∏±‡∏Å 2 ‡∏™‡πà‡∏ß‡∏ô',             en:'Add 2 veggie portions',   need:2,  type:'count_group', group:'veggies' },
    { id:'pl_combo6',   th:'‡∏ó‡∏≥‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏ñ‡∏∂‡∏á x6',            en:'Reach combo x6',          need:6,  type:'reach_combo' },
    { id:'pl_perfect2', th:'Perfect 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',            en:'2 Perfects',              need:2,  type:'count_perfect' },
    { id:'pl_golden1',  th:'‡πÄ‡∏Å‡πá‡∏ö Golden 1 ‡∏ä‡∏¥‡πâ‡∏ô',         en:'Hit 1 Golden',            need:1,  type:'count_golden' },
  ];
  // ‡∏™‡∏∏‡πà‡∏° 3 ‡πÅ‡∏•‡∏∞‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÅ‡∏ó‡∏ô runCtx.missions ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î plate
  try{
    const rc = Progress.runCtx;
    if (!rc || rc.mode!=='plate') return;
    const shuffled = pool.slice().sort(()=>Math.random()-0.5).slice(0,3)
      .map(m=>({ ...m, label:(lang==='EN'?m.en:m.th), prog:0, done:false }));
    rc.missions = shuffled;
    // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ UI ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä (main.js renderMissions ‡∏ü‡∏±‡∏á 'run_start')
    Progress.emit('run_start', { mode:'plate', difficulty: rc.difficulty, missions: shuffled });
  }catch{}
}

// ---------- Public API required by main.js ----------
export function init(state, hud, diff){
  // ‡πÄ‡∏õ‡∏¥‡∏î HUD ‡πÄ‡∏û‡∏à‡πÄ‡∏û‡∏•‡∏ï
  const wrap = document.getElementById('plateTracker');
  if (wrap) wrap.style.display = 'block';
  const tgt = document.getElementById('targetWrap');
  if (tgt) tgt.style.display = 'none';

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö
  state.ctx = state.ctx || {};
  state.ctx.need = makeQuotas(state.difficulty||'Normal');
  state.ctx.have = { veggies:0, fruits:0, grains:0, protein:0, dairy:0 };
  state.ctx.target = pickTargetGroup(state.ctx);

  renderPlateHUD(state);

  // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ easy mini-quests ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î plate
  applyEasyMiniQuests(state.lang || 'TH');
}

export function cleanup(state){
  const wrap = document.getElementById('plateTracker');
  if (wrap) wrap.style.display = 'none';
}

// ‡∏™‡∏∏‡πà‡∏° meta ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ spawn 1 ‡∏ä‡∏¥‡πâ‡∏ô
export function pickMeta(diff, state){
  const ctx = state.ctx || {};
  const target = ctx.target || pickTargetGroup(ctx) || rnd(GROUPS);

  // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ 70% ‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™/‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
  const isTargetPick = Math.random() < 0.70;
  const group = isTargetPick ? target : rnd(GROUPS);

  const char = rnd(POOLS[group]);
  const golden = Math.random() < 0.08; // 8% golden ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏ß‡∏™ golden ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á

  return {
    id: `${group}_${Date.now().toString(36)}_${(Math.random()*999)|0}`,
    char,
    aria: group,
    label: group,
    groupId: group,
    good: group === target,           // ‡∏ô‡∏±‡∏ö ‚Äú‡∏ñ‡∏π‡∏Å‡∏´‡∏°‡∏ß‡∏î‚Äù ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    golden,
    life: diff?.life ?? 3000,
  };
}

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ï‡∏∞‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
export function onHit(meta, systems, state/*, hud*/){
  const { score, sfx } = systems;
  const ctx = state.ctx;

  // ‡πÅ‡∏ï‡∏∞‡∏ñ‡∏π‡∏Å ‚Äú‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‚Äù ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏≤‡∏á‡∏•‡∏á‡∏à‡∏≤‡∏ô
  if (meta.groupId === ctx.target){
    ctx.have[meta.groupId] = (ctx.have[meta.groupId]||0) + 1;

    // Golden = ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Perfect
    const perfect = !!meta.golden || Math.random() < 0.18;
    renderPlateHUD(state);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (isPlateComplete(ctx)){
      flashLine(state.lang==='EN' ? 'Plate Complete!' : '‡∏à‡∏±‡∏î‡∏à‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö!');
      // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡∏≠‡∏ô‡∏à‡∏ö‡∏à‡∏≤‡∏ô
      try{ score.add?.(40); }catch{}
      try{ sfx.play('sfx-perfect'); }catch{}
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ scale ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
      nextPlate(ctx, state.difficulty||'Normal');
      renderPlateHUD(state);
    }else{
      try{ sfx.play(perfect?'sfx-perfect':'sfx-good'); }catch{}
    }

    // ‡πÉ‡∏´‡πâ main.js ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏ï‡πà‡∏≠ ‡πÅ‡∏•‡∏∞ Progress.event('hit') ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:
    // - meta.good === true ‚Üí ‡∏ô‡∏±‡∏ö count_target
    // - meta.groupId === 'veggies' ‚Üí ‡∏ô‡∏±‡∏ö count_group: veggies
    // - meta.golden === true ‚Üí ‡∏ô‡∏±‡∏ö count_golden
    return perfect ? 'perfect' : 'good';
  }

  // ‡πÅ‡∏ï‡∏∞‡∏ú‡∏¥‡∏î‡∏´‡∏°‡∏ß‡∏î
  try{ sfx.play('sfx-bad'); }catch{}
  return 'bad';
}

export function tick(/*state, systems, hud*/){
  // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏•‡πÑ‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏ï‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
}

// ---------- Internals ----------
function isPlateComplete(ctx){
  for (const g of GROUPS){
    const need = ctx.need[g]||0;
    const have = ctx.have[g]||0;
    if (need>0 && have<need) return false;
  }
  return true;
}

function nextPlate(ctx, diffKey){
  // ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (easy-friendly)
  const base = makeQuotas(diffKey);
  const bump = { Easy:0, Normal:1, Hard:1 }[diffKey] ?? 1;
  ctx.need = {
    veggies: base.veggies + bump,
    fruits:  base.fruits  + (bump?1:0),
    grains:  base.grains,
    protein: base.protein,
    dairy:   base.dairy
  };
  ctx.have = { veggies:0, fruits:0, grains:0, protein:0, dairy:0 };
  ctx.target = pickTargetGroup(ctx);
}
import { add3DTilt, shatter3D } from '/webxr-health-mobile/HeroHealth/game/core/fx.js';

export const fx = {
  onSpawn(el/*, state*/){
    add3DTilt(el);
  },
  onHit(x, y/*, meta, state*/){
    shatter3D(x, y);
  }
};

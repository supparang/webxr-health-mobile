// === Hero Health Academy ‚Äî modes/hydration.js (hydration bar + rules + mini-quests ready) ===
export const name = 'hydration';

// ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô (‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤/‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô/‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏Å‡∏•‡∏≤‡∏á ‡πÜ)
const WATER = [
  { id:'water1', labelEN:'Water', labelTH:'‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤', icon:'üíß' },
  { id:'water2', labelEN:'Water', labelTH:'‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤', icon:'ü´ó' },
];
const SWEET = [
  { id:'soda',   labelEN:'Soda',   labelTH:'‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏î‡∏•‡∏°', icon:'ü•§' },
  { id:'juice',  labelEN:'Juice',  labelTH:'‡∏ô‡πâ‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏´‡∏ß‡∏≤‡∏ô', icon:'üßÉ' },
];
const NEUTRAL = [
  { id:'ice', labelEN:'Ice', labelTH:'‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á', icon:'üßä' },
];

const ST = {
  lang:'TH',
  level: 50,        // 0..100
  safeMin: 40,
  safeMax: 60,
  x2Until: 0,
  // HUD refs
  $wrap:null, $bar:null, $label:null
};

export function init(gameState, hud, diff){
  ST.lang = localStorage.getItem('hha_lang') || 'TH';
  ST.level = 50;
  ST.safeMin = 40;
  ST.safeMax = 60;

  ST.$wrap  = document.getElementById('hydroWrap');
  ST.$bar   = document.getElementById('hydroBar');
  ST.$label = document.getElementById('hydroLabel');

  if (ST.$wrap){ ST.$wrap.style.display = 'block'; }
  renderBar();
}
export function cleanup(){
  if (ST.$wrap) ST.$wrap.style.display = 'none';
}
export function tick(){ /* ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï passively ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å */ }

// ‡∏™‡∏∏‡πà‡∏°‡∏ä‡∏¥‡πâ‡∏ô: ‡πÄ‡∏ô‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡∏™‡∏ô‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á)
export function pickMeta(diff){
  const r = Math.random();
  const pool = r < 0.6 ? WATER : (r < 0.85 ? SWEET : NEUTRAL);
  const it = pool[(Math.random()*pool.length)|0];

  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö ‚Äú‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‚Äù ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏î (‡πÑ‡∏õ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏ô onHit)
  const golden = performance.now() < ST.x2Until;
  const mult = golden ? 2 : 1;

  const lifeBase = diff?.life || 3000;
  const life = Math.min(4500, Math.max(700, lifeBase));

  return {
    id: it.id,
    type: (WATER.includes(it)?'water':(SWEET.includes(it)?'sweet':'neutral')),
    char: it.icon,
    life,
    mult,
    golden
  };
}

// ‡∏Å‡∏é:
// - ‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ ‚Äú‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‚Äù (ST.level > safeMax):
//     - ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤ => ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (bad)
//     - ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô => ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (good)  [‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏]
// - ‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ ‚Äú‡∏ï‡πà‡∏≥‚Äù (ST.level < safeMin):
//     - ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô => ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (bad)        [‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏]
//     - ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤ => ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (good)
// - ‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡∏û‡∏≠‡∏î‡∏µ => ‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏î‡∏µ (good) ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô‡∏û‡∏≠‡πÉ‡∏ä‡πâ/‡∏´‡∏£‡∏∑‡∏≠ bad ‡∏ï‡∏≤‡∏°‡∏î‡πà‡∏≤‡∏ô (‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô ok)
export function onHit(meta, systems, gameState, hud){
  let res = 'ok';
  const was = ST.level;

  if (meta.type==='water'){
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    ST.level = clamp(ST.level + 8, 0, 120);
  }else if (meta.type==='sweet'){
    // ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô‡∏ó‡∏≥‡πÉ‡∏´‡πâ ‚Äú‡∏ä‡∏∏‡πà‡∏°‡∏ä‡∏∑‡πà‡∏ô‡πÅ‡∏õ‡πä‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‚Äù ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏• -> ‡∏Ç‡∏¢‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏¢/‡∏ó‡∏≥ noise
    ST.level = clamp(ST.level + 4, 0, 120);
  }else{
    // neutral: ‡πÅ‡∏ó‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    ST.level = clamp(ST.level + 0, 0, 120);
  }

  // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ú‡∏•
  if (ST.level > ST.safeMax){             // ‚Äú‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‚Äù
    if (meta.type==='water'){ res='bad'; }
    else if (meta.type==='sweet'){ res='good'; }
    else { res='ok'; }
  } else if (ST.level < ST.safeMin){      // ‚Äú‡∏ï‡πà‡∏≥‚Äù
    if (meta.type==='sweet'){ res='bad'; }
    else if (meta.type==='water'){ res='good'; }
    else { res='ok'; }
  } else {                                // ‚Äú‡∏û‡∏≠‡∏î‡∏µ‚Äù
    if (meta.type==='water'){ res='good'; }
    else if (meta.type==='sweet'){ res='ok'; }
    else { res='ok'; }
  }

  // ‡πÇ‡∏Ñ‡πâ‡∏ä‡∏û‡∏π‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢
  if (res==='good') systems.coach?.say?.(t('‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏µ', 'Nice! Hydration on track', ST.lang));
  if (res==='bad')  systems.coach?.say?.(t('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏ô‡∏∞', 'Not ideal yet', ST.lang));

  renderBar();
  return res;
}

// Power durations ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á UI (‡πÅ‡∏°‡πà‡πÄ‡∏´‡∏•‡πá‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ)
export function getPowerDurations(){ return { x2:8, freeze:3, magnet:0 }; }
export const powers = {
  x2Target(){ ST.x2Until = performance.now() + 8000; },
  freezeTarget(){ /* main.js ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î spawn */ },
  magnetNext(){ /* ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ */ }
};

// ----- HUD: Hydration bar -----
function renderBar(){
  if (!ST.$bar || !ST.$label) return;

  const pct = Math.max(0, Math.min(100, ST.level));
  ST.$bar.style.width = pct + '%';

  // ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏°‡∏µ ‚Äú‡πÑ‡∏ü‡∏•‡∏∏‡∏Å‚Äù (glow) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô/‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô
  let color = '#22c55e', txt = t('‡∏û‡∏≠‡∏î‡∏µ', 'OK', ST.lang);
  let glow = '';
  if (ST.level > ST.safeMax){
    color = '#ef4444'; txt = t('‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô', 'Too High', ST.lang);
    glow = '0 0 18px rgba(239,68,68,.65), 0 0 6px rgba(239,68,68,.45)';
  } else if (ST.level < ST.safeMin){
    color = '#3b82f6'; txt = t('‡∏ï‡πà‡∏≥', 'Low', ST.lang);
    glow = '0 0 18px rgba(59,130,246,.65), 0 0 6px rgba(59,130,246,.45)';
  }
  ST.$bar.style.background = `linear-gradient(90deg, ${color}, ${shade(color, -12)})`;
  ST.$bar.style.boxShadow = glow;
  ST.$label.textContent = `${txt} (${pct|0})`;
}

// utils
function t(th,en,lang){ return lang==='EN'?en:th; }
function clamp(v,min,max){ return Math.max(min, Math.min(max, v)); }
function shade(hex, amt=-10){
  // hex #rrggbb -> ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ
  const c = hex.replace('#','');
  let r = parseInt(c.substring(0,2),16), g = parseInt(c.substring(2,4),16), b = parseInt(c.substring(4,6),16);
  r = Math.max(0,Math.min(255,r+amt)); g = Math.max(0,Math.min(255,g+amt)); b = Math.max(0,Math.min(255,b+amt));
  return `#${r.toString(16).padStart(2,'0')}${g.toString(16).padStart(2,'0')}${b.toString(16).padStart(2,'0')}`;
}
import { add3DTilt, shatter3D } from '/webxr-health-mobile/HeroHealth/game/core/fx.js';

export const fx = {
  onSpawn(el/*, state*/){
    add3DTilt(el);
  },
  onHit(x, y/*, meta, state*/){
    shatter3D(x, y);
  }
};

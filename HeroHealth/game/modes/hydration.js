// === Hero Health Academy ‚Äî game/modes/hydration.js (Mini Quests 5 ‡πÅ‡∏ö‡∏ö: ‡∏™‡∏∏‡πà‡∏° 3 ‡∏ï‡πà‡∏≠‡πÄ‡∏Å‡∏° + ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏¥‡∏õ HUD) ===
export const name = 'hydration';

/**
 * ‡πÇ‡∏ã‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ (‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå)
 *  - LOW:   0‚Äì39
 *  - MID:   40‚Äì70
 *  - HIGH:  71‚Äì100
 *
 * ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏´‡∏•‡∏±‡∏Å (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î):
 *  - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ "‡∏™‡∏π‡∏á" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤ => BAD (‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö)
 *  - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ "‡∏™‡∏π‡∏á" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô => GOOD (‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö)
 *  - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ "‡∏ï‡πà‡∏≥" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô => BAD (‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö)
 *  - ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡πà‡∏≥/‡∏Å‡∏•‡∏≤‡∏á + ‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤) => GOOD / OK ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
 */

const Z = { LOW: 'low', MID: 'mid', HIGH: 'high' };
const clamp = (v, a, b)=>Math.max(a, Math.min(b, v));

const ST = {
  lang: 'TH',
  difficulty: 'Normal',
  // ‡∏ô‡πâ‡∏≥‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô & ‡∏™‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤
  level: 55,                 // 0..100
  decayPerSec: 1.0,          // ‡∏•‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
  lastZone: 'mid',
  // ‡πÄ‡∏Ñ‡∏ß‡∏™
  qAll: [],                  // 5 ‡πÄ‡∏Ñ‡∏ß‡∏™ (def)
  qActive: [],               // ‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤ 3 ‡πÄ‡∏Ñ‡∏ß‡∏™
  qMap: new Map(),           // id -> runtime
  questHost: null,
  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (‡πÄ‡∏Ñ‡∏ß‡∏™ 1)
  midStreakSec: 0,
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™ 5 (‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô -> ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏≤‡∏á ‡∏ô‡∏±‡∏ö‡∏£‡∏≠‡∏ö)
  needRecover: false,
};

/* ----------------------- ‡πÄ‡∏Ñ‡∏ß‡∏™ 5 ‡πÅ‡∏ö‡∏ö -----------------------
1) ‡∏Ñ‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏• (MID) ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á Xs
2) ‡∏á‡∏î‡∏´‡∏ß‡∏≤‡∏ô‡∏¢‡∏≤‡∏ß ‡πÜ (‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô)
3) ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ä‡πà‡∏ß‡∏á X ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (LOW/MID ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
4) ‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏°‡∏ô‡πâ‡∏≥ (‡∏´‡πâ‡∏≤‡∏°‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏Ç‡∏ì‡∏∞ HIGH)
5) ‡πÅ‡∏Å‡∏ß‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á (‡∏à‡∏≤‡∏Å‡∏ô‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏≤‡∏á X ‡∏£‡∏≠‡∏ö)
----------------------------------------------------------- */

function difficultyNeed(d, easy, normal, hard){
  return d==='Easy' ? easy : d==='Hard' ? hard : normal;
}

function labelTH(id, need){
  switch(id){
    case 'stay_mid':   return `‡∏Ñ‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö ‚Äú‡∏û‡∏≠‡∏î‡∏µ‚Äù ${need}s`;
    case 'no_sugar':   return `‡∏´‡πâ‡∏≤‡∏°‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏Å‡∏°`;
    case 'right_water':return `‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞ √ó${need}`;
    case 'no_water_high':return `‡∏´‡πâ‡∏≤‡∏°‡∏Å‡∏î ‚Äú‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‚Äù ‡∏ï‡∏≠‡∏ô‡∏™‡∏π‡∏á`;
    case 'recover_mid':return `‡∏û‡∏≤‡πÄ‡∏Å‡∏à‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà ‚Äú‡∏û‡∏≠‡∏î‡∏µ‚Äù √ó${need}`;
  }
  return id;
}
function labelEN(id, need){
  switch(id){
    case 'stay_mid':   return `Stay in optimal zone for ${need}s`;
    case 'no_sugar':   return `No sugary drinks this run`;
    case 'right_water':return `Right-time water √ó${need}`;
    case 'no_water_high':return `No water clicks when HIGH`;
    case 'recover_mid':return `Bring level back to MID √ó${need}`;
  }
  return id;
}

function zoneOf(level){
  if (level <= 39) return Z.LOW;
  if (level <= 70) return Z.MID;
  return Z.HIGH;
}

function select3of5(arr){
  const a = [...arr];
  for (let i=a.length-1;i>0;i--){
    const j = (Math.random()*(i+1))|0;
    [a[i],a[j]] = [a[j],a[i]];
  }
  return a.slice(0,3);
}

/* ----------------------- HUD: ‡∏ä‡∏¥‡∏õ‡πÄ‡∏Ñ‡∏ß‡∏™ ----------------------- */
function chipHost(){
  if (!ST.questHost) ST.questHost = document.getElementById('questChips');
  return ST.questHost;
}
function renderQuestChips(){
  const host = chipHost(); if (!host) return;
  host.innerHTML = '';
  for (const q of ST.qActive){
    const run = ST.qMap.get(q.id);
    const prog = Math.min(run.prog, run.need);
    const done = !!run.done;
    const fail = !!run.fail;

    const chip = document.createElement('div');
    chip.className = 'questChip';
    chip.dataset.qid = q.id;
    chip.style.cssText = `display:inline-flex;align-items:center;gap:8px;padding:6px 10px;border-radius:999px;background:#0f1b33;border:1px solid #243659;font-weight:800;`;
    const pct = Math.round((prog/run.need)*100);

    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏µ
    let badge = fail ? '‚ùå' : done ? '‚úÖ' : 'üü°';

    chip.innerHTML = `
      <span class="qBadge">${badge}</span>
      <span class="qLabel">${q.label}</span>
      <span class="qProg">${prog}/${run.need}</span>
      <div class="qBar" style="position:relative;height:6px;width:72px;border-radius:999px;background:#0b1530;overflow:hidden;border:1px solid #203155">
        <i style="display:block;height:100%;width:${pct}%;background:linear-gradient(90deg,#4ade80,#22c55e)"></i>
      </div>
    `;
    if (fail){
      chip.style.opacity = .55;
      chip.style.filter = 'grayscale(0.35)';
    }
    if (done){
      chip.style.outline = '2px solid #4ade80';
      chip.style.boxShadow = '0 0 12px rgba(74,222,128,.25)';
    }

    host.appendChild(chip);
  }
}

/* ----------------------- ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞: lifecycle ----------------------- */
export function init(gameState, hud, diff){
  ST.lang = localStorage.getItem('hha_lang') || 'TH';
  ST.difficulty = gameState?.difficulty || 'Normal';

  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  ST.level = 55;
  ST.lastZone = zoneOf(ST.level);
  ST.midStreakSec = 0;
  ST.needRecover = false;

  // ‡πÅ‡∏™‡∏î‡∏á HUD ‡∏ô‡πâ‡∏≥
  const wrap = document.getElementById('hydroWrap');
  if (wrap) wrap.style.display = 'block';
  updateHydroBar();

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á 5 ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏à‡∏≤‡∏Å difficulty
  const stayNeed    = difficultyNeed(ST.difficulty, 10, 15, 20);
  const rightNeed   = difficultyNeed(ST.difficulty, 6, 8, 10);
  const recoverNeed = difficultyNeed(ST.difficulty, 2, 3, 4);

  ST.qAll = [
    { id:'stay_mid',     need: stayNeed,    type:'time' },
    { id:'no_sugar',     need: 1,           type:'flag' },
    { id:'right_water',  need: rightNeed,   type:'count' },
    { id:'no_water_high',need: 1,           type:'flag' },
    { id:'recover_mid',  need: recoverNeed, type:'count' },
  ];

  // ‡∏™‡∏∏‡πà‡∏° 3 ‡πÄ‡∏Ñ‡∏ß‡∏™ & set label
  ST.qActive = select3of5(ST.qAll).map(q=>{
    const label = (ST.lang==='EN'?labelEN(q.id,q.need):labelTH(q.id,q.need));
    return {...q, label};
  });

  // map runtime
  ST.qMap.clear();
  for (const q of ST.qActive){
    ST.qMap.set(q.id, { prog:0, need:q.need, done:false, fail:false });
  }

  renderQuestChips();
}

export function cleanup(){
  const wrap = document.getElementById('hydroWrap');
  if (wrap) wrap.style.display = 'none';
  ST.qMap.clear();
  const host = chipHost(); if (host) host.innerHTML = '';
}

export function tick(state, systems, hud){
  // ‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
  ST.level = clamp(ST.level - ST.decayPerSec, 0, 100);
  const prevZone = ST.lastZone;
  const nowZone  = zoneOf(ST.level);

  // ‡πÄ‡∏Ñ‡∏ß‡∏™ 1: ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô MID ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
  if (nowZone === Z.MID){
    ST.midStreakSec += 1;
    addQuestProgress('stay_mid', 1, 'time');
  }else{
    ST.midStreakSec = 0;
  }

  // ‡πÄ‡∏Ñ‡∏ß‡∏™ 5: ‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô -> ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ MID ‡∏ô‡∏±‡∏ö‡∏£‡∏≠‡∏ö
  if (prevZone !== nowZone){
    if (prevZone === Z.MID && nowZone !== Z.MID){
      ST.needRecover = true;
    }
    if (ST.needRecover && nowZone === Z.MID){
      addQuestProgress('recover_mid', 1, 'count');
      ST.needRecover = false;
    }
    ST.lastZone = nowZone;
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ñ‡∏ö‡∏ô‡πâ‡∏≥
  updateHydroBar();
}

/* ----------------------- ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞: spawn & onHit ----------------------- */
export function pickMeta(diff, gameState){
  // ‡∏™‡∏∏‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤ üíß ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô ü•§ ‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡πÇ‡∏ã‡∏ô ‡πÉ‡∏´‡πâ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå
  const z = zoneOf(ST.level);
  let type; // 'water' | 'sugar'
  if (z === Z.LOW)      type = Math.random() < 0.70 ? 'water' : 'sugar';
  else if (z === Z.MID) type = Math.random() < 0.55 ? 'water' : 'sugar';
  else                  type = Math.random() < 0.60 ? 'sugar' : 'water'; // HIGH ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏°‡∏µ sugary ‡πÄ‡∏¢‡∏≠‡∏∞‡∏´‡∏ô‡πà‡∏≠‡∏¢

  return {
    id: (type==='water'?'water':'sugar') + '_' + Math.random().toString(36).slice(2,7),
    char: (type==='water'?'üíß':'ü•§'),
    kind: type,
    life: diff?.life || 3000,
  };
}

export function onHit(meta, systems, gameState, hud){
  const z = zoneOf(ST.level);
  const isWater = meta.kind === 'water';
  const isSugar = meta.kind === 'sugar';

  // ‡πÄ‡∏Ñ‡∏ß‡∏™ 2/4: ‡∏ò‡∏á fail ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏Å‡∏£‡∏™‡∏Å‡πà‡∏≠‡∏ô
  if (isSugar){
    // ‡πÄ‡∏Ñ‡∏ß‡∏™ 2: ‡∏á‡∏î‡∏´‡∏ß‡∏≤‡∏ô ‚Üí ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô = fail
    setQuestFail('no_sugar');
  }
  if (isWater && z === Z.HIGH){
    // ‡πÄ‡∏Ñ‡∏ß‡∏™ 4: ‡∏´‡πâ‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏ï‡∏≠‡∏ô‡∏™‡∏π‡∏á ‚Üí ‡∏Å‡∏î = fail
    setQuestFail('no_water_high');
  }

  // ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏´‡∏•‡∏±‡∏Å + ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥
  let result = 'ok';
  if (z === Z.HIGH){
    if (isWater){            // ‡∏™‡∏π‡∏á + ‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‚Üí BAD
      result = 'bad';
      ST.level = clamp(ST.level + 6, 0, 100);     // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ ‚Äú‡∏ú‡∏¥‡∏î‚Äù ‡∏ä‡∏±‡∏î (‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡∏¥‡∏î)
    }else if (isSugar){      // ‡∏™‡∏π‡∏á + ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô ‚Üí GOOD
      result = 'good';
      ST.level = clamp(ST.level - 8, 0, 100);     // ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏Å‡∏°
    }
  }else if (z === Z.LOW){
    if (isWater){            // ‡∏ï‡πà‡∏≥ + ‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‚Üí GOOD
      result = 'good';
      ST.level = clamp(ST.level + 18, 0, 100);
      // ‡πÄ‡∏Ñ‡∏ß‡∏™ 3: ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏ñ‡∏π‡∏Å‡∏ä‡πà‡∏ß‡∏á
      addQuestProgress('right_water', 1, 'count');
    }else if (isSugar){      // ‡∏ï‡πà‡∏≥ + ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô ‚Üí BAD
      result = 'bad';
      ST.level = clamp(ST.level - 6, 0, 100);
    }
  }else{ // MID
    if (isWater){            // ‡∏Å‡∏•‡∏≤‡∏á + ‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‚Üí GOOD ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
      result = 'good';
      ST.level = clamp(ST.level + 10, 0, 100);
      addQuestProgress('right_water', 1, 'count');
    }else if (isSugar){      // ‡∏Å‡∏•‡∏≤‡∏á + ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô ‚Üí OK / ‡πÄ‡∏ö‡∏≤ ‡πÜ
      result = 'ok';
      ST.level = clamp(ST.level - 2, 0, 100);
    }
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏ã‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™ 5 (‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á)
  const prevZone = ST.lastZone;
  const nowZone  = zoneOf(ST.level);
  if (prevZone !== nowZone){
    if (prevZone === Z.MID && nowZone !== Z.MID) ST.needRecover = true;
    if (ST.needRecover && nowZone === Z.MID){ addQuestProgress('recover_mid', 1, 'count'); ST.needRecover=false; }
    ST.lastZone = nowZone;
  }

  updateHydroBar();
  // ‡πÉ‡∏´‡πâ main.js ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢ result ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô
  return result;
}

/* ----------------------- ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô: Quest Runtime ----------------------- */
function addQuestProgress(id, amount, mode){
  const run = ST.qMap.get(id); if (!run || run.done || run.fail) return;

  if (id === 'stay_mid'){
    // mode==='time' ‡πÅ‡∏•‡∏∞ amount=1 ‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà MID
    run.prog = Math.min(run.need, ST.midStreakSec);
  }else if (mode === 'count'){
    run.prog = clamp(run.prog + (amount|0), 0, run.need);
  }

  if (run.prog >= run.need) run.done = true;
  renderQuestChips();
}

function setQuestFail(id){
  const run = ST.qMap.get(id); if (!run || run.done || run.fail) return;
  run.fail = true;
  renderQuestChips();
}

/* ----------------------- ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô: HUD ‡∏ô‡πâ‡∏≥ ----------------------- */
function updateHydroBar(){
  const bar = document.getElementById('hydroBar');
  const lab = document.getElementById('hydroLabel');
  if (bar) bar.style.width = `${Math.round(ST.level)}%`;
  if (lab){
    const z = zoneOf(ST.level);
    if (ST.lang==='EN'){
      lab.textContent = z===Z.LOW?'Low': z===Z.MID?'Optimal':'High';
    }else{
      lab.textContent = z===Z.LOW?'‡∏ï‡πà‡∏≥': z===Z.MID?'‡∏û‡∏≠‡∏î‡∏µ':'‡∏™‡∏π‡∏á';
    }
  }
}

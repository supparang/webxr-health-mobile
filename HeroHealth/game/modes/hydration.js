// ./game/modes/hydration.js
export const name = '‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ô‡πâ‡∏≥';

export function init(state, hud, diff){
  state.hyd = 50;
  state.hydMin = 45;
  state.hydMax = 65;
  state.hydWaterLockUntil = 0; // ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (ms)
  state.hydSweetLockUntil = 0; // ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (ms)

  const wrap = document.getElementById('hydroWrap');
  if (wrap) wrap.style.display = 'block';
  hud.setHydration(state.hyd, 'ok');
}

// ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏ô‡πâ‡∏≥/‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° diff (‡∏°‡∏µ hydWaterRate ‡πÉ‡∏ô DIFFS)
export function pickMeta(diff, state){
  const rate = (diff && typeof diff.hydWaterRate === 'number') ? diff.hydWaterRate : 0.66;
  const water = Math.random() < rate;
  return { type:'hydra', water, char: water ? 'üíß' : 'üßã' };
}

export function onHit(meta, systems, state, hud){
  if(meta.type !== 'hydra') return;

  const now = (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now();

  // ‡πÇ‡∏ã‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏±‡∏ö
  const zoneBefore = (state.hyd < state.hydMin) ? 'low' : (state.hyd > state.hydMax ? 'high' : 'ok');

  // ‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏±‡∏ô‡∏™‡πÅ‡∏õ‡∏°: ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡∏ú‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏ä‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢
  if (meta.water && now < (state.hydWaterLockUntil||0)) {
    systems.fx?.spawn3D(null, 'LOCK', 'bad');
    return;
  }
  if (!meta.water && now < (state.hydSweetLockUntil||0)) {
    systems.fx?.spawn3D(null, 'LOCK', 'bad');
    return;
  }

  // ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤:
  // - high + water  => ‡πÇ‡∏ó‡∏©‡∏´‡∏ô‡∏±‡∏Å (-5, -2s) + ‡∏•‡πá‡∏≠‡∏Å‡∏ô‡πâ‡∏≥ 1500ms
  // - low  + sweet  => ‡πÇ‡∏ó‡∏©‡∏´‡∏ô‡∏±‡∏Å (-5, -2s) + ‡∏•‡πá‡∏≠‡∏Å‡∏´‡∏ß‡∏≤‡∏ô 1500ms
  // - ‡∏õ‡∏Å‡∏ï‡∏¥: water +5% (+5 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô), sweet -6% (-3 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
  if (meta.water) {
    if (zoneBefore === 'high') {
      systems.score.add(-5);
      state.timeLeft = Math.max(0, (state.timeLeft||0) - 2);
      systems.fx?.spawn3D(null, 'Overflow -5 ‚Ä¢ -2s', 'bad');
      state.hydWaterLockUntil = now + 1500;
      // ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏ã‡πâ‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠ high
    } else {
      state.hyd = Math.min(100, state.hyd + 5);
      systems.score.add(5);
      systems.fx?.spawn3D?.(null, '+5', 'good');
    }
  } else {
    // sweet
    if (zoneBefore === 'low') {
      systems.score.add(-5);
      state.timeLeft = Math.max(0, (state.timeLeft||0) - 2);
      systems.fx?.spawn3D(null, 'Dehydrated -5 ‚Ä¢ -2s', 'bad');
      state.hydSweetLockUntil = now + 1500;
      // ‡∏¢‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∏‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÄ‡∏ö‡∏≤ ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ô‡πâ‡∏ô‡∏ú‡∏• (‡∏Ñ‡∏á -6% ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
      state.hyd = Math.max(0, state.hyd - 6);
    } else {
      state.hyd = Math.max(0, state.hyd - 6);
      systems.score.add(-3);
      state.ctx.sweetMiss = (state.ctx.sweetMiss||0) + 1;
      systems.fx?.spawn3D?.(null, '-3', 'bad');
    }
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏ã‡∏ô/‡πÅ‡∏ñ‡∏ö HUD
  const z = state.hyd < state.hydMin ? 'low' : (state.hyd > state.hydMax ? 'high' : 'ok');
  hud.setHydration(state.hyd, z);
}

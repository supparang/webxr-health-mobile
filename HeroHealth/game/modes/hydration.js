// === modes/hydration.js (zone sim + clicks: water/sweet; quest hooks)
export const name = 'hydration';

// ‡πÇ‡∏ã‡∏ô: LOW < OK < HIGH
const Z = { LOW:'LOW', OK:'OK', HIGH:'HIGH' };

export function create({ engine, hud, coach }){
  const host = document.getElementById('spawnHost');
  let ended=false, secAcc=0;

  // ‡∏Ñ‡πà‡∏≤ ‚Äú‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ô‡πâ‡∏≥‚Äù 0..100 (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏≤‡∏á)
  let meter = 50;
  let zone  = Z.OK;

  // UI: ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏¥‡∏ö (‡∏ô‡πâ‡∏≥/‡∏´‡∏ß‡∏≤‡∏ô) + ‡πÄ‡∏Å‡∏à‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  function buildUI(){
    host.innerHTML = `
      <div style="position:absolute;left:50%;top:24px;transform:translateX(-50%);display:flex;gap:10px;z-index:90">
        <button id="btn_water" class="chip">üíß Water</button>
        <button id="btn_sweet" class="chip">üç¨ Sweet</button>
      </div>
      <div id="hydroHud" style="position:absolute;left:50%;top:64px;transform:translateX(-50%);z-index:90;font:900 14px ui-rounded"></div>
    `;
    document.getElementById('btn_water')?.addEventListener('click', ()=>{
      const beforeZone = zone;
      meter = Math.min(100, meter + 9);
      window.HHA?.bus?.hydrationClick?.('water', beforeZone);
      coach?.say?.('‡∏à‡∏¥‡∏ö‡∏û‡∏≠‡∏î‡∏µ ‡πÜ');
      checkZoneCross(beforeZone);
      render();
    });
    document.getElementById('btn_sweet')?.addEventListener('click', ()=>{
      const beforeZone = zone;
      meter = Math.max(0, meter - 14);
      window.HHA?.bus?.hydrationClick?.('sweet', beforeZone);
      coach?.say?.('‡∏´‡∏ß‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á');
      checkZoneCross(beforeZone);
      render();
    });
  }

  function zoneOf(v){
    if (v < 35) return Z.LOW;
    if (v > 70) return Z.HIGH;
    return Z.OK;
  }

  function checkZoneCross(before){
    const after = zoneOf(meter);
    if (after !== zone){
      // cross
      window.HHA?.bus?.hydrationCross?.(zone, after);
      // ‡∏ô‡∏±‡∏ö quest (recover low: LOW -> OK)
      // treat high: click sweet while HIGH handled via click meta
      zone = after;
    }
  }

  function render(){
    const el = document.getElementById('hydroHud');
    if (!el) return;
    el.textContent = `Hydration: ${meter|0} ‚Ä¢ Zone: ${zone}`;
  }

  return {
    start(){
      ended=false; buildUI(); meter=50; zone=Z.OK; render();
      coach?.say?.((navigator.language||'th').startsWith('th') ? '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏ã‡∏ô OK ‡πÉ‡∏´‡πâ‡∏ô‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î' : 'Stay in OK zone!');
    },
    update(dt){
      if (ended) return;
      secAcc += dt;
      // ‡πÑ‡∏´‡∏•‡πÄ‡∏≠‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏ô‡πâ‡∏≠‡∏¢
      if (secAcc >= 1){
        secAcc = 0;
        // ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÑ‡∏´‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ OK
        if (zone === Z.LOW)  meter = Math.min(100, meter + 3);
        if (zone === Z.HIGH) meter = Math.max(0,   meter - 4);
        // tick & zone report
        window.HHA?.bus?.hydrationTick?.(zone);
        render();
      }
      // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
      if (Math.random()<0.02){ const before=zone; meter = Math.max(0, Math.min(100, meter + (Math.random()*8-4))); checkZoneCross(before); }
    },
    stop(){ ended=true; try{ host.innerHTML=''; }catch{}; }
  };
}

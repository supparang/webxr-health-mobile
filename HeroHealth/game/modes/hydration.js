// === Hero Health Academy ‚Äî modes/hydration.js ===
// ‡∏ö‡∏≤‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ (Low/OK/High) + ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÑ‡∏ü‡∏•‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ FEVER ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
// ‡∏¢‡∏¥‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Quests: 'hydro_tick', 'hydro_cross', 'hydro_click'

import { Quests } from '/webxr-health-mobile/HeroHealth/game/core/quests.js';

const ZONES = { LOW:'LOW', OK:'OK', HIGH:'HIGH' };

function clamp(n,a,b){ return Math.max(a, Math.min(b, n)); }
function zoneOf(level, minOK, maxOK){
  if (level < minOK) return ZONES.LOW;
  if (level > maxOK) return ZONES.HIGH;
  return ZONES.OK;
}

function ensureHUD(){
  // ‡πÉ‡∏ä‡πâ #hydroWrap ‡∏ó‡∏µ‡πà HUD ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
  let wrap = document.getElementById('hydroWrap');
  if (!wrap){
    wrap = document.createElement('div');
    wrap.id = 'hydroWrap';
    document.body.appendChild(wrap);
  }
  if (!wrap.querySelector('.hydroBar')){
    wrap.innerHTML = `
      <div class="hydroBar" aria-label="hydration-bar">
        <div class="seg low"><span>‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ</span></div>
        <div class="seg ok"><span>‡∏û‡∏≠‡∏î‡∏µ</span></div>
        <div class="seg high"><span>‡∏°‡∏≤‡∏Å‡πÑ‡∏õ</span></div>
        <div class="needle" role="presentation"></div>
        <div class="flame" role="presentation" hidden>
          <i></i><i></i><i></i>
        </div>
      </div>
    `;
  }
  return wrap;
}

// -------------------------------------------------

export function init(state, hud, diff){
  state.hydTotalTime = diff.time|0;
  state.hyd = 50;         // 0..100
  state.hydMin = 35;      // ‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á‡πÇ‡∏ã‡∏ô OK
  state.hydMax = 65;      // ‡∏Ç‡∏≠‡∏ö‡∏ö‡∏ô‡πÇ‡∏ã‡∏ô OK
  state.hydDecay = 0.25;  // ‡∏•‡∏î‡πÄ‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  state._hydPrevZone = zoneOf(state.hyd, state.hydMin, state.hydMax);

  ensureHUD();
  hud.showHydration?.();
  render(state);
}

export function cleanup(state, hud){
  hud.hideHydration?.();
}

export const fx = {
  onSpawn(el, state){
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏≤/tilt ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ô main ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ã‡πâ‡∏≥
  },
  onHit(x, y, meta, state){
    // main ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ï‡∏Å‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
  }
};

// ‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏ú‡∏•‡πà: ‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤, ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô, ‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á (‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢), ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ó‡∏≠‡∏á
export function pickMeta(diff, state){
  // ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö‡∏´‡∏¢‡∏≤‡∏ö: water 55%, sweet 30%, ice 10%, golden 5%
  const r = Math.random();
  if (r < 0.55) return { id:'water',  char:'üíß',  aria:'Water',  good:true,  life: diff.life };
  if (r < 0.85) return { id:'sweet',  char:'üßÉ',  aria:'Sweet drink', good:false, life: diff.life };
  if (r < 0.95) return { id:'ice',    char:'üßä',  aria:'Ice (cooldown)', good:true,  life: diff.life, booster:true };
  return                { id:'gold',  char:'‚≠ê',  aria:'Golden', good:true, life: diff.life, golden:true };
}

export function onHit(meta, sys, state, hud){
  const { score, coach } = sys;
  const before = state.hyd;
  const beforeZone = zoneOf(before, state.hydMin, state.hydMax);

  if (meta.id==='water'){
    // ‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö (‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà LOW/OK, ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà HIGH)
    const z = beforeZone;
    const delta = (z===ZONES.HIGH ? +2 : +6);
    state.hyd = clamp(state.hyd + delta, 0, 100);
  }else if (meta.id==='sweet'){
    // ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡∏ï‡∏≠‡∏ô HIGH / (OK = -‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢) / (LOW = ‡πÅ‡∏¢‡πà)
    const z = beforeZone;
    const delta = (z===ZONES.HIGH ? -8 : z===ZONES.OK ? -3 : +4); // LOW ‡∏î‡∏∑‡πà‡∏°‡∏´‡∏ß‡∏≤‡∏ô = ‡πÅ‡∏¢‡πà (‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏µ‡∏Å)
    state.hyd = clamp(state.hyd + delta, 0, 100);
  }else if (meta.id==='ice'){
    // ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß ‡∏•‡∏î decay ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß + ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    state.hydDecayBoostUntil = performance.now() + 5000;
    state.hydDecay = 0.1;
    try{ coach?.onPower?.('freeze'); }catch{}
  }else if (meta.id==='gold'){
    // Golden = ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏≠‡∏î‡∏µ‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ
    if (state.hyd < state.hydMin) state.hyd = clamp(state.hyd + 10, 0, 100);
    else if (state.hyd > state.hydMax) state.hyd = clamp(state.hyd - 10, 0, 100);
    else state.hyd = clamp(state.hyd + 6, 0, 100);
  }

  // ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå click logic
  Quests.event('hydro_click', { zoneBefore: beforeZone, kind: meta.id==='sweet'?'sweet':'water' });

  // ‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏±‡∏ö main (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô, ‡∏î‡∏µ/‡∏û‡∏•‡∏≤‡∏î)
  const afterZone = zoneOf(state.hyd, state.hydMin, state.hydMax);
  if (afterZone === ZONES.OK){
    score.add?.(8);
    return (meta.golden ? 'perfect' : 'good');
  }else if (beforeZone!==afterZone && afterZone!==ZONES.OK){
    // ‡∏Ç‡πâ‡∏≤‡∏°‡πÇ‡∏ã‡∏ô‡πÑ‡∏õ‡∏ú‡∏¥‡∏î‡∏ù‡∏±‡πà‡∏á = ‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏£‡∏á
    return 'bad';
  }else{
    return 'ok';
  }
}

export function tick(state, sys, hud){
  const now = performance.now();

  // decay ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏Å‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡∏ö‡∏π‡∏™‡∏ï‡πå
  if (state.hydDecayBoostUntil && now > state.hydDecayBoostUntil){
    state.hydDecayBoostUntil = 0;
    state.hydDecay = 0.25;
  }

  // ‡∏•‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
  state.hyd = clamp(state.hyd - state.hydDecay, 0, 100);

  // ‡πÇ‡∏ã‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const z = zoneOf(state.hyd, state.hydMin, state.hydMax);

  // ‡∏¢‡∏¥‡∏á hydro_tick ‡πÉ‡∏´‡πâ Quests (‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏ã‡∏ô OK)
  Quests.event('hydro_tick', { level: state.hyd, zone: (z===ZONES.OK?'OK':z) });

  // ‡∏ï‡∏£‡∏ß‡∏à crossing
  if (z !== state._hydPrevZone){
    Quests.event('hydro_cross', { from: state._hydPrevZone, to: (z===ZONES.OK?'OK':z) });
    state._hydPrevZone = z;
  }

  // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö penalty ‡∏ñ‡πâ‡∏≤ HIGH/LOW ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏≤‡∏ô ‡πÜ (‡πÉ‡∏™‡πâ‡∏™‡∏±‡πà‡∏ô‡∏à‡∏≤‡∏á ‡πÜ)
  if (z!==ZONES.OK && hud?.dimPenalty){ hud.dimPenalty(); }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HUD
  render(state);
}

// -------------------------------------------------
// ‡∏ö‡∏≤‡∏£‡πå + flame visual
function render(state){
  const wrap = document.getElementById('hydroWrap'); if (!wrap) return;
  const bar  = wrap.querySelector('.hydroBar');
  const needle = wrap.querySelector('.needle');
  const flame  = wrap.querySelector('.flame');

  // needle ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏° 0..100
  const pct = clamp(state.hyd|0, 0, 100);
  needle.style.left = `calc(${pct}% - 6px)`;

  // ‡πÇ‡∏ã‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏µ‡∏Å‡∏£‡∏≠‡∏ö
  const z = zoneOf(state.hyd, state.hydMin, state.hydMax);
  bar.dataset.zone = z;

  // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ü‡∏•‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ FEVER ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  if (state?.fever?.active){
    flame.hidden = false;
    flame.style.left = `calc(${pct}% - 10px)`;
  }else{
    flame.hidden = true;
  }
}

// game/modes/hydration.js
// ‡πÇ‡∏´‡∏°‡∏î: ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ô‡πâ‡∏≥ üíß ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° 45‚Äì65%
// ‡πÉ‡∏ä‡πâ HUD ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å index.html: #hydroWrap, #hydroBar, #hydroLabel
// onHit ‡∏à‡∏∞ return 'good' | 'ok' | 'bad' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ main.js ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö/‡∏ü‡∏µ‡πÄ‡∏ß‡∏≠‡∏£‡πå

export function init(state, hud, diff){
  state.ctx = state.ctx || {};
  state.ctx.hyd    = 55;  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 55%
  state.ctx.hydMin = 45;  // ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  state.ctx.hydMax = 65;

  // ‡πÇ‡∏ä‡∏ß‡πå HUD ‡∏ô‡πâ‡∏≥ (‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)
  try{ hud?.showHydration?.(); }catch{}
  updateBar(state.ctx.hyd);
  setHydroLabel(state.lang, state.ctx.hyd);
}

export function pickMeta(diff, state){
  // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° (‡∏ô‡πâ‡∏≥/‡∏ô‡∏° = ‡∏ö‡∏ß‡∏Å, ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô/‡∏Å‡∏≤‡πÅ‡∏ü = ‡∏•‡∏ö)
  const drinks = [
    { char:'üíß', effect:+10 }, // ‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤
    { char:'ü•õ', effect:+8  }, // ‡∏ô‡∏°
    { char:'ü•§', effect:-15 }, // ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô/‡πÇ‡∏ã‡∏î‡∏≤
    { char:'‚òï', effect:-10 }  // ‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏Ç‡πâ‡∏°/‡∏´‡∏ß‡∏≤‡∏ô
  ];
  const meta = drinks[(Math.random()*drinks.length)|0];
  meta.life = diff?.life ?? 3000; // TTL ‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û diff
  return meta;
}

export function onHit(meta, sys, state, hud){
  const { sfx } = sys || {};
  const ctx = state.ctx || {};
  const before = ctx.hyd ?? 55;

  // ‡∏õ‡∏£‡∏±‡∏ö hydration ‡πÅ‡∏•‡∏∞ clamp 0‚Äì100
  ctx.hyd = Math.max(0, Math.min(100, before + (meta.effect||0)));
  updateBar(ctx.hyd);
  setHydroLabel(state.lang, ctx.hyd);

  // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡∏≤‡∏á:
  // - ‡∏î‡∏∑‡πà‡∏°‡∏î‡∏µ (effect>0): ‡∏ñ‡πâ‡∏≤ "‡∏´‡∏•‡∏±‡∏á‡∏î‡∏∑‡πà‡∏°" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô ‚Üí 'good' ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô 'ok'
  // - ‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏¢‡πà (effect<=0): ‡∏ñ‡πâ‡∏≤ "‡∏´‡∏•‡∏±‡∏á‡∏î‡∏∑‡πà‡∏°" ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô ‚Üí 'ok' ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô 'bad'
  const inZoneAfter = (ctx.hyd >= ctx.hydMin && ctx.hyd <= ctx.hydMax);
  if ((meta.effect||0) > 0){
    try{ sfx?.good?.(); }catch{}
    return inZoneAfter ? 'good' : 'ok';
  } else {
    try{ sfx?.bad?.(); }catch{}
    return inZoneAfter ? 'ok' : 'bad';
  }
}

export function tick(state, sys, hud){
  // ‡∏•‡∏î‡∏ä‡πâ‡∏≤ ‡πÜ ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
  const ctx = state.ctx || {};
  ctx.hyd = Math.max(0, (ctx.hyd ?? 55) - 0.4);
  updateBar(ctx.hyd);
  setHydroLabel(state.lang, ctx.hyd);
}

// ---------- Helpers ----------
function updateBar(val){
  const bar = document.getElementById('hydroBar');
  if (!bar) return;
  const p = Math.round(val);
  bar.style.width = p + '%';
  // ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö
  let color = '#4FC3F7';          // ‡∏õ‡∏Å‡∏ï‡∏¥
  if (p < 45) color = '#E53935';  // ‡∏ï‡πà‡∏≥‡πÑ‡∏õ = ‡πÅ‡∏î‡∏á
  else if (p > 65) color = '#FFB300'; // ‡∏™‡∏π‡∏á‡πÑ‡∏õ = ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
  bar.style.background = color;
}

function setHydroLabel(lang='TH', val){
  const el = document.getElementById('hydroLabel');
  if (!el) return;
  const p = Math.round(val);
  el.textContent = (lang==='EN') ? `Hydration ${p}%` : `‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ô‡πâ‡∏≥ ${p}%`;
  const wrap = document.getElementById('hydroWrap');
  if (wrap) wrap.style.display = 'block';
}

// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î
export function cleanup(state, hud){
  try{ hud?.hideHydration?.(); }catch{}
  const bar = document.getElementById('hydroBar');
  const lb  = document.getElementById('hydroLabel');
  if (bar) bar.style.width = '0%';
  if (lb)  lb.textContent  = '‚Äî';
  if (state?.ctx){
    state.ctx.hyd = undefined;
    state.ctx.hydMin = undefined;
    state.ctx.hydMax = undefined;
  }
}

// === Hero Health Academy ‚Äî game/modes/hydration.js (Mini Quests tiered + Badges + FX) ===
export const name = 'hydration';

/* 
  ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏´‡∏•‡∏±‡∏Å (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î):
  - ‡∏ñ‡πâ‡∏≤ "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏™‡∏π‡∏á" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏ô‡πâ‡∏≥" ‚Üí ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô + ‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (bad)
  - ‡∏ñ‡πâ‡∏≤ "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏™‡∏π‡∏á" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô" ‚Üí ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (good/ok) + ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö
  - ‡∏ñ‡πâ‡∏≤ "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡πà‡∏≥" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô" ‚Üí ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô + ‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (bad)
  - (‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ) ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥, ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ä‡πà‡∏ß‡∏¢ (‡πÅ‡∏•‡∏∞‡πÉ‡∏ô High ‡∏à‡∏∞‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö Mid)
  
  ‡πÄ‡∏û‡∏¥‡πà‡∏°: Mini Quests 5 ‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÅ‡∏ö‡πà‡∏á Easy/Medium/Hard ‡πÅ‡∏•‡πâ‡∏ß "‡∏™‡∏∏‡πà‡∏° 3 ‡∏≠‡∏¢‡πà‡∏≤‡∏á/‡πÄ‡∏Å‡∏°" ‡πÇ‡∏î‡∏¢‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö 1 ‡∏á‡πà‡∏≤‡∏¢ + 1 ‡∏Å‡∏•‡∏≤‡∏á + 1 ‡∏¢‡∏≤‡∏Å
  ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á chip ‡πÉ‡∏ô HUD (#questChips) ‡πÅ‡∏•‡∏∞‡∏°‡∏µ Badge + ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏ß‡∏™
*/

// ---------- UI helpers ----------
const $ = (s)=>document.querySelector(s);
function t(th, en, lang){ return lang==='EN' ? en : th; }

// ---------- Zones ----------
const ZONE = { LOW:'low', MID:'mid', HIGH:'high' };
const Z_LIMIT = { LOW:34, HIGH:66 }; // <35 = LOW, 35‚Äì66 = MID, >66 = HIGH

// ---------- Items ----------
const ITEMS = [
  { id:'water',  kind:'water',  char:'üíß', life: 2600 },
  { id:'sweet',  kind:'sweet',  char:'ü•§', life: 2600 },
  { id:'juice',  kind:'sweet',  char:'üßÉ', life: 2600 }, // ‡∏ú‡∏™‡∏° decoy/‡∏™‡∏±‡∏ö‡∏Ç‡∏ô‡∏¥‡∏î‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢
];

// ---------- Mini-Quest pools (tiers) ----------
/* ‡πÄ‡∏Ñ‡∏ß‡∏™ 5 ‡∏≠‡∏¢‡πà‡∏≤‡∏á
   1) stay_mid: ‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏ã‡∏ô‡∏û‡∏≠‡∏î‡∏µ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á X ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
   2) no_sugar: ‡πÑ‡∏°‡πà‡∏Å‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏Å‡∏°
   3) right_water: ‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞ (Low/Mid) ‡∏Ñ‡∏£‡∏ö N ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
   4) no_high_water: ‡∏´‡πâ‡∏≤‡∏°‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≠‡∏ô High ‡πÄ‡∏•‡∏¢
   5) recover_mid: ‡∏û‡∏≤‡πÄ‡∏Å‡∏à‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô N ‡∏£‡∏≠‡∏ö
*/
const QUEST_POOL = {
  easy: [
    { id:'stay_mid',     labelTH:'‡∏Ñ‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏≠‡∏î‡∏µ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á 6 ‡∏ß‡∏¥',   labelEN:'Stay in Mid for 6s',     type:'timer', need:6 },
    { id:'right_water',  labelTH:'‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞ 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',       labelEN:'Right Water √ó5',        type:'counter', need:5 },
    { id:'recover_mid',  labelTH:'‡∏û‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏≠‡∏î‡∏µ 2 ‡∏£‡∏≠‡∏ö',        labelEN:'Recover to Mid √ó2',     type:'counter', need:2 },
  ],
  medium: [
    { id:'stay_mid',     labelTH:'‡∏Ñ‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏≠‡∏î‡∏µ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á 10 ‡∏ß‡∏¥',  labelEN:'Stay in Mid for 10s',    type:'timer', need:10 },
    { id:'right_water',  labelTH:'‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞ 7 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',       labelEN:'Right Water √ó7',         type:'counter', need:7 },
    { id:'recover_mid',  labelTH:'‡∏û‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏≠‡∏î‡∏µ 3 ‡∏£‡∏≠‡∏ö',        labelEN:'Recover to Mid √ó3',      type:'counter', need:3 },
  ],
  hard: [
    { id:'stay_mid',      labelTH:'‡∏Ñ‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏≠‡∏î‡∏µ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á 14 ‡∏ß‡∏¥', labelEN:'Stay in Mid for 14s',    type:'timer',   need:14 },
    { id:'right_water',   labelTH:'‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞ 9 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',      labelEN:'Right Water √ó9',         type:'counter', need:9 },
    { id:'no_high_water', labelTH:'‡∏´‡πâ‡∏≤‡∏°‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≠‡∏ô High',           labelEN:'No Water in High zone',  type:'flag',    need:1 },
    { id:'no_sugar',      labelTH:'‡πÑ‡∏°‡πà‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏Å‡∏°',         labelEN:'No Sugar drink at all',  type:'flag',    need:1 },
  ]
};

// ---------- Internal state ----------
const ST = {
  lang: 'TH',
  level: 50,               // 0..100
  zone: ZONE.MID,
  lastZone: ZONE.MID,
  didSweet: false,         // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö no_sugar
  didWaterInHigh: false,   // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö no_high_water
  wasOutOfMid: false,      // ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à recover_mid ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏ô‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô -> ‡∏Å‡∏•‡∏±‡∏ö Mid
  recoveredCount: 0,
  rightWaterHits: 0,       // ‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞
  stayMidTimer: 0,         // ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô Mid
  missions: [],            // ‡πÄ‡∏Ñ‡∏ß‡∏™ 3 ‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ (1 ‡∏á‡πà‡∏≤‡∏¢ + 1 ‡∏Å‡∏•‡∏≤‡∏á + 1 ‡∏¢‡∏≤‡∏Å)
  done: new Set(),         // qid ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
  /// visual control
  hydrateBarEl: null,
  hydrateLblEl: null,
  fireFxEl: null,
};

// ---------- Power durations (not used by hydration bar here, but kept for consistency) ----------
export function getPowerDurations(){
  return { x2:8, freeze:3, magnet:0 };
}

// ---------- Life cycle ----------
export function init(gameState, hud, diff){
  ST.lang = (localStorage.getItem('hha_lang')||'TH');
  ST.level = 50; ST.zone = ZONE.MID; ST.lastZone = ZONE.MID;
  ST.didSweet = false; ST.didWaterInHigh = false;
  ST.wasOutOfMid = false; ST.recoveredCount = 0;
  ST.rightWaterHits = 0; ST.stayMidTimer = 0;
  ST.done.clear();

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ HUD ‡∏ô‡πâ‡∏≥
  const wrap = $('#hydroWrap'); if (wrap) wrap.style.display = 'block';
  ST.hydrateBarEl = $('#hydroBar');
  ST.hydrateLblEl = $('#hydroLabel');
  ensureFireFx();

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏ß‡∏™ 3 ‡∏≠‡∏¢‡πà‡∏≤‡∏á: 1 ‡∏á‡πà‡∏≤‡∏¢ + 1 ‡∏Å‡∏•‡∏≤‡∏á + 1 ‡∏¢‡∏≤‡∏Å (‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å pool ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô)
  ST.missions = pickTieredMissions();
  renderQuestChips(ST.missions);

  updateHydroHUD(true);
}

export function cleanup(){
  const wrap = $('#hydroWrap'); if (wrap) wrap.style.display = 'none';
  const host = $('#questChips'); if (host) host.innerHTML = '';
  removeFireFx();
}

// dtSec ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å main.js ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå systems/hud ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
export function tick(state, systems, hud){
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stay_mid ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
  if (ST.zone === ZONE.MID){
    ST.stayMidTimer += 1;
  } else {
    ST.stayMidTimer = 0;
  }
  // ‡∏ï‡∏£‡∏ß‡∏à recover_mid (‡∏´‡∏•‡∏∏‡∏î‡∏à‡∏≤‡∏Å mid ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà mid = +1)
  if (ST.lastZone !== ST.zone){
    if (ST.lastZone !== ZONE.MID && ST.zone === ZONE.MID){
      ST.recoveredCount += 1;
      checkQuestProgress('recover_mid');
    }
    ST.lastZone = ST.zone;
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏ö‡∏ö timer/counter/flag
  checkQuestProgress('stay_mid');
  checkQuestProgress('right_water');
  checkQuestProgress('no_high_water'); // ‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î? ‡πÄ‡∏£‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î ‚Üí ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡πÉ‡∏ô cleanup ‡∏Å‡πá‡πÑ‡∏î‡πâ
  checkQuestProgress('no_sugar');

  updateHydroHUD();
}

// ---------- Spawning ----------
export function pickMeta(diff, gameState){
  // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡πÇ‡∏ú‡∏•‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å Mid ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ
  const wantFix = (ST.zone === ZONE.LOW) ? 0.72 : (ST.zone === ZONE.HIGH ? 0.40 : 0.55);
  const pickWater = Math.random() < wantFix;
  const pool = pickWater ? ITEMS.filter(i=>i.kind==='water') : ITEMS.filter(i=>i.kind==='sweet');
  const it = pool[(Math.random()*pool.length)|0];

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô/‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å zone ‡∏ì ‡∏ï‡∏≠‡∏ô spawn (onHit ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ)
  const meta = {
    id: it.id,
    kind: it.kind,
    char: it.char,
    life: (diff?.life||3000),
    // ‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô decoy ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞ (‡πÅ‡∏Ñ‡πà‡πÉ‡∏™‡πà‡∏Ñ‡∏•‡∏≤‡∏™‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏≥)
    decoy: (it.kind==='sweet' && ST.zone===ZONE.LOW) || (it.kind==='water' && ST.zone===ZONE.HIGH)
  };
  return meta;
}

// ---------- Hit logic ----------
export function onHit(meta, systems, gameState, hud){
  const z = ST.zone;

  if (meta.kind === 'water'){
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥
    const add = (z===ZONE.LOW) ? +14 : (z===ZONE.MID ? +8 : +0); // ‡πÉ‡∏ô High ‡∏Å‡∏î‡∏ô‡πâ‡∏≥ = ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏ó‡∏©
    ST.level = clamp01(ST.level + add);
    recalcZone();

    // Scoring & quests
    if (z === ZONE.HIGH){
      // ‡∏´‡πâ‡∏≤‡∏°‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≠‡∏ô High ‚Üí ‡πÇ‡∏î‡∏ô‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö
      ST.didWaterInHigh = true;
      systems.coach?.say?.(t('‡∏™‡∏π‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô!', 'Too high! Hold it!', ST.lang));
      flashHydro('bad');
      updateHydroHUD();
      missionFlagTouch('no_high_water'); // ‡∏à‡∏∞ fail flag
      return 'bad';
    } else {
      // ‡∏ô‡πâ‡∏≥‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞ (LOW/MID) ‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ñ‡∏ß‡∏™
      if (z === ZONE.LOW || z === ZONE.MID){
        ST.rightWaterHits += 1;
        systems.coach?.say?.(t('‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ‡∏î‡∏∑‡πà‡∏°‡∏û‡∏≠‡∏î‡∏µ!', 'Nice timing!', ST.lang));
        flashHydro('good');
        checkQuestProgress('right_water', true);
      }
      updateHydroHUD();
      return 'good';
    }
  }

  // kind === 'sweet'
  if (meta.kind === 'sweet'){
    ST.didSweet = true;

    if (z === ZONE.HIGH){
      // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏π‡∏á ‚Üí ‡∏≠‡∏ô‡∏∏‡πÇ‡∏•‡∏°‡∏Å‡∏î‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö) ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
      ST.level = clamp01(ST.level - 10);
      recalcZone();
      systems.coach?.say?.(t('‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏•‡∏á‡∏ô‡∏¥‡∏î ‡πÇ‡∏≠‡πÄ‡∏Ñ!', 'Okay, easing down!', ST.lang));
      flashHydro('ok');
      updateHydroHUD();
      return 'ok'; // ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (main.js ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å addCombo('bad'))
    } else if (z === ZONE.LOW){
      // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≥ ‚Üí ‡∏Å‡∏î‡∏´‡∏ß‡∏≤‡∏ô ‡∏ú‡∏¥‡∏î‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á
      systems.coach?.say?.(t('‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏∞', 'This won‚Äôt help now', ST.lang));
      flashHydro('bad');
      updateHydroHUD();
      return 'bad';
    } else { // MID
      // ‡∏Å‡∏•‡∏≤‡∏á ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ä‡πà‡∏ß‡∏¢ ‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏ö‡∏≤ ‡πÜ
      systems.coach?.say?.(t('‡∏¢‡∏±‡∏á‡πÇ‡∏≠‡πÄ‡∏Ñ ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏ö‡πà‡∏≠‡∏¢', 'Okay, but not too much', ST.lang));
      flashHydro('ok');
      updateHydroHUD();
      return 'ok';
    }
  }

  return 'ok';
}

// ---------- Quest logic & Badges ----------
function pickTieredMissions(){
  const pick = (arr)=> structuredClone(arr[(Math.random()*arr.length)|0]);

  const easy   = pick(QUEST_POOL.easy);
  const medium = pick(QUEST_POOL.medium);
  const hard   = pick(QUEST_POOL.hard);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° flag type (no_sugar/no_high_water) ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‚Äú‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î‚Äù
  return [easy, medium, hard].map(q=>{
    return { ...q, prog:0, passed:true }; // passed ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö flag (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡∏¥‡∏î)
  });
}

function findMission(id){ return ST.missions.find(m=>m.id===id); }

function checkQuestProgress(id, burst=false){
  const m = findMission(id); if (!m || ST.done.has(m.id)) return;

  if (m.id === 'stay_mid'){
    m.prog = Math.max(m.prog||0, ST.stayMidTimer|0);
    if (m.prog >= (m.need||999)) doneMission(m);
  } 
  else if (m.id === 'right_water'){
    m.prog = ST.rightWaterHits|0;
    if (m.prog >= (m.need||999)) doneMission(m);
  }
  else if (m.id === 'recover_mid'){
    m.prog = ST.recoveredCount|0;
    if (m.prog >= (m.need||999)) doneMission(m);
  }
  else if (m.id === 'no_high_water'){
    // flag: ‡∏ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤ ‚Üí mark failed (passed=false). ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ ‚Äú‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‚Äù
    if (ST.didWaterInHigh) m.passed = false;
    // ‡πÉ‡∏´‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î? ‡πÄ‡∏£‡∏≤‡πÇ‡∏ä‡∏ß‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0/1 ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ï‡∏≠‡∏ô endRun
  }
  else if (m.id === 'no_sugar'){
    if (ST.didSweet) m.passed = false;
  }

  renderQuestChips();
}

export function finalizeMissionsOnEnd(){
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö flag (no_sugar, no_high_water) ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ï‡∏≠‡∏ô‡∏à‡∏ö‡∏£‡∏≠‡∏ö
  for (const m of ST.missions){
    if (ST.done.has(m.id)) continue;
    if (m.id==='no_sugar' || m.id==='no_high_water'){
      if (m.passed){ m.prog = 1; doneMission(m); }
    }
  }
  renderQuestChips();
}

function doneMission(m){
  ST.done.add(m.id);
  // ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå + Badge
  toastOK( t('‡πÄ‡∏Ñ‡∏ß‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'Mission Complete!', ST.lang) + ' ' + (ST.lang==='EN'? m.labelEN : m.labelTH) );
  try{ document.getElementById('sfx-powerup')?.play(); }catch{}
  // Award badge (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö Progress)
  try{
    window.Progress?.awardBadge?.('hydration_'+m.id, { label: (ST.lang==='EN'? m.labelEN : m.labelTH) });
    window.Progress?.event?.('mission_done', { mode:'hydration', id:m.id });
  }catch{}
  renderQuestChips();
}

// ---------- HUD: quests chips ----------
function renderQuestChips(list){
  const host = $('#questChips'); if (!host) return;
  if (list) ST.missions = list;

  host.innerHTML = '';
  for (const m of ST.missions){
    const need = m.need||1;
    const cur  = Math.min(m.prog||0, need);
    const done = ST.done.has(m.id);
    const label = (ST.lang==='EN'? m.labelEN : m.labelTH) || m.id;

    const chip = document.createElement('div');
    chip.className = 'questChip' + (done?' done':'');
    chip.dataset.qid = m.id;
    chip.innerHTML = `
      <span class="qLabel">${label}</span>
      <span class="qProg">${cur}/${need}</span>
      <div class="qBar"><i style="width:${Math.min(100,(cur/need)*100)}%"></i></div>`;
    host.appendChild(chip);
  }
}

// ---------- Hydro HUD ----------
function updateHydroHUD(force=false){
  if (!ST.hydrateBarEl || !ST.hydrateLblEl) return;

  const w = Math.max(0, Math.min(100, ST.level|0));
  ST.hydrateBarEl.style.width = w + '%';

  // ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡πÇ‡∏ã‡∏ô + ‡πÑ‡∏ü‡∏•‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ High
  let bg = 'linear-gradient(90deg,#60a5fa,#34d399)'; // mid
  if (ST.zone === ZONE.LOW) bg = 'linear-gradient(90deg,#60a5fa,#f43f5e)';
  if (ST.zone === ZONE.HIGH) bg = 'linear-gradient(90deg,#fbbf24,#f97316)';
  ST.hydrateBarEl.style.background = bg;

  const label = (
    ST.zone===ZONE.LOW  ? t('‡∏ï‡πà‡∏≥', 'Low', ST.lang) :
    ST.zone===ZONE.MID  ? t('‡∏û‡∏≠‡∏î‡∏µ', 'Mid', ST.lang) :
                          t('‡∏™‡∏π‡∏á', 'High', ST.lang)
  ) + ` (${w}%)`;

  ST.hydrateLblEl.textContent = label;

  // ‡πÑ‡∏ü‡∏•‡∏∏‡∏Å‡∏ï‡∏≠‡∏ô High
  if (ST.zone === ZONE.HIGH) showFireFx(); else hideFireFx();
}

function ensureFireFx(){
  if (ST.fireFxEl) return;
  const el = document.createElement('div');
  el.className = 'hydro-firefx';
  el.style.cssText = `
    position:relative; width:100%; height:0; 
  `;
  const wrap = $('#hydroWrap');
  if (wrap) wrap.appendChild(el);
  ST.fireFxEl = el;
}
function showFireFx(){
  if (!ST.fireFxEl) return;
  if (!ST.fireFxEl.querySelector('.flame')){
    const f = document.createElement('div');
    f.className='flame';
    f.style.cssText = `
      position:absolute; right:0; top:-18px; width:22px; height:22px; 
      border-radius:50%; filter:blur(6px);
      background: radial-gradient(closest-side,#ffd54a,#ff6d00);
      animation: hydroFlame .5s ease-in-out infinite alternate;
    `;
    ST.fireFxEl.appendChild(f);
    injectFlameKF();
  }
}
function hideFireFx(){
  if (!ST.fireFxEl) return;
  const f = ST.fireFxEl.querySelector('.flame'); if (f) f.remove();
}
function removeFireFx(){
  if (ST.fireFxEl){ try{ ST.fireFxEl.remove(); }catch{} ST.fireFxEl=null; }
}
function injectFlameKF(){
  if (document.getElementById('kfHydroFlame')) return;
  const st = document.createElement('style');
  st.id = 'kfHydroFlame';
  st.textContent = `@keyframes hydroFlame { from{transform:translateY(0) scale(0.9)} to{transform:translateY(-3px) scale(1.1)} }`;
  document.head.appendChild(st);
}

function flashHydro(kind){
  const bar = ST.hydrateBarEl?.parentElement?.parentElement; // .bar > #hydroBar
  if (!bar) return;
  const cs = bar.style.transition;
  bar.style.transition = 'filter .12s ease, transform .12s ease';
  bar.style.filter = (kind==='bad')?'brightness(1.25) saturate(1.15) hue-rotate(20deg)':'brightness(1.25) saturate(1.1)';
  bar.style.transform = (kind==='bad')? 'scale(1.015)': 'scale(1.008)';
  setTimeout(()=>{ bar.style.filter=''; bar.style.transform=''; bar.style.transition=cs; }, 180);
}

// ---------- utils ----------
function clamp01(v){ return Math.max(0, Math.min(100, v)); }
function recalcZone(){
  const v = ST.level|0;
  ST.zone = (v <= Z_LIMIT.LOW) ? ZONE.LOW : (v >= Z_LIMIT.HIGH ? ZONE.HIGH : ZONE.MID);
}
function toastOK(msg){
  const el = document.createElement('div');
  el.style.cssText = `
    position:fixed; left:50%; top:18%; transform:translateX(-50%); 
    background:rgba(25,40,70,.88); border:1px solid #3b84f6; color:#dff1ff;
    padding:10px 14px; font:800 14px/1.3 ui-rounded,system-ui; border-radius:12px; 
    z-index:180; opacity:0; translate:0 6px; transition:opacity .18s, translate .18s;
    text-shadow:0 2px 8px #000a;
  `;
  el.textContent = msg;
  document.body.appendChild(el);
  requestAnimationFrame(()=>{ el.style.opacity='1'; el.style.translate='0 0'; });
  setTimeout(()=>{ el.style.opacity='0'; el.style.translate='0 -6px'; setTimeout(()=>{ try{el.remove();}catch{} }, 200); }, 900);
}

// ---------- Optional: ‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ power bar ‡∏Ç‡∏≠‡∏á hydration ----------
export const powers = {
  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° power bar ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  x2Target(){ /* not used in hydration now */ },
  freezeTarget(){ /* not used in hydration now */ },
  magnetNext(){ /* not used in hydration now */ },
};

// ---------- Hook ‡∏à‡∏≤‡∏Å main.js ‡∏ï‡∏≠‡∏ô‡∏à‡∏ö‡πÄ‡∏Å‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å) ----------
export function onEndGame(){
  finalizeMissionsOnEnd();
}

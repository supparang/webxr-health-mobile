// === Hero Health Academy ‚Äî modes/hydration.js ===
// ‡πÇ‡∏´‡∏°‡∏î "‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ô‡πâ‡∏≥": ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô OK ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏ô‡πâ‡∏≥ üíß" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô üç¨"
// - ‡∏°‡∏µ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (main.js ‡∏™‡πÅ‡∏õ‡∏ß‡∏ô‡πå) ‡πÅ‡∏ï‡πà‡∏°‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≠‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡∏µ‡πâ
// - ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå good/perfect/bad
// - ‡∏¢‡∏¥‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå Quests: 'hydro_tick', 'hydro_cross', 'hydro_click' ‡∏Ñ‡∏£‡∏ö
// - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HUD.setPowerTimers(power.timers) ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

import { Quests } from '/webxr-health-mobile/HeroHealth/game/core/quests.js';

// ----------------- ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏´‡∏°‡∏î -----------------
const CFG = {
  // ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ "‡∏û‡∏≠‡∏î‡∏µ"
  OK_MIN: 42,
  OK_MAX: 58,
  // ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  START: 50,
  // ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô)
  DECAY_PER_SEC: 2.2,
  // ‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏î (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î)
  WATER_GAIN: 9,   // ‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö
  SWEET_DROP: 7,   // ‡∏Å‡∏î‡∏´‡∏ß‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠ HIGH
  // ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏´‡πâ "perfect"
  PERFECT_MARGIN: 4, // ‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡πÇ‡∏ã‡∏ô (‡πÉ‡∏Å‡∏•‡πâ 50) ‡πÉ‡∏ô ¬±4
  // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Golden
  GOLDEN_CHANCE: 0.08, // 8%
};

// ----------------- ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î -----------------
let _prevZone = null;
let _lastTickMS = 0;

// ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ -> ‡πÇ‡∏ã‡∏ô
function zoneOf(level, cfg){
  if (level < cfg.OK_MIN) return 'LOW';
  if (level > cfg.OK_MAX) return 'HIGH';
  return 'OK';
}

// ‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô [0..100]
function clamp01(x){ return Math.max(0, Math.min(100, x)); }

// -------------- Exported API (‡∏ó‡∏µ‡πà main.js ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å) --------------

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô state ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á HUD ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
export function init(state, hud /* , diff */){
  state.hyd     = CFG.START;
  state.hydMin  = CFG.OK_MIN;
  state.hydMax  = CFG.OK_MAX;
  state.hydVel  = 0;            // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï (‡πÄ‡∏ä‡πà‡∏ô inertial)
  state.hydCfg  = { ...CFG };   // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô

  _prevZone = zoneOf(state.hyd, state.hydCfg);

  // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ö/ UI ‡πÇ‡∏´‡∏°‡∏î‡∏ô‡πâ‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  hud.showHydration?.();

  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
  Quests.event('hydro_tick', { zone: _prevZone });

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Power timers ‡∏ö‡∏ô HUD
  hud.setPowerTimers?.(state?.power?.timers || {});
}

// ‡∏à‡∏ö/‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î
export function cleanup(state, hud){
  hud.hideHydration?.();
  _prevZone = null;
  _lastTickMS = 0;
}

// main.js ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠ "‡πÄ‡∏°‡∏ó‡∏≤‡∏î‡∏≤‡∏ï‡πâ‡∏≤" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô 1 ‡∏ä‡∏¥‡πâ‡∏ô
// ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "‡∏ô‡πâ‡∏≥ üíß" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏´‡∏ß‡∏≤‡∏ô üç¨" ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î meta ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
export function pickMeta(/* dyn, state */){
  // ‡∏™‡∏∏‡πà‡∏°‡∏ä‡∏ô‡∏¥‡∏î
  const isWater = Math.random() < 0.65; // ‡∏ô‡πâ‡∏≥‡∏≠‡∏≠‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤
  const kind = isWater ? 'water' : 'sweet';

  // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≠‡∏á
  const golden = Math.random() < CFG.GOLDEN_CHANCE;

  return {
    id: kind,
    char: isWater ? 'üíß' : 'üç¨',
    label: isWater ? 'water' : 'sweet',
    aria: isWater ? 'drink water' : 'eat sweet treat',
    life: 2600,           // ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡πà‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞
    golden,               // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå golden
    // meta.good ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≠‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å (‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡πÇ‡∏ã‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å)
    // ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á groupId ‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå count_group ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    groupId: isWater ? 'water' : 'sweet',
  };
}

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ
// - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥
// - ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå good/perfect/bad
// - ‡∏¢‡∏¥‡∏á Quests.event('hydro_click', { zoneBefore, kind })
// - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 'good'|'perfect'|'bad'|'ok' ‡πÉ‡∏´‡πâ main.js ‡∏ô‡∏≥‡πÑ‡∏õ‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå
export function onHit(meta, sys, state, hud){
  const { score, sfx, power, coach } = sys || {};
  const cfg = state.hydCfg || CFG;

  const before = state.hyd;
  const zoneBefore = zoneOf(before, cfg);
  const kind = meta.id === 'water' ? 'water' : 'sweet';

  // ‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å
  let after = before;
  if (kind === 'water'){
    after = before + cfg.WATER_GAIN;
  } else { // sweet
    // ‡∏´‡∏ß‡∏≤‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢ "‡∏•‡∏î" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô HIGH (‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≤‡∏•‡∏≤‡∏ô‡∏ã‡πå), ‡∏ñ‡πâ‡∏≤ LOW ‡∏≠‡∏≤‡∏à‡∏¢‡∏¥‡πà‡∏á‡∏ï‡πà‡∏≥‡∏•‡∏á = ‡πÑ‡∏°‡πà‡∏î‡∏µ
    after = before - cfg.SWEET_DROP;
  }
  after = clamp01(after);

  // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô good/perfect/bad
  const zAfter = zoneOf(after, cfg);
  let result = 'ok';
  let goodLogic = false;

  // ‡∏Å‡∏é‡∏á‡πà‡∏≤‡∏¢ ‡πÜ:
  // - LOW -> "‡∏ô‡πâ‡∏≥" = ‡∏î‡∏µ, ‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á OK (‡πÉ‡∏Å‡∏•‡πâ 50) ‡πÅ‡∏•‡∏∞ |after-50| <= PERFECT_MARGIN => perfect
  // - HIGH -> "‡∏´‡∏ß‡∏≤‡∏ô" = ‡∏î‡∏µ (‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î), ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç perfect ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
  // - OK -> "‡∏ô‡πâ‡∏≥" ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏¢‡∏±‡∏á‡∏î‡∏µ (‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢), "‡∏´‡∏ß‡∏≤‡∏ô" ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏î‡∏µ (‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ï‡πà‡∏≥)
  // - ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏ã‡∏ô OK ‡πÅ‡∏ö‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á => bad
  if (zoneBefore === 'LOW'){
    if (kind === 'water'){
      goodLogic = true;
      result = (Math.abs(after - 50) <= cfg.PERFECT_MARGIN) ? 'perfect' : 'good';
    } else {
      // LOW + sweet => ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏•‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
      result = 'bad';
    }
  } else if (zoneBefore === 'HIGH'){
    if (kind === 'sweet'){
      goodLogic = true;
      result = (Math.abs(after - 50) <= cfg.PERFECT_MARGIN) ? 'perfect' : 'good';
    } else {
      // HIGH + water => ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å
      result = 'bad';
    }
  } else { // zoneBefore === 'OK'
    if (kind === 'water'){
      // ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏¢‡∏±‡∏á‡∏û‡∏≠‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
      goodLogic = zAfter !== 'HIGH'; // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∞‡∏•‡∏∏ HIGH ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ bad
      result = goodLogic ? ((Math.abs(after - 50) <= cfg.PERFECT_MARGIN) ? 'perfect' : 'good') : 'bad';
    } else { // sweet ‡πÉ‡∏ô OK ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏û‡∏≤‡πÑ‡∏õ LOW (‡πÅ‡∏ï‡πà‡∏ô‡πâ‡∏≠‡∏¢) => ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà ok ‡∏´‡∏£‡∏∑‡∏≠ bad
      goodLogic = (zAfter === 'OK'); // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà OK ‡∏Å‡πá‡∏û‡∏≠‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
      result = goodLogic ? 'ok' : 'bad';
    }
  }

  // Golden ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏†‡∏±‡∏¢/‡∏ö‡∏π‡∏™‡∏ï‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢: ‡∏ñ‡πâ‡∏≤ golden ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πà‡∏î‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö
  if (meta.golden){
    if (result === 'bad') result = 'ok';
    else if (result === 'good') result = 'perfect';
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏à‡∏£‡∏¥‡∏á
  state.hyd = after;

  // ‡∏¢‡∏¥‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Quests (‡πÅ‡∏•‡∏∞ Progress ‡∏ñ‡∏π‡∏Å main.js ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
  Quests.event('hydro_click', { zoneBefore, kind });

  // ‡πÅ‡∏à‡πâ‡∏á HUD Power timers ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö freeze/spawn ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏≠‡∏¢‡∏π‡πà)
  hud.setPowerTimers?.(power?.timers || {});

  // ‡πÇ‡∏Ñ‡πâ‡∏ä‡πÄ‡∏ö‡∏≤ ‡πÜ (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
  try {
    if (result === 'perfect') coach?.onPerfect?.();
    else if (result === 'good') coach?.onGood?.();
    else if (result === 'bad') coach?.onBad?.();
  } catch {}

  // ‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ main.js
  return result;
}

// main.js ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
export function tick(state, sys, hud){
  const { power } = sys || {};
  const cfg = state.hydCfg || CFG;

  const now = performance?.now?.() || Date.now();
  if (!_lastTickMS) _lastTickMS = now;
  const dt = Math.min(1200, now - _lastTickMS); // ms
  _lastTickMS = now;

  // ‡∏•‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
  const drop = cfg.DECAY_PER_SEC * (dt/1000);
  state.hyd = clamp01(state.hyd - drop);

  // ‡πÇ‡∏ã‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
  const zNow = zoneOf(state.hyd, cfg);

  // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏ã‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏¢‡∏¥‡∏á hydro_cross
  if (_prevZone && _prevZone !== zNow){
    Quests.event('hydro_cross', { from: _prevZone, to: zNow });
  }
  _prevZone = zNow;

  // ‡∏¢‡∏¥‡∏á hydro_tick ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô)
  Quests.event('hydro_tick', { zone: zNow });

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Power timers ‡∏ó‡∏µ‡πà HUD
  hud.setPowerTimers?.(power?.timers || {});
}

// (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hydration ‡πÅ‡∏ï‡πà‡∏Ñ‡∏á API ‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á)
export const fx = {
  onSpawn(el /*, state */){
    // ‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÅ‡∏£‡∏á‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏•‡πá‡∏Å ‡πÜ
    el.style.transition = 'transform .18s ease, filter .15s';
    el.addEventListener('pointerenter', ()=>{ el.style.transform += ' translateZ(10px) scale(1.06)'; }, {passive:true});
    el.addEventListener('pointerleave', ()=>{ el.style.transform = el.style.transform.replace(' translateZ(10px) scale(1.06)',''); }, {passive:true});
  },
  onHit(x, y /* , meta, state */){
    // ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÅ‡∏ï‡∏Å/‡∏™‡∏õ‡∏≤‡∏£‡πå‡∏Ñ ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≤‡∏Å main.js ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  }
};

// (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡πÉ‡∏´‡πâ main.js ‡∏´‡∏£‡∏∑‡∏≠ UI ‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ power ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
export function getPowerDurations(){
  return { x2: 6, freeze: 3, magnet: 2 };
}

// === Hero Health Academy ‚Äî game/modes/hydration.js (Hydration Bar + Flames + Rules) ===
export const name = 'hydration';

/**
 * ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏´‡∏•‡∏±‡∏Å (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î):
 * - ‡∏ñ‡πâ‡∏≤ "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏™‡∏π‡∏á" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤" ‚Üí ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (return 'bad')
 * - ‡∏ñ‡πâ‡∏≤ "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏™‡∏π‡∏á" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô" ‚Üí ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (return 'good')
 * - ‡∏ñ‡πâ‡∏≤ "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡πà‡∏≥" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô" ‚Üí ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (return 'bad')
 * - ‡∏ñ‡πâ‡∏≤ "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡πà‡∏≥" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤" ‚Üí ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏ñ‡πâ‡∏≤‡∏î‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏≠‡∏î‡∏µ‡πÉ‡∏´‡πâ 'perfect')
 * - ‡∏ä‡πà‡∏ß‡∏á "‡∏û‡∏≠‡∏î‡∏µ" (‡∏Å‡∏•‡∏≤‡∏á) ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤: 'good' / ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô: 'ok' (‡∏ñ‡πâ‡∏≤‡∏î‡∏±‡∏ô‡∏´‡∏•‡∏∏‡∏î‡πÇ‡∏ã‡∏ô ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô 'bad')
 *
 * ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ú‡∏•‡πà-‡∏´‡∏≤‡∏¢‡πÄ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ TTL ‡∏à‡∏≤‡∏Å main.js (life)
 */

// ---------- Zones / thresholds ----------
const Z = { LOW: 0, MID: 1, HIGH: 2 };
const LOW_MAX  = 40;   // < 40% = ‡∏ï‡πà‡∏≥
const MID_MAX  = 70;   // 40‚Äì70% = ‡∏û‡∏≠‡∏î‡∏µ
// > 70% = ‡∏™‡∏π‡∏á

// ---------- Items pool ----------
const ITEMS = [
  // ‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤ / ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•
  { id:'water',     kind:'water',  icon:'üíß', labelTH:'‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤',  labelEN:'Water' },
  { id:'bottle',    kind:'water',  icon:'ü´ó', labelTH:'‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°',    labelEN:'Water Bottle' },
  { id:'tea',       kind:'water',  icon:'üçµ', labelTH:'‡∏ä‡∏≤‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô',  labelEN:'Unsweet Tea' },
  { id:'coffee',    kind:'water',  icon:'‚òï',  labelTH:'‡∏Å‡∏≤‡πÅ‡∏ü‡∏î‡∏≥',     labelEN:'Black Coffee' },

  // ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô / ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡πÉ‡∏´‡πâ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô
  { id:'soda',      kind:'sweet',  icon:'ü•§', labelTH:'‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏î‡∏•‡∏°',   labelEN:'Soda' },
  { id:'juice',     kind:'sweet',  icon:'üßÉ', labelTH:'‡∏ô‡πâ‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ',   labelEN:'Juice' },
  { id:'milkshake', kind:'sweet',  icon:'ü•§', labelTH:'‡∏°‡∏¥‡∏•‡∏Ñ‡πå‡πÄ‡∏ä‡∏Ñ',   labelEN:'Milkshake' },
  { id:'energy',    kind:'sweet',  icon:'‚ö°',  labelTH:'‡πÄ‡∏≠‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏à‡∏µ‡πâ', labelEN:'Energy Drink' },
];

// ---------- Play state ----------
const ST = {
  lang: 'TH',
  level: 55,             // 0‚Äì100 (%)
  lastZone: Z.MID,
  difficulty: 'Normal',
  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î‡∏ï‡∏≤‡∏° diff)
  delta: {
    waterLow:  +10,
    waterMid:  +6,
    waterHigh: +4,       // ‡∏™‡∏π‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ô‡πâ‡∏≥ ‡∏Å‡πá‡∏¢‡∏±‡∏á + ‡πÄ‡∏û‡∏¥‡πà‡∏° (‡πÅ‡∏•‡∏∞‡πÇ‡∏î‡∏ô‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
    sweetLow:  +3,
    sweetMid:  +4,
    sweetHigh: +2
  }
};

// ---------- Utils ----------
const clamp = (v, a, b)=> Math.max(a, Math.min(b, v));
function zoneOf(pct){
  if (pct < LOW_MAX) return Z.LOW;
  if (pct <= MID_MAX) return Z.MID;
  return Z.HIGH;
}
function t(th, en, lang){ return lang==='EN' ? en : th; }

// ---------- HUD (Hydration Bar) ----------
function ensureFlameHost(){
  const wrap = document.getElementById('hydroWrap');
  const barHost = wrap?.querySelector('.bar');
  if (!barHost) return;
  if (!barHost.classList.contains('hydroBarHost')){
    barHost.classList.add('hydroBarHost');
  }
  if (!wrap.querySelector('.hydroFlame')){
    const flame = document.createElement('div');
    flame.className = 'hydroFlame';
    barHost.appendChild(flame);
  }
}
function updateHydroBar(){
  const wrap = document.getElementById('hydroWrap');
  const bar  = document.getElementById('hydroBar');
  const lab  = document.getElementById('hydroLabel');
  if (!wrap || !bar) return;

  const lvl = Math.round(ST.level);
  const z = zoneOf(lvl);

  bar.style.width = `${lvl}%`;

  wrap.classList.remove('hydro-low','hydro-mid','hydro-high');
  if (z===Z.LOW)  wrap.classList.add('hydro-low');
  if (z===Z.MID)  wrap.classList.add('hydro-mid');
  if (z===Z.HIGH) wrap.classList.add('hydro-high');

  if (lab){
    lab.textContent = (ST.lang==='EN')
      ? (z===Z.LOW?'Low': z===Z.MID?'Optimal':'High')
      : (z===Z.LOW?'‡∏ï‡πà‡∏≥': z===Z.MID?'‡∏û‡∏≠‡∏î‡∏µ':'‡∏™‡∏π‡∏á');
  }
}

// ---------- Exported API ----------
export function init(gameState, hud, diff){
  ST.lang = (localStorage.getItem('hha_lang')||'TH');
  ST.difficulty = gameState?.difficulty || 'Normal';

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏°‡∏≤‡∏Å-‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
  ST.level = (ST.difficulty==='Easy') ? 55 : (ST.difficulty==='Hard') ? 50 : 53;
  ST.lastZone = zoneOf(ST.level);

  // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏•‡∏ï‡πâ‡∏≤‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
  const scale = (ST.difficulty==='Hard') ? 1.15 : (ST.difficulty==='Easy') ? 0.9 : 1.0;
  for (const k of Object.keys(ST.delta)) ST.delta[k] = Math.round(ST.delta[k]*scale);

  // ‡πÇ‡∏ä‡∏ß‡πå HUD ‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥ + ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÑ‡∏ü
  const wrap = document.getElementById('hydroWrap');
  if (wrap) wrap.style.display = 'block';
  ensureFlameHost();
  updateHydroBar();

  // ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≤‡∏¢ "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢" ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ
  const tw = document.getElementById('targetWrap');
  if (tw) tw.style.display = 'none';
}

export function cleanup(){
  // ‡πÑ‡∏°‡πà‡∏ã‡πà‡∏≠‡∏ô hydroWrap ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡πà‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏î‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
  // const wrap = document.getElementById('hydroWrap');
  // if (wrap) wrap.style.display = 'none';
}

export function tick(state, systems /*, hud */){
  // ‡∏î‡∏£‡∏¥‡∏ü‡∏ï‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÇ‡∏ã‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ä‡πâ‡∏≤‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏°‡∏•‡∏∑‡πà‡∏ô
  const z = zoneOf(ST.level);
  if (z===Z.LOW) ST.level = clamp(ST.level + 0.6, 0, 100);
  if (z===Z.HIGH) ST.level = clamp(ST.level - 0.6, 0, 100);

  updateHydroBar();
}

// ‡πÉ‡∏´‡πâ main.js ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏≠‡∏ô‡∏™‡πÑ‡∏õ‡∏ß‡πå‡∏ô 1 ‡∏ä‡∏¥‡πâ‡∏ô
export function pickMeta(diff /*, gameState */){
  const z = zoneOf(ST.level);
  // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏∏‡πà‡∏°: ‡∏ñ‡πâ‡∏≤ "‡∏ï‡πà‡∏≥" ‡πÉ‡∏´‡πâ‡πÄ‡∏à‡∏≠‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢ / ‡∏ñ‡πâ‡∏≤ "‡∏™‡∏π‡∏á" ‡πÉ‡∏´‡πâ‡πÄ‡∏à‡∏≠‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢
  const biasWater = (z===Z.LOW) ? 0.7 : (z===Z.MID) ? 0.5 : 0.35;
  const pickWater = Math.random() < biasWater;

  const pool = ITEMS.filter(x => (pickWater ? x.kind==='water' : x.kind==='sweet'));
  const it = pool[(Math.random()*pool.length)|0];

  // meta.good ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI ‡∏™‡∏µ/‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (main.js ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö)
  const willBeGood =
    (z===Z.LOW && it.kind==='water') ||
    (z===Z.MID && it.kind==='water') ||
    (z===Z.HIGH && it.kind==='sweet');

  return {
    id: it.id,
    char: it.icon,
    kind: it.kind,       // 'water' | 'sweet'
    good: willBeGood,
    life: diff?.life || 2800
  };
}

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å 1 ‡∏ä‡∏¥‡πâ‡∏ô
export function onHit(meta, systems /*, gameState, hud */){
  const zBefore = zoneOf(ST.level);
  let res = 'ok';

  if (meta.kind === 'water'){
    // ‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏ã‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å
    if (zBefore === Z.HIGH){
      // ‡∏™‡∏π‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ô‡πâ‡∏≥ ‚Äî ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö
      ST.level = clamp(ST.level + ST.delta.waterHigh, 0, 100);
      systems.coach?.say?.(t('‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß!', 'Already high!', ST.lang));
      res = 'bad';
    } else if (zBefore === Z.LOW){
      ST.level = clamp(ST.level + ST.delta.waterLow, 0, 100);
      const zAfter = zoneOf(ST.level);
      res = (zAfter===Z.MID) ? 'perfect' : 'good';
      systems.coach?.say?.(t('‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô', 'Nice! Hydrating up', ST.lang));
    } else { // MID
      ST.level = clamp(ST.level + ST.delta.waterMid, 0, 100);
      const zAfter = zoneOf(ST.level);
      res = (zAfter===Z.MID) ? 'good' : 'ok';
      if (zAfter!==Z.MID) systems.coach?.say?.(t('‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏ô!', 'Careful not to overfill!', ST.lang));
    }
  } else if (meta.kind === 'sweet'){
    if (zBefore === Z.HIGH){
      // ‡∏™‡∏π‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô ‚Äî ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞ "‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö" ‚Üí ‡∏™‡πà‡∏á 'good'
      ST.level = clamp(ST.level + ST.delta.sweetHigh, 0, 100);
      systems.coach?.say?.(t('‡πÇ‡∏≠‡πÄ‡∏Ñ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö', 'Okay, combo stays', ST.lang));
      res = 'good';
    } else if (zBefore === Z.LOW){
      // ‡∏ï‡πà‡∏≥‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô ‚Äî ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö
      ST.level = clamp(ST.level + ST.delta.sweetLow, 0, 100);
      systems.coach?.say?.(t('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô‡∏ô‡∏∞', 'Not sugary now', ST.lang));
      res = 'bad';
    } else { // MID
      ST.level = clamp(ST.level + ST.delta.sweetMid, 0, 100);
      const zAfter = zoneOf(ST.level);
      // ‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏î‡πÑ‡∏õ HIGH ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏î‡∏µ
      res = (zAfter===Z.MID) ? 'ok' : 'bad';
      if (res==='bad') systems.coach?.say?.(t('‡πÄ‡∏Å‡∏¥‡∏ô‡∏û‡∏≠‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß!', 'Now it‚Äôs too much!', ST.lang));
    }
  } else {
    res = 'ok';
  }

  updateHydroBar();
  return res;
}

// (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‡πÉ‡∏´‡πâ main.js ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏û‡∏•‡∏±‡∏á (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡πÉ‡∏ä‡πâ power-ups ‡∏£‡πà‡∏ß‡∏°)
// ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÇ‡∏´‡∏°‡∏î hydration ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏û‡∏•‡∏±‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏≠‡∏∞‡πÑ‡∏£
export function getPowerDurations(){
  return { x2:0, freeze:0, magnet:0 };
}

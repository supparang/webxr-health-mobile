// === Hero Health Academy ‚Äî game/modes/hydration.js (Level logic + Mini-Quest signals) ===
export const name = 'hydration';

/*
‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
- ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ "‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô" ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤" => ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'bad')
- ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ "‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô" => ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô + ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'good')
- ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ "‡∏ï‡πà‡∏≥" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô" => ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'bad')
- ‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥: ‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤ 'good', ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô 'ok' (‡πÑ‡∏°‡πà‡πÅ‡∏£‡∏á)
*/

const ST = {
  lang: 'TH',
  level: 50,         // 0..100
  lastZone: 'OK',    // 'LOW' | 'OK' | 'HIGH'
  initDone: false
};

// ‡πÇ‡∏ã‡∏ô
const Z = { LOW: 'LOW', OK: 'OK', HIGH: 'HIGH' };
const ZONE = {
  LOW_MAX: 39,      // <40 ‡∏ï‡πà‡∏≥
  HIGH_MIN: 61      // >60 ‡∏™‡∏π‡∏á
};

// ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°
const ITEMS = [
  { id:'water',  kind:'water',  icon:'üíß', labelTH:'‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤',  labelEN:'Water',  dLevel:+12 },
  { id:'sweet',  kind:'sweet',  icon:'üßÉ', labelTH:'‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô',  labelEN:'Sweet',  dLevel:-10 },
  // ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏≤/‡∏Å‡∏≤‡πÅ‡∏ü ‡∏Å‡πá‡∏ó‡∏≥‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏´‡∏•‡∏±‡∏Å ‡πÜ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ï‡∏≤‡∏° requirement ‡∏Å‡πà‡∏≠‡∏ô
];

// ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤
const t = (th,en,lang)=> (lang==='EN'? en : th);

// ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÇ‡∏ã‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö
function zoneFor(level){
  if (level <= ZONE.LOW_MAX) return Z.LOW;
  if (level >= ZONE.HIGH_MIN) return Z.HIGH;
  return Z.OK;
}

// HUD
function showHydroHUD(show){
  const w = document.getElementById('hydroWrap');
  if (w) w.style.display = show?'block':'none';
}
function updateHydroHUD(){
  const bar = document.getElementById('hydroBar');
  const lab = document.getElementById('hydroLabel');
  const lang = ST.lang;
  const z = zoneFor(ST.level);
  if (bar){
    const pct = Math.max(0, Math.min(100, ST.level|0));
    bar.style.width = pct+'%';
  }
  if (lab){
    if (z===Z.LOW)  lab.textContent = t('‡∏ï‡πà‡∏≥', 'Low', lang);
    if (z===Z.OK)   lab.textContent = t('‡∏û‡∏≠‡∏î‡∏µ', 'Ideal', lang);
    if (z===Z.HIGH) lab.textContent = t('‡∏™‡∏π‡∏á', 'High', lang);
  }
}

// API ‡∏ó‡∏µ‡πà main.js ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
export function init(gameState, hud, diff){
  ST.lang = (localStorage.getItem('hha_lang')||'TH');
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°
  ST.level = 50;
  ST.lastZone = zoneFor(ST.level);
  ST.initDone = true;
  showHydroHUD(true);
  updateHydroHUD();
}

export function cleanup(){
  showHydroHUD(false);
}

// ‡πÉ‡∏´‡πâ main.js ‡πÉ‡∏ä‡πâ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏õ‡∏≠‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏° TTL (‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏≤‡∏¢‡πÄ‡∏≠‡∏á)
export function pickMeta(diff, gameState){
  // ‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥: ‡∏ñ‡πâ‡∏≤‡∏™‡∏π‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏à‡∏≠‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô; ‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≥ ‡πÉ‡∏´‡πâ‡πÄ‡∏à‡∏≠‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
  const z = zoneFor(ST.level);
  let pool;
  if (z===Z.HIGH){
    pool = [ ...weight('sweet', 4), ...weight('water', 1) ];
  } else if (z===Z.LOW){
    pool = [ ...weight('water', 4), ...weight('sweet', 1) ];
  } else {
    pool = [ ...weight('water', 3), ...weight('sweet', 2) ];
  }
  const pick = pool[(Math.random()*pool.length)|0];
  const it = ITEMS.find(x=>x.kind===pick) || ITEMS[0];

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤ "‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏î‡∏µ‡πÑ‡∏´‡∏°" ‡∏ï‡∏≤‡∏°‡∏Å‡∏é
  const good = judgeGoodness(it.kind, z);

  return {
    id: it.id,
    char: it.icon,
    kind: it.kind,
    good,                      // ‡∏ú‡∏•‡∏î‡∏µ/‡πÑ‡∏°‡πà‡∏î‡∏µ (‡πÉ‡∏´‡πâ main ‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏ï‡∏≤‡∏° result ‡∏ó‡∏µ‡πà onHit ‡∏Ñ‡∏∑‡∏ô)
    life: diff?.life || 3000   // TTL
  };
}

// ‡∏Å‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
export function onHit(meta, systems, gameState, hud){
  const z = zoneFor(ST.level);
  const before = ST.level|0;

  // ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏î
  const delta = levelDelta(meta.kind, z);
  ST.level = clamp(ST.level + delta, 0, 100);
  const after = ST.level|0;

  // ‡πÅ‡∏à‡πâ‡∏á HUD
  updateHydroHUD();

  // ‡πÅ‡∏à‡πâ‡∏á coach ‡∏ï‡∏≤‡∏°‡∏ú‡∏•
  let res = 'ok';
  if (z===Z.HIGH){
    if (meta.kind==='water'){ // ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      systems.coach?.say?.(t('‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡∏≠‡∏∞‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!', 'You\'re overhydrated!', ST.lang));
      res = 'bad';
    } else if (meta.kind==='sweet'){
      systems.coach?.say?.(t('‡∏î‡∏µ! ‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≤‡∏•‡∏≤‡∏ô‡∏ã‡πå', 'Nice! That helps balance.', ST.lang));
      res = 'good'; // ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (main ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° combo ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô good/perfect)
    }
  } else if (z===Z.LOW){
    if (meta.kind==='sweet'){
      systems.coach?.say?.(t('‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏ß‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞', 'You\'re low‚Äîskip sugary drinks now.', ST.lang));
      res = 'bad'; // ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö
    } else if (meta.kind==='water'){
      systems.coach?.say?.(t('‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥', 'Good! Hydrate up.', ST.lang));
      res = 'good';
    }
  } else {
    // ‡πÇ‡∏ã‡∏ô OK: ‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏î‡∏µ, ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô‡∏û‡∏≠‡πÑ‡∏î‡πâ (ok)
    res = (meta.kind==='water') ? 'good' : 'ok';
  }

  // ‡∏¢‡∏¥‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mini Quests ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ hydration
  try{
    // hit ‡∏ä‡πá‡∏≠‡∏ï‡∏ô‡∏µ‡πâ
    window?.HHA_QUESTS?.event?.('hydro_click', {
      kind: meta.kind,           // 'water'|'sweet'
      zoneBefore: zoneFor(before),
      zoneAfter:  zoneFor(after),
      delta
    });
  }catch{}

  return res;
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ã‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™)
export function tick(state, systems, hud){
  if (!ST.initDone) return;

  // ‡πÅ‡∏à‡πâ‡∏á‡πÇ‡∏ã‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏¥‡∏ô‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏™
  const z = zoneFor(ST.level);
  try{
    window?.HHA_QUESTS?.event?.('hydro_tick', {
      level: ST.level|0,
      zone: z,                   // 'LOW'|'OK'|'HIGH'
    });
  }catch{}

  // ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÇ‡∏ã‡∏ô
  if (ST.lastZone !== z){
    const from = ST.lastZone; ST.lastZone = z;
    try{
      window?.HHA_QUESTS?.event?.('hydro_cross', { from, to:z });
    }catch{}
  }
}

// ---------- Utils ----------
function clamp(x,min,max){ return x<min?min:x>max?max:x; }
function weight(kind, n){ return new Array(n).fill(kind); }

// ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏µ/‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô pickMeta ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢ main ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)
function judgeGoodness(kind, zone){
  if (zone===Z.HIGH){
    if (kind==='water') return false;
    if (kind==='sweet') return true;
  } else if (zone===Z.LOW){
    if (kind==='sweet') return false;
    if (kind==='water') return true;
  } else {
    return kind==='water'; // OK zone: ‡∏ô‡πâ‡∏≥‡∏î‡∏µ, ‡∏´‡∏ß‡∏≤‡∏ô neutral (‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏ô onHit ‡πÄ‡∏õ‡πá‡∏ô 'ok')
  }
  return false;
}

// ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡πÇ‡∏ã‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
function levelDelta(kind, zone){
  if (kind==='water'){
    // ‡∏ñ‡πâ‡∏≤‡∏™‡∏π‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ö‡∏ß‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á
    if (zone===Z.HIGH) return +6;
    if (zone===Z.LOW)  return +14;
    return +10;
  }
  if (kind==='sweet'){
    // ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏á, ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≥‡∏¢‡∏¥‡πà‡∏á‡πÅ‡∏¢‡πà
    if (zone===Z.HIGH) return -10;
    if (zone===Z.LOW)  return -6;
    return -4;
  }
  return 0;
}

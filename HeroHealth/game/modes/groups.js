// game/modes/groups.js
// ‡πÇ‡∏´‡∏°‡∏î: ‡∏à‡∏≤‡∏ô 5 ‡∏´‡∏°‡∏π‡πà + ‡πÄ‡∏Ñ‡∏ß‡∏™ 45s + Power-up Dual Target

/* =========================
   1) ‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å / ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
   ========================= */
const GROUPS = {
  grain:   { labelTH:'‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä',  labelEN:'Grain',   em:['üçö','üçû','ü•ñ','ü•Ø','üçú'] },
  veg:     { labelTH:'‡∏ú‡∏±‡∏Å',     labelEN:'Veg',     em:['ü•¶','ü•ï','ü•¨','üåΩ','ü´ë'] },
  protein: { labelTH:'‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô',  labelEN:'Protein', em:['ü•©','üçó','üçñ','ü•ö','üêü'] },
  fruit:   { labelTH:'‡∏ú‡∏•‡πÑ‡∏°‡πâ',   labelEN:'Fruit',   em:['üçé','üçå','üçá','üçì','üçä'] },
  dairy:   { labelTH:'‡∏ô‡∏°',      labelEN:'Dairy',   em:['ü•õ','üßÄ','üç¶','üç®'] }
};
const GROUP_KEYS = Object.keys(GROUPS);
const pick = (arr)=>arr[(Math.random()*arr.length)|0];

// dual target power-up settings
const DUAL_DURATION = { Easy:10, Normal:12, Hard:14 }; // ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
// chance to spawn power-up ‡∏ï‡πà‡∏≠‡∏™‡πÅ‡∏õ‡∏ß‡∏ô‡πå 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
const POWERUP_RATE  = { Easy:0.04, Normal:0.05, Hard:0.06 };

/* =========================
   2) Utils
   ========================= */
function labelOf(key, lang='TH'){
  const g = GROUPS[key]; if(!g) return '‚Äî';
  return lang==='EN' ? g.labelEN : g.labelTH;
}
function setTargetHUD(state, hud){
  const lang = state.lang || 'TH';
  const gctx = state.ctx.groups;
  const keys = [gctx.target1, gctx.target2].filter(Boolean);
  const text = keys.map(k=>labelOf(k, lang)).join(' + ');
  if (hud?.showTarget) hud.showTarget();
  if (hud?.setTargetBadge) hud.setTargetBadge(text || '‚Äî');
  else {
    const b = document.getElementById('targetBadge'); if (b) b.textContent = text || '‚Äî';
    const w = document.getElementById('targetWrap');  if (w) w.style.display = 'block';
  }
}
function setMissionLine(text){
  const el = document.getElementById('missionLine');
  if (!el) return;
  el.style.display = text ? 'block' : 'none';
  if (text) el.textContent = text;
}
function rotateSingleTarget(except){
  const pool = GROUP_KEYS.filter(k=>k!==except);
  return pick(pool);
}
function targetChanceByDiff(diffKey){
  if(diffKey==='Easy')   return 0.45;
  if(diffKey==='Hard')   return 0.65;
  return 0.55;
}

/* =========================
   3) Public API
   ========================= */
export function init(state, hud, diff){
  state.ctx = state.ctx || {};
  // groups context
  state.ctx.groups = {
    target1: pick(GROUP_KEYS),
    target2: null,            // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ power-up (dual target)
    targetHits: 0,            // ‡∏ô‡∏±‡∏ö‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏õ‡πâ‡∏≤
    dualRemain: 0,            // ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà dual ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    // mission (45s window)
    mission: newMissionWindow(state)
  };
  // HUD
  setTargetHUD(state, hud);
  // ‡πÅ‡∏™‡∏î‡∏á mission line
  updateMissionHUD(state);
}

export function tick(state, sys, hud){
  const { fx, sfx, coach } = sys || {};
  const gctx = state.ctx?.groups;
  if (!gctx) return;

  // 1) ‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô
  if (gctx.mission && !gctx.mission.done){
    gctx.mission.remain = Math.max(0, gctx.mission.remain - 1);
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (gctx.mission.progress >= gctx.mission.need){
      gctx.mission.done = true;
      fx?.popText?.('üèÅ Mission Complete', { color:'#7fffd4' });
      sfx?.perfect?.(); coach?.say?.(state.lang==='TH'?'‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô!':'Mission complete!');
    }
    // ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    if (!gctx.mission.done && gctx.mission.remain === 0){
      gctx.mission.done = true; gctx.mission.fail = true;
      fx?.popText?.('‚åõ Mission Failed', { color:'#ff9b9b' });
      coach?.say?.(state.lang==='TH'?'‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î':'Mission failed');
    }
  }

  // 2) ‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏õ dual
  if (gctx.dualRemain > 0){
    gctx.dualRemain--;
    if (gctx.dualRemain === 0){
      // ‡∏´‡∏°‡∏î‡∏§‡∏ó‡∏ò‡∏¥‡πå ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô target ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      gctx.target2 = null;
      setTargetHUD(state, hud);
      coach?.say?.(state.lang==='TH'?'‡∏´‡∏°‡∏î‡∏û‡∏•‡∏±‡∏á Dual':'Dual over');
    }
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HUD mission ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  updateMissionHUD(state);
}

export function pickMeta(diff, state){
  const gctx = state.ctx?.groups || {};
  // ‡∏•‡∏∏‡πâ‡∏ô power-up ‡∏Å‡πà‡∏≠‡∏ô
  if (Math.random() < (POWERUP_RATE[state.difficulty] || 0.05)){
    return {
      type:'powerup_dual',
      char:'‚ú®',          // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô power-up
      life: Math.max(2000, diff?.life ?? 2500)
    };
  }

  // ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  const useDual = !!gctx.target2;
  const wantTarget = Math.random() < targetChanceByDiff(state.difficulty);

  let groupKey;
  if (useDual && wantTarget){
    // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏™‡∏≠‡∏á
    groupKey = Math.random()<0.5 ? gctx.target1 : gctx.target2;
  }else if (wantTarget){
    groupKey = gctx.target1;
  }else{
    // ‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà target1/2
    const exclude = [gctx.target1, gctx.target2].filter(Boolean);
    const pool = GROUP_KEYS.filter(k => !exclude.includes(k));
    groupKey = pool.length? pick(pool) : gctx.target1;
  }

  const char = pick(GROUPS[groupKey].em);
  const life = (diff?.life ?? 3000);
  return {
    type:'food',
    char,
    life,
    groupKey,
    good: isOnTarget(groupKey, gctx) // true ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏™‡∏≠‡∏á
  };
}

export function onHit(meta, sys, state, hud){
  const { score, sfx, fx, coach } = sys || {};
  const lang = state.lang || 'TH';
  const gctx = state.ctx?.groups;

  if (meta.type === 'powerup_dual'){
    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î dual target ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î target2 ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ target1
    const next = rotateSingleTarget(gctx.target1);
    gctx.target2 = next;
    gctx.dualRemain = DUAL_DURATION[state.difficulty] || 12;

    setTargetHUD(state, hud);
    fx?.popText?.('DUAL TARGET!', { color:'#ffd54a' });
    sfx?.power?.(); coach?.say?.(lang==='TH'?'‡πÄ‡∏õ‡πâ‡∏≤ √ó2 ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß!':'Dual targets!');
    // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    score?.add?.(3);
    return;
  }

  if (meta.type !== 'food'){
    score?.add?.(1); fx?.popText?.('+1', { color:'#8ff' }); return;
  }

  // ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏™‡∏≠‡∏á?
  if (meta.good){
    score?.add?.(7);
    score.combo = (score.combo||0) + 1;
    fx?.popText?.('+7', { color:'#7fffd4' });
    sfx?.good?.();
    coach?.say?.(lang==='TH'?'‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤!':'On target!');

    // ‡∏ô‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏õ‡πâ‡∏≤
    gctx.targetHits = (gctx.targetHits||0) + 1;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (gctx.mission && !gctx.mission.done){
      if (gctx.mission.kind === 'collect_target'){
        gctx.mission.progress++;
      }
    }

    // ‡∏ó‡∏∏‡∏Å ‡πÜ 3 ‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤ ‚Üí ‡∏´‡∏°‡∏∏‡∏ô target1 (target2 ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤ dual ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
    if (gctx.targetHits >= 3){
      gctx.target1 = rotateSingleTarget(gctx.target2 || gctx.target1);
      gctx.targetHits = 0;
      setTargetHUD(state, hud);
    }
    return;
  }

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏π‡∏Å‡∏´‡∏°‡∏π‡πà (‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô 5) ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏õ‡πâ‡∏≤
  if (GROUPS[meta.groupKey]){
    score?.add?.(2);
    fx?.popText?.('+2', { color:'#9fdcff' });
    sfx?.tick?.();
    coach?.say?.(lang==='TH'?'‡∏î‡∏µ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤':'OK, not target');
    return;
  }

  // ‡∏ú‡∏¥‡∏î‡∏´‡∏°‡∏ß‡∏î
  score?.add?.(-2);
  score.combo = 0;
  fx?.popText?.('-2', { color:'#ff7a7a' });
  sfx?.bad?.();
  coach?.say?.(lang==='TH'?'‡∏ú‡∏¥‡∏î‡∏´‡∏°‡∏ß‡∏î!':'Wrong group!');
}

/* =========================
   4) Mission (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î)
   ========================= */
function newMissionWindow(state){
  // ‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡∏ô 45 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ: "‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô N ‡∏ä‡∏¥‡πâ‡∏ô"
  const byDiff = { Easy: 6, Normal: 8, Hard: 10 };
  const need = byDiff[state.difficulty] ?? 8;
  return {
    kind: 'collect_target',
    need,           // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏Å‡∏µ‡πà‡∏ä‡∏¥‡πâ‡∏ô
    progress: 0,    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    remain: 45,     // ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    done: false,
    fail: false
  };
}

function updateMissionHUD(state){
  const gctx = state.ctx?.groups;
  if (!gctx?.mission) { setMissionLine(''); return; }
  const m = gctx.mission;
  if (m.done) {
    setMissionLine(m.fail ? '‚åõ Mission Failed' : 'üèÅ Mission Complete');
    return;
  }
  // ‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‚ÄúüéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ x/Y ‚Ä¢ 45s‚Äù
  const lang = state.lang || 'TH';
  const lbl = lang==='TH' ? '‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤' : 'on target';
  setMissionLine(`üéØ ${lbl} ${m.progress}/${m.need} ‚Ä¢ ${m.remain|0}s`);
}

/* =========================
   5) Helpers
   ========================= */
function isOnTarget(groupKey, gctx){
  return groupKey === gctx.target1 || (!!gctx.target2 && groupKey === gctx.target2);
}

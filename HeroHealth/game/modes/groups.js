// === Hero Health Academy ‚Äî game/modes/groups.js
// Upgrades pack (1‚Äì12): target timer + rush, decoys, mini-quests,
// modifiers (mirror/blur/mono), dynamic difficulty, strategic powerups,
// simulated burst, onboarding/tutorial, perfect window, streak bonus & bad tax,
// plus minor accessibility toggles.
// NOTE: ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á ‚Äú‡πÄ‡∏Å‡∏¥‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏¥‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‚Äù ‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡πà‡∏á bias/‡∏•‡∏î TTL
// ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£ spawn ‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏î‡∏¢ main.js (‡∏´‡∏ô‡∏∂‡πà‡∏á meta ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡∏¥‡πâ‡∏ô)

export const name = 'groups';

/* --------------------- TUNING (‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß) --------------------- */
const TUNING = {
  quotaByDiff: { Easy:3, Normal:4, Hard:5 },   // (1) ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏°‡∏ß‡∏î
  ttlByDiff:   { Easy:4200, Normal:3000, Hard:2200 }, // ‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  targetBias: 0.60,            // (1/5) ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏≠‡∏≠‡∏Å‡∏ä‡∏¥‡πâ‡∏ô ‚Äú‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‚Äù
  perTargetSec: 15,            // (1) ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î
  rushLastSec: 5,              // (1) ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏£‡πà‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î
  rushBiasBoost: 0.35,         // ‡∏ä‡πà‡∏ß‡∏á rush ‡πÄ‡∏û‡∏¥‡πà‡∏° bias
  rushTTLScale: 0.85,          // ‡∏ä‡πà‡∏ß‡∏á rush ‡∏•‡∏î TTL

  autoswitchSec: 18,           // (1) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô ‚Äî ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î

  decoyRate: 0.18,             // (2) ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏∏‡πà‡∏° decoy
  decoyHint: true,             // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏≠‡∏ö/‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏ö‡∏≠‡∏Å‡πÉ‡∏ö‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (CSS inject)

  questCount: 3,               // (3) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏¥‡∏ô‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á
  questBonus: 25,              // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  questFeverPlus: 2,           // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ FEVER ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

  dynamicBias: true,           // (5) ‡∏õ‡∏£‡∏±‡∏ö bias ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô
  biasLo: 0.50,                // ‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á/‡∏ö‡∏ô ‡∏Ç‡∏≠‡∏á bias ‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö
  biasHi: 0.80,
  dynHiAcc: 0.90,              // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏°‡πà‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ ‚Üí ‡∏•‡∏î bias
  dynLoAcc: 0.60,              // ‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏° bias
  dynBiasStep: 0.02,
  dynTTLStep: 60,              // ‡∏•‡∏î/‡πÄ‡∏û‡∏¥‡πà‡∏° TTL ‡∏ó‡∏µ‡∏•‡∏∞ (ms)

  // (6) power-ups ‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
  powerFreezeTarget: 3,        // ‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤(‡∏´‡∏°‡∏ß‡∏î) ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  powerMagnetNext: true,       // ‡∏ä‡∏¥‡πâ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏ñ‡∏π‡∏Å) ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Æ‡∏¥‡∏ï‡∏ö‡πá‡∏≠‡∏Å‡∏ã‡πå ‚Äî ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ö‡∏ß‡∏Å
  powerX2TargetSec: 8,         // x2 ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢

  // (7) burst spawn (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
  burstChance: 0.22,           // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á burst ‡∏™‡∏±‡πâ‡∏ô‡πÜ
  burstDurSec: 3,              // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ burst
  burstBiasBoost: 0.30,
  burstTTLScale: 0.80,

  // (8) onboarding
  tutorialFirstSec: 20,        // 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏£‡∏Å bias ‡∏™‡∏π‡∏á + TTL ‡∏¢‡∏≤‡∏ß

  // (9) perfect window / streak bonus & bad tax
  perfectWindowMs: 280,        // ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏£‡πá‡∏ß‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ = perfect
  streakBonus: 35,             // ‡∏à‡∏ö‡∏´‡∏°‡∏ß‡∏î‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏•‡∏¢ (‡∏ö‡∏ß‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°)
  badTaxN: 3,                  // ‡∏ú‡∏¥‡∏î N ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏¥‡∏î
  badTaxTimePenalty: 3,        // ‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ N ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

  // (12) accessibility flags (‡πÉ‡∏ä‡πâ CSS inject)
  highContrastPulse: true,
};

/* --------------------- ‡∏Å‡∏•‡∏∏‡πà‡∏°/‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --------------------- */
const GROUPS = [
  { id:'fruits',  labelTH:'‡∏ú‡∏•‡πÑ‡∏°‡πâ',     labelEN:'Fruits',     color:'#ef4444' },
  { id:'veggies', labelTH:'‡∏ú‡∏±‡∏Å',        labelEN:'Vegetables', color:'#22c55e' },
  { id:'protein', labelTH:'‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô',     labelEN:'Protein',    color:'#3b82f6' },
  { id:'grains',  labelTH:'‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä',     labelEN:'Grains',     color:'#f59e0b' },
];

const ITEMS = [
  // Fruits (12)
  { id:'apple',      group:'fruits',  labelEN:'Apple',      labelTH:'‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡∏•',       icon:'üçé' },
  { id:'banana',     group:'fruits',  labelEN:'Banana',     labelTH:'‡∏Å‡∏•‡πâ‡∏ß‡∏¢',         icon:'üçå' },
  { id:'strawberry', group:'fruits',  labelEN:'Strawberry', labelTH:'‡∏™‡∏ï‡∏£‡∏≠‡∏ß‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà', icon:'üçì' },
  { id:'watermelon', group:'fruits',  labelEN:'Watermelon', labelTH:'‡πÅ‡∏ï‡∏á‡πÇ‡∏°',          icon:'üçâ' },
  { id:'orange',     group:'fruits',  labelEN:'Orange',     labelTH:'‡∏™‡πâ‡∏°',            icon:'üçä' },
  { id:'grapes',     group:'fruits',  labelEN:'Grapes',     labelTH:'‡∏≠‡∏á‡∏∏‡πà‡∏ô',          icon:'üçá' },
  { id:'pineapple',  group:'fruits',  labelEN:'Pineapple',  labelTH:'‡∏™‡∏±‡∏ö‡∏õ‡∏∞‡∏£‡∏î',        icon:'üçç' },
  { id:'mango',      group:'fruits',  labelEN:'Mango',      labelTH:'‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á',         icon:'ü•≠' },
  { id:'cherry',     group:'fruits',  labelEN:'Cherry',     labelTH:'‡πÄ‡∏ä‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà',        icon:'üçí' },
  { id:'peach',      group:'fruits',  labelEN:'Peach',      labelTH:'‡∏û‡∏µ‡∏ä',            icon:'üçë' },
  { id:'lemon',      group:'fruits',  labelEN:'Lemon',      labelTH:'‡∏°‡∏∞‡∏ô‡∏≤‡∏ß',          icon:'üçã' },
  { id:'kiwi',       group:'fruits',  labelEN:'Kiwi',       labelTH:'‡∏Å‡∏µ‡∏ß‡∏µ',           icon:'ü•ù' },

  // Veggies (12)
  { id:'carrot',     group:'veggies', labelEN:'Carrot',     labelTH:'‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó',         icon:'ü•ï' },
  { id:'broccoli',   group:'veggies', labelEN:'Broccoli',   labelTH:'‡∏ö‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏•‡∏µ',      icon:'ü•¶' },
  { id:'cucumber',   group:'veggies', labelEN:'Cucumber',   labelTH:'‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤',        icon:'ü•í' },
  { id:'tomato',     group:'veggies', labelEN:'Tomato',     labelTH:'‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®',      icon:'üçÖ' },
  { id:'corn',       group:'veggies', labelEN:'Corn',       labelTH:'‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î',        icon:'üåΩ' },
  { id:'lettuce',    group:'veggies', labelEN:'Lettuce',    labelTH:'‡∏ú‡∏±‡∏Å‡πÉ‡∏ö',          icon:'ü•¨' },
  { id:'mushroom',   group:'veggies', labelEN:'Mushroom',   labelTH:'‡πÄ‡∏´‡πá‡∏î',           icon:'üçÑ' },
  { id:'salad',      group:'veggies', labelEN:'Salad',      labelTH:'‡∏™‡∏•‡∏±‡∏î‡∏ú‡∏±‡∏Å',        icon:'ü•ó' },
  { id:'chili',      group:'veggies', labelEN:'Chili',      labelTH:'‡∏û‡∏£‡∏¥‡∏Å',           icon:'üå∂Ô∏è' },
  { id:'onion',      group:'veggies', labelEN:'Onion',      labelTH:'‡∏´‡∏±‡∏ß‡∏´‡∏≠‡∏°',         icon:'üßÖ' },
  { id:'garlic',     group:'veggies', labelEN:'Garlic',     labelTH:'‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°',       icon:'üßÑ' },
  { id:'potato',     group:'veggies', labelEN:'Potato',     labelTH:'‡∏°‡∏±‡∏ô‡∏ù‡∏£‡∏±‡πà‡∏á',        icon:'ü•î' },

  // Protein (14)
  { id:'egg',        group:'protein', labelEN:'Egg',        labelTH:'‡πÑ‡∏Ç‡πà',            icon:'ü•ö' },
  { id:'fish',       group:'protein', labelEN:'Fish',       labelTH:'‡∏õ‡∏•‡∏≤',            icon:'üêü' },
  { id:'tofu',       group:'protein', labelEN:'Tofu',       labelTH:'‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ',         icon:'üç¢' },
  { id:'chicken',    group:'protein', labelEN:'Chicken',    labelTH:'‡πÑ‡∏Å‡πà',            icon:'üçó' },
  { id:'beef',       group:'protein', labelEN:'Beef',       labelTH:'‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ß',       icon:'ü•©' },
  { id:'shrimp',     group:'protein', labelEN:'Shrimp',     labelTH:'‡∏Å‡∏∏‡πâ‡∏á',            icon:'ü¶ê' },
  { id:'crab',       group:'protein', labelEN:'Crab',       labelTH:'‡∏õ‡∏π',              icon:'ü¶Ä' },
  { id:'squid',      group:'protein', labelEN:'Squid',      labelTH:'‡∏´‡∏°‡∏∂‡∏Å',            icon:'ü¶ë' },
  { id:'peanuts',    group:'protein', labelEN:'Peanuts',    labelTH:'‡∏ñ‡∏±‡πà‡∏ß‡∏•‡∏¥‡∏™‡∏á',       icon:'ü•ú' },
  { id:'soybeans',   group:'protein', labelEN:'Soybeans',   labelTH:'‡∏ñ‡∏±‡πà‡∏ß‡πÄ‡∏°‡∏•‡πá‡∏î‡πÅ‡∏´‡πâ‡∏á',  icon:'ü´ò' },
  { id:'milk',       group:'protein', labelEN:'Milk',       labelTH:'‡∏ô‡∏°',             icon:'ü•õ' },
  { id:'cheese',     group:'protein', labelEN:'Cheese',     labelTH:'‡∏ä‡∏µ‡∏™',            icon:'üßÄ' },
  { id:'ham',        group:'protein', labelEN:'Ham',        labelTH:'‡πÅ‡∏Æ‡∏°/‡πÄ‡∏ö‡∏Ñ‡∏≠‡∏ô',      icon:'ü•ì' },
  { id:'sausage',    group:'protein', labelEN:'Sausage',    labelTH:'‡πÑ‡∏™‡πâ‡∏Å‡∏£‡∏≠‡∏Å',        icon:'üå≠' },

  // Grains (12)
  { id:'rice',       group:'grains',  labelEN:'Rice',       labelTH:'‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢',        icon:'üçö' },
  { id:'bread',      group:'grains',  labelEN:'Bread',      labelTH:'‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á',         icon:'üçû' },
  { id:'noodles',    group:'grains',  labelEN:'Noodles',    labelTH:'‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß',     icon:'üçú' },
  { id:'spaghetti',  group:'grains',  labelEN:'Spaghetti',  labelTH:'‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡∏ï‡∏ï‡∏µ',       icon:'üçù' },
  { id:'croissant',  group:'grains',  labelEN:'Croissant',  labelTH:'‡∏Ñ‡∏£‡∏±‡∏ß‡∏ã‡∏≠‡∏á‡∏ï‡πå',       icon:'ü•ê' },
  { id:'pancake',    group:'grains',  labelEN:'Pancake',    labelTH:'‡πÅ‡∏û‡∏ô‡πÄ‡∏Ñ‡πâ‡∏Å',         icon:'ü•û' },
  { id:'burrito',    group:'grains',  labelEN:'Burrito',    labelTH:'‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏¥‡πÇ‡∏ï',       icon:'üåØ' },
  { id:'sandwich',   group:'grains',  labelEN:'Sandwich',   labelTH:'‡πÅ‡∏ã‡∏ô‡∏î‡πå‡∏ß‡∏¥‡∏ä',        icon:'ü•™' },
  { id:'taco',       group:'grains',  labelEN:'Taco',       labelTH:'‡∏ó‡∏≤‡πÇ‡∏Å‡πâ',           icon:'üåÆ' },
  { id:'pie',        group:'grains',  labelEN:'Pie',        labelTH:'‡∏û‡∏≤‡∏¢',             icon:'ü•ß' },
  { id:'cookie',     group:'grains',  labelEN:'Cookie',     labelTH:'‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ',          icon:'üç™' },
  { id:'donut',      group:'grains',  labelEN:'Donut',      labelTH:'‡πÇ‡∏î‡∏ô‡∏±‡∏ó',           icon:'üç©' },
];

/* --------------------- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏†‡∏≤‡∏¢‡πÉ‡∏ô --------------------- */
const ST = {
  lang: 'TH',
  targetId: 'fruits',
  need: 4,
  got: 0,
  lastSwitchMs: 0,

  // (1) Target timer
  targetTimeLeft: TUNING.perTargetSec,

  // (3) mini-quests
  quests: [],
  questDone: new Set(),

  // (5) dynamic
  liveBias: TUNING.targetBias,
  liveTTL: { ...TUNING.ttlByDiff },

  // (6) powerups
  puFreezeUntil: 0,     // ms
  puMagnetNext: false,
  puX2Until: 0,         // ms

  // (7) burst simulate
  burstUntil: 0,        // ms

  // (8) tutorial
  tutorialUntil: 0,     // ms

  // (9) perfect/streak/bad tax
  inTargetStreakNoMiss: true,
  badStreak: 0,

  // decoy hint (css)
  cssInjected: false,
};

/* --------------------- Utils --------------------- */
const t = (th, en, lang)=> (lang==='EN' ? en : th);
const now = ()=> (performance?.now?.() || Date.now());
const clamp = (x,a,b)=> Math.max(a, Math.min(b, x));
function pickDifferent(list, prev){
  if (!prev) return list[(Math.random()*list.length)|0];
  const cand = list.filter(x=>x!==prev);
  return cand.length? cand[(Math.random()*cand.length)|0] : prev;
}

/* --------------------- HUD helpers --------------------- */
function showTargetHUD(show){
  const wrap = document.getElementById('targetWrap');
  if (wrap) wrap.style.display = show ? 'block' : 'none';
}
function updateTargetBadge(){
  const g = GROUPS.find(x=>x.id===ST.targetId);
  const badge = document.getElementById('targetBadge');
  if (badge){
    badge.textContent = t(g.labelTH, g.labelEN, ST.lang) + `  (${ST.got}/${ST.need})`;
    badge.style.fontWeight = '800';
  }
  const tLabel = document.getElementById('t_target');
  if (tLabel) tLabel.textContent = t('‡∏´‡∏°‡∏ß‡∏î', 'Target', ST.lang);
}
function updateQuestChips(){
  const host = document.getElementById('questChips');
  if (!host) return;
  host.innerHTML = '';
  for (const q of ST.quests){
    const b = document.createElement('div');
    b.className = 'chip questChip';
    b.textContent = q.label;
    if (ST.questDone.has(q.id)) b.classList.add('done');
    host.appendChild(b);
  }
}

/* --------------------- Modifiers CSS inject --------------------- */
function ensureCSS(){
  if (ST.cssInjected) return;
  const css = `
  body.mod-mirror { transform: scaleX(-1); }
  body.mod-blur   { filter: blur(1.5px); }
  body.mod-mono   { filter: grayscale(100%); }
  .questChip{background:#112a; color:#fff; padding:6px 10px; border-radius:999px; font-weight:700; margin:4px}
  .questChip.done{background:#2e7d32}
  ${TUNING.decoyHint ? `.decoy-hint{ outline:3px dashed rgba(255,64,64,.45); border-radius:16px; }` : '' }
  ${TUNING.highContrastPulse ? `
    @keyframes hcPulse{0%{filter:drop-shadow(0 0 0 rgba(255,255,0,0))}50%{filter:drop-shadow(0 0 8px rgba(255,255,0,.75))}100%{filter:drop-shadow(0 0 0 rgba(255,255,0,0))}}
    body.hc .item{ animation: hcPulse 1.8s ease-in-out infinite; }
  `:''}`;
  const st = document.createElement('style');
  st.id = 'grp_mod_css';
  st.textContent = css;
  document.head.appendChild(st);
  ST.cssInjected = true;
}

/* --------------------- Decoys (2) --------------------- */
const LOOKALIKE = {
  fruits:  ['tomato','chili'],                // ‡∏ú‡∏±‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢/‡∏™‡∏±‡∏ö‡∏™‡∏ô
  veggies: ['mushroom','corn','peanuts'],     // ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô/‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ú‡∏±‡∏Å
  protein: ['cheese','milk'],                 // ‡∏ô‡∏°/‡∏ä‡∏µ‡∏™ (‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏Å‡πá‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡πÅ‡∏ô‡∏ß ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡∏ß‡∏á)
  grains:  ['donut','cookie','croissant'],    // ‡∏Ç‡∏ô‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏•‡∏ß‡∏á
};
function pickDecoy(targetId){
  const poolIds = LOOKALIKE[targetId] || [];
  const pool = ITEMS.filter(x=>poolIds.includes(x.id));
  if (pool.length===0) return null;
  return pool[(Math.random()*pool.length)|0];
}

/* --------------------- Quests (3) --------------------- */
function makeQuests(){
  const q = [];
  q.push({ id:'Q_TARGET3', label: t('‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ 3 ‡∏ä‡∏¥‡πâ‡∏ô‡∏ï‡∏¥‡∏î', 'Get 3 target items in a row', ST.lang), type:'chain3', prog:0, need:3 });
  q.push({ id:'Q_VEG2',    label: t('‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏±‡∏Å 2 ‡∏ä‡∏¥‡πâ‡∏ô', 'Collect 2 veggies', ST.lang), type:'group', group:'veggies', prog:0, need:2 });
  q.push({ id:'Q_FAST',    label: t('‡∏Å‡∏î‡πÄ‡∏£‡πá‡∏ß 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (Perfect)', 'Hit 1 Perfect', ST.lang), type:'perfect', prog:0, need:1 });
  return q.slice(0, TUNING.questCount);
}
function questHit(kind, meta){
  for (const q of ST.quests){
    if (ST.questDone.has(q.id)) continue;
    if (q.type==='chain3' && kind==='good' && meta.good){
      q.prog++; if (q.prog>=q.need) ST.questDone.add(q.id);
    }
    if (q.type==='group' && meta.groupId===q.group && kind!=='bad'){
      q.prog++; if (q.prog>=q.need) ST.questDone.add(q.id);
    }
    if (q.type==='perfect' && kind==='perfect'){
      q.prog++; if (q.prog>=q.need) ST.questDone.add(q.id);
    }
  }
  updateQuestChips();
}

/* --------------------- Target switching --------------------- */
function switchTarget(forced=false){
  const ids = GROUPS.map(g=>g.id);
  ST.targetId = pickDifferent(ids, ST.targetId);
  ST.got = 0;
  ST.lastSwitchMs = now();
  ST.targetTimeLeft = TUNING.perTargetSec;
  ST.inTargetStreakNoMiss = true;
  updateTargetBadge();
  return forced;
}

/* --------------------- Public API --------------------- */
export function init(gameState, hud, diff){
  ensureCSS();

  ST.lang = (localStorage.getItem('hha_lang')||'TH');
  const d = (gameState?.difficulty)||'Normal';
  ST.need = TUNING.quotaByDiff[d] ?? 4;

  ST.liveBias = TUNING.targetBias;
  ST.liveTTL  = { ...TUNING.ttlByDiff };
  ST.tutorialUntil = now() + TUNING.tutorialFirstSec*1000;

  ST.badStreak = 0;
  ST.puFreezeUntil = 0;
  ST.puMagnetNext  = false;
  ST.puX2Until     = 0;
  ST.burstUntil    = 0;

  switchTarget(false);
  showTargetHUD(true);

  // Quests
  ST.quests = makeQuests();
  ST.questDone.clear();
  updateQuestChips();

  // Coach intro
  try {
    const g = GROUPS.find(x=>x.id===ST.targetId);
    const msg = t(`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${g.labelTH}`, `Target: ${g.labelEN}`, ST.lang);
    gameState?.coach?.say?.(msg);
  } catch {}
}

export function cleanup(){
  showTargetHUD(false);
  document.body.classList.remove('mod-mirror','mod-blur','mod-mono','hc');
}

/* tick: main.js ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ */
export function tick(state, systems){
  const ms = now();

  // (5) Dynamic difficulty ‡∏à‡∏≤‡∏Å accuracy ‡∏Å‡∏•‡∏¥‡πâ‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
  if (TUNING.dynamicBias && Array.isArray(state?._accHist) && state._accHist.length){
    const acc = state._accHist.reduce((s,x)=>s+x,0)/state._accHist.length; // 0..1
    if (acc > TUNING.dynHiAcc){
      ST.liveBias = clamp(ST.liveBias - TUNING.dynBiasStep, TUNING.biasLo, TUNING.biasHi);
      for (const k in ST.liveTTL) ST.liveTTL[k] = Math.max(900, ST.liveTTL[k] - TUNING.dynTTLStep);
    } else if (acc < TUNING.dynLoAcc){
      ST.liveBias = clamp(ST.liveBias + TUNING.dynBiasStep, TUNING.biasLo, TUNING.biasHi);
      for (const k in ST.liveTTL) ST.liveTTL[k] = ST.liveTTL[k] + TUNING.dynTTLStep;
    }
  }

  // (4) Modifiers: ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏ô‡∏≤‡∏ô‡πÜ ‡∏ó‡∏µ (‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏†‡∏≤‡∏û)
  if (Math.random()<0.06){
    const m = Math.random();
    if (m<0.34){ toggleModifier('mod-mirror', 1500); }
    else if (m<0.67){ toggleModifier('mod-blur', 450); }
    else { toggleModifier('mod-mono', 1200); }
  }

  // (1) Target timer + Rush window + autoswitch (‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ Freeze power)
  const frozen = (ms < ST.puFreezeUntil);
  if (!frozen){
    ST.targetTimeLeft = Math.max(0, ST.targetTimeLeft - 1);
  }
  const inRush = ST.targetTimeLeft <= TUNING.rushLastSec;

  if (ST.got < ST.need){
    const waited = (ms - ST.lastSwitchMs) / 1000;
    if (waited >= TUNING.autoswitchSec){
      switchTarget(true);
      systems?.coach?.say?.(t('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î!', 'New target!', ST.lang));
      try { systems?.sfx?.play?.('powerup'); } catch {}
    }
  }

  // (7) Simulate burst window
  if (ST.burstUntil < ms && Math.random() < TUNING.burstChance){
    ST.burstUntil = ms + TUNING.burstDurSec*1000;
  }

  // (8) Onboarding hint: ‡∏ñ‡πâ‡∏≤‡∏û‡∏•‡∏≤‡∏î‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ï‡πâ‡∏ô ‡πÇ‡∏Ñ‡πâ‡∏ä‡πÉ‡∏ö‡πâ
  if (ms < ST.tutorialUntil && ST.badStreak >= 2){
    systems?.coach?.say?.(t('‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏Ñ‡∏∑‡∏≠ üçéüçåüçì ‚Ä¶ ‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πá‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏∞', 'Fruits are üçéüçåüçì ‚Ä¶ pick the right group!', ST.lang));
    ST.badStreak = 0; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
  }

  // Accessibility pulse
  if (TUNING.highContrastPulse && Math.random()<0.03){
    document.body.classList.toggle('hc', true);
    setTimeout(()=>document.body.classList.remove('hc'), 2000);
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HUD target label ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á)
  const badge = document.getElementById('targetBadge');
  if (badge){
    const g = GROUPS.find(x=>x.id===ST.targetId);
    const sec = ST.targetTimeLeft;
    badge.textContent = t(g.labelTH, g.labelEN, ST.lang) + `  (${ST.got}/${ST.need}) ‚Äî ${sec}s`;
  }
}

/* meta ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡∏¥‡πâ‡∏ô */
export function pickMeta(diff, gameState){
  const d = (gameState?.difficulty)||'Normal';
  let ttl = ST.liveTTL[d] ?? (diff?.life || 3000);
  let bias = ST.liveBias;

  const ms = now();
  const inTutorial = (ms < ST.tutorialUntil);
  const inRush     = (ST.targetTimeLeft <= TUNING.rushLastSec);
  const inBurst    = (ms < ST.burstUntil);

  if (inTutorial){ bias = clamp(bias + 0.25, 0, 1); ttl = Math.max(ttl, 3400); }
  if (inRush){     bias = clamp(bias + TUNING.rushBiasBoost, 0, 1); ttl = Math.round(ttl*TUNING.rushTTLScale); }
  if (inBurst){    bias = clamp(bias + TUNING.burstBiasBoost, 0, 1); ttl = Math.round(ttl*TUNING.burstTTLScale); }

  let pick;
  const r = Math.random();
  if (r < bias){
    pick = pickFrom(ITEMS, it=>it.group===ST.targetId);
  }else{
    // (2) Decoy chance
    if (Math.random() < TUNING.decoyRate){
      pick = pickDecoy(ST.targetId) || pickFrom(ITEMS, it=>it.group!==ST.targetId);
      if (pick) pick.__decoy = true;
    }else{
      pick = pickFrom(ITEMS, it=>it.group!==ST.targetId);
    }
  }
  if (!pick) pick = ITEMS[(Math.random()*ITEMS.length)|0];

  // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô perfect
  const bornAt = now();

  return {
    id: pick.id,
    char: pick.icon,
    good: (pick.group===ST.targetId),
    life: ttl,
    bornAt,
    groupId: pick.group,
    decoy: !!pick.__decoy,
  };
}

function pickFrom(arr, pred){
  const pool = arr.filter(pred);
  if (!pool.length) return null;
  return pool[(Math.random()*pool.length)|0];
}

/* ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å */
export function onHit(meta, systems, gameState){
  const ms = now();
  const fast = (typeof meta.bornAt==='number') ? ((ms - meta.bornAt) <= TUNING.perfectWindowMs) : false;

  // ‡πÄ‡∏Ñ‡∏ß‡∏™: ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡πà‡∏≠‡∏ô (‡πÉ‡∏ä‡πâ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å)
  let result;

  if (meta.good){
    // (6) Power: X2 target window?
    const x2Now = (ms < ST.puX2Until);

    // Perfect?
    if (fast){
      // ‡∏™‡πà‡∏á‡∏ú‡∏• 'perfect' ‡πÉ‡∏´‡πâ main.js ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö/fever ‡πÄ‡∏≠‡∏á
      result = 'perfect';
      if (x2Now) { systems?.score?.add?.(8); } // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      systems?.coach?.say?.(t('‡πÑ‡∏ß‡∏°‡∏≤‡∏Å!','Perfect!',ST.lang));
    } else {
      result = 'good';
      if (x2Now) { systems?.score?.add?.(6); }
      systems?.coach?.say?.(t('‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏¢!','Nice!',ST.lang));
    }

    ST.got++;
    ST.badStreak = 0;
    questHit(result, meta);

    // Magnet next (‡∏à‡∏≥‡∏•‡∏≠‡∏á: ‡πÉ‡∏´‡πâ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏¥‡∏î‡∏ò‡∏á)
    if (ST.puMagnetNext){
      systems?.score?.add?.(5);
      ST.puMagnetNext = false;
    }

    // ‡∏Ñ‡∏£‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ ‚Üí ‡∏à‡∏ö‡∏´‡∏°‡∏ß‡∏î
    if (ST.got >= ST.need){
      // (9) Streak bonus: ‡∏´‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏•‡∏¢
      if (ST.inTargetStreakNoMiss){
        systems?.score?.add?.(TUNING.streakBonus);
        systems?.coach?.say?.(t('‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏™‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏û‡∏•‡∏≤‡∏î','Flawless!',ST.lang));
      }
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏Ñ‡∏ß‡∏™‡πÄ‡∏™‡∏£‡πá‡∏à ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏° Fever time
      if (ST.questDone.size){
        if (gameState?.fever?.active){
          gameState.fever.timeLeft = Math.min(12, (gameState.fever.timeLeft||0) + TUNING.questFeverPlus);
        } else {
          gameState.fever.meter = Math.min(100, (gameState.fever.meter||0) + 20);
        }
        // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏ß‡∏™
        systems?.score?.add?.(TUNING.questBonus * ST.questDone.size);
        ST.questDone.clear();
        updateQuestChips();
      }

      // ‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà
      switchTarget(true);
      try { systems?.sfx?.play?.('powerup'); } catch {}
      systems?.coach?.say?.(t('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î!','New target!',ST.lang));
    }
  } else {
    // ‡∏û‡∏•‡∏≤‡∏î
    result = 'bad';
    ST.badStreak++;
    ST.inTargetStreakNoMiss = false;
    systems?.coach?.say?.(meta.decoy ? t('‡∏•‡∏ß‡∏á‡∏ï‡∏≤‡∏ô‡∏∞!','That was a decoy!',ST.lang)
                                     : t('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ','Not this group!',ST.lang));
    // (9) Bad tax
    if (ST.badStreak>=TUNING.badTaxN){
      gameState.timeLeft = Math.max(0, (gameState.timeLeft||0) - TUNING.badTaxTimePenalty);
      ST.badStreak = 0;
    }
  }

  return result; // main.js ‡∏à‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏•‡∏±‡∏Å/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö/FEVER
}

/* --------------------- Modifiers helpers (4) --------------------- */
function toggleModifier(cls, ms){
  document.body.classList.add(cls);
  setTimeout(()=>document.body.classList.remove(cls), ms|0);
}

/* --------------------- Optional: expose ‚Äúpowerups‚Äù triggers ---------------------
   ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°/‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
   ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏î‡∏à‡∏≤‡∏Å powerbar ‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ
------------------------------------------------------------------------------- */
export const powers = {
  freezeTarget(){ ST.puFreezeUntil = now() + TUNING.powerFreezeTarget*1000; },
  magnetNext(){ ST.puMagnetNext = true; },
  x2Target(){ ST.puX2Until = now() + TUNING.powerX2TargetSec*1000; },
};

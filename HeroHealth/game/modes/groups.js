// === Hero Health Academy ‚Äî game/modes/groups.js (A‚ÄìD applied) ===
export const name = 'groups';

// ---------- Config ----------
const GROUPS = [
  { id:'fruits',   labelTH:'‡∏ú‡∏•‡πÑ‡∏°‡πâ',     labelEN:'Fruits',      color:'#ef4444' },
  { id:'veggies',  labelTH:'‡∏ú‡∏±‡∏Å',        labelEN:'Vegetables',  color:'#22c55e' },
  { id:'protein',  labelTH:'‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô',     labelEN:'Protein',     color:'#3b82f6' },
  { id:'grains',   labelTH:'‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä',     labelEN:'Grains',      color:'#f59e0b' },
  { id:'dairy',    labelTH:'‡∏ô‡∏°/‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå', labelEN:'Dairy',    color:'#a855f7' },
];

// === ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ITEMS 50 ‡∏ä‡∏¥‡πâ‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤) ===
// Fruits (12), Veggies (12), Protein (14), Grains (12) ‚Äî Dairy ‡∏à‡∏∞‡∏™‡∏∏‡πà‡∏°‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á‡∏´‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
const ITEMS = [
  // Fruits
  { id:'apple',      group:'fruits',  labelEN:'Apple',      labelTH:'‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡∏•',       icon:'üçé' },
  { id:'banana',     group:'fruits',  labelEN:'Banana',     labelTH:'‡∏Å‡∏•‡πâ‡∏ß‡∏¢',         icon:'üçå' },
  { id:'strawberry', group:'fruits',  labelEN:'Strawberry', labelTH:'‡∏™‡∏ï‡∏£‡∏≠‡∏ß‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà', icon:'üçì' },
  { id:'watermelon', group:'fruits',  labelEN:'Watermelon', labelTH:'‡πÅ‡∏ï‡∏á‡πÇ‡∏°',          icon:'üçâ' },
  { id:'orange',     group:'fruits',  labelEN:'Orange',     labelTH:'‡∏™‡πâ‡∏°',            icon:'üçä' },
  { id:'grapes',     group:'fruits',  labelEN:'Grapes',     labelTH:'‡∏≠‡∏á‡∏∏‡πà‡∏ô',          icon:'üçá' },
  { id:'pineapple',  group:'fruits',  labelEN:'Pineapple',  labelTH:'‡∏™‡∏±‡∏ö‡∏õ‡∏∞‡∏£‡∏î',        icon:'üçç' },
  { id:'mango',      group:'fruits',  labelEN:'Mango',      labelTH:'‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á',         icon:'ü•≠' },
  { id:'cherry',     group:'fruits',  labelEN:'Cherry',     labelTH:'‡πÄ‡∏ä‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà',        icon:'üçí' },
  { id:'peach',      group:'fruits',  labelEN:'Peach',      labelTH:'‡∏û‡∏µ‡∏ä',            icon:'üçë' },
  { id:'lemon',      group:'fruits',  labelEN:'Lemon',      labelTH:'‡∏°‡∏∞‡∏ô‡∏≤‡∏ß',          icon:'üçã' },
  { id:'kiwi',       group:'fruits',  labelEN:'Kiwi',       labelTH:'‡∏Å‡∏µ‡∏ß‡∏µ',           icon:'ü•ù' },

  // Veggies
  { id:'carrot',     group:'veggies', labelEN:'Carrot',     labelTH:'‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó',         icon:'ü•ï' },
  { id:'broccoli',   group:'veggies', labelEN:'Broccoli',   labelTH:'‡∏ö‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏•‡∏µ',      icon:'ü•¶' },
  { id:'cucumber',   group:'veggies', labelEN:'Cucumber',   labelTH:'‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤',        icon:'ü•í' },
  { id:'tomato',     group:'veggies', labelEN:'Tomato',     labelTH:'‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®',      icon:'üçÖ' },
  { id:'corn',       group:'veggies', labelEN:'Corn',       labelTH:'‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î',        icon:'üåΩ' },
  { id:'lettuce',    group:'veggies', labelEN:'Lettuce',    labelTH:'‡∏ú‡∏±‡∏Å‡πÉ‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß',    icon:'ü•¨' },
  { id:'mushroom',   group:'veggies', labelEN:'Mushroom',   labelTH:'‡πÄ‡∏´‡πá‡∏î',           icon:'üçÑ' },
  { id:'salad',      group:'veggies', labelEN:'Salad',      labelTH:'‡∏™‡∏•‡∏±‡∏î‡∏ú‡∏±‡∏Å',        icon:'ü•ó' },
  { id:'chili',      group:'veggies', labelEN:'Chili',      labelTH:'‡∏û‡∏£‡∏¥‡∏Å',           icon:'üå∂Ô∏è' },
  { id:'onion',      group:'veggies', labelEN:'Onion',      labelTH:'‡∏´‡∏±‡∏ß‡∏´‡∏≠‡∏°',         icon:'üßÖ' },
  { id:'garlic',     group:'veggies', labelEN:'Garlic',     labelTH:'‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°',       icon:'üßÑ' },
  { id:'potato',     group:'veggies', labelEN:'Potato',     labelTH:'‡∏°‡∏±‡∏ô‡∏ù‡∏£‡∏±‡πà‡∏á',        icon:'ü•î' },

  // Protein
  { id:'egg',        group:'protein', labelEN:'Egg',        labelTH:'‡πÑ‡∏Ç‡πà',            icon:'ü•ö' },
  { id:'fish',       group:'protein', labelEN:'Fish',       labelTH:'‡∏õ‡∏•‡∏≤',            icon:'üêü' },
  { id:'tofu',       group:'protein', labelEN:'Tofu',       labelTH:'‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ',         icon:'üç¢' },
  { id:'chicken',    group:'protein', labelEN:'Chicken',    labelTH:'‡πÑ‡∏Å‡πà',            icon:'üçó' },
  { id:'beef',       group:'protein', labelEN:'Beef',       labelTH:'‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ß',       icon:'ü•©' },
  { id:'shrimp',     group:'protein', labelEN:'Shrimp',     labelTH:'‡∏Å‡∏∏‡πâ‡∏á',            icon:'ü¶ê' },
  { id:'crab',       group:'protein', labelEN:'Crab',       labelTH:'‡∏õ‡∏π',              icon:'ü¶Ä' },
  { id:'squid',      group:'protein', labelEN:'Squid',      labelTH:'‡∏´‡∏°‡∏∂‡∏Å',            icon:'ü¶ë' },
  { id:'peanuts',    group:'protein', labelEN:'Peanuts',    labelTH:'‡∏ñ‡∏±‡πà‡∏ß‡∏•‡∏¥‡∏™‡∏á',       icon:'ü•ú' },
  { id:'soybeans',   group:'protein', labelEN:'Soybeans',   labelTH:'‡∏ñ‡∏±‡πà‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á',     icon:'ü´ò' },
  { id:'milk',       group:'protein', labelEN:'Milk',       labelTH:'‡∏ô‡∏°',             icon:'ü•õ' },
  { id:'cheese',     group:'protein', labelEN:'Cheese',     labelTH:'‡∏ä‡∏µ‡∏™',            icon:'üßÄ' },
  { id:'ham',        group:'protein', labelEN:'Ham',        labelTH:'‡πÅ‡∏Æ‡∏°/‡πÄ‡∏ö‡∏Ñ‡∏≠‡∏ô',      icon:'ü•ì' },
  { id:'sausage',    group:'protein', labelEN:'Sausage',    labelTH:'‡πÑ‡∏™‡πâ‡∏Å‡∏£‡∏≠‡∏Å',        icon:'üå≠' },

  // Grains
  { id:'rice',       group:'grains',  labelEN:'Rice',       labelTH:'‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢',        icon:'üçö' },
  { id:'bread',      group:'grains',  labelEN:'Bread',      labelTH:'‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á',         icon:'üçû' },
  { id:'noodles',    group:'grains',  labelEN:'Noodles',    labelTH:'‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß',     icon:'üçú' },
  { id:'spaghetti',  group:'grains',  labelEN:'Spaghetti',  labelTH:'‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡∏ï‡∏ï‡∏µ',       icon:'üçù' },
  { id:'croissant',  group:'grains',  labelEN:'Croissant',  labelTH:'‡∏Ñ‡∏£‡∏±‡∏ß‡∏ã‡∏≠‡∏á‡∏ï‡πå',       icon:'ü•ê' },
  { id:'pancake',    group:'grains',  labelEN:'Pancake',    labelTH:'‡πÅ‡∏û‡∏ô‡πÄ‡∏Ñ‡πâ‡∏Å',         icon:'ü•û' },
  { id:'burrito',    group:'grains',  labelEN:'Burrito',    labelTH:'‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏¥‡πÇ‡∏ï',       icon:'üåØ' },
  { id:'sandwich',   group:'grains',  labelEN:'Sandwich',   labelTH:'‡πÅ‡∏ã‡∏ô‡∏î‡πå‡∏ß‡∏¥‡∏ä',        icon:'ü•™' },
  { id:'taco',       group:'grains',  labelEN:'Taco',       labelTH:'‡∏ó‡∏≤‡πÇ‡∏Å‡πâ',           icon:'üåÆ' },
  { id:'pie',        group:'grains',  labelEN:'Pie',        labelTH:'‡∏û‡∏≤‡∏¢',             icon:'ü•ß' },
  { id:'cookie',     group:'grains',  labelEN:'Cookie',     labelTH:'‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ',          icon:'üç™' },
  { id:'donut',      group:'grains',  labelEN:'Donut',      labelTH:'‡πÇ‡∏î‡∏ô‡∏±‡∏ó',           icon:'üç©' },
];

// ---------- Internal state ----------
const ST = {
  lang: 'TH',
  targetId: 'fruits',
  need: 4,         // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î
  got: 0,
  x2Until: 0,      // A/B: ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î icon golden + ‡∏Ñ‡∏π‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  magnetUntil: 0,  // A: bias ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ spawn ‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
};

// ---------- Public API ----------
export function init(gameState, hud, diff){
  const d = (gameState?.difficulty)||'Normal';
  ST.need = d==='Easy' ? 3 : d==='Hard' ? 5 : 4;
  ST.got = 0;
  ST.lang = (localStorage.getItem('hha_lang')||'TH');
  ST.targetId = pickDifferent(GROUPS.map(g=>g.id), ST.targetId);
  showTargetHUD(true);
  updateTargetBadge();
}

export function cleanup(){
  showTargetHUD(false);
}

export function tick(state){
  const now = performance.now();
  if (ST.magnetUntil && now > ST.magnetUntil) ST.magnetUntil = 0;
}

// ‡πÉ‡∏´‡πâ main.js ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà spawn
export function pickMeta(diff){
  // A) Magnet bias + reroll
  const probTargetBase = 0.58;
  const probTarget = (ST.magnetUntil && performance.now() < ST.magnetUntil) ? 0.90 : probTargetBase;
  let pickTarget = Math.random() < probTarget;

  let pool = pickTarget ? ITEMS.filter(i=>i.group===ST.targetId)
                        : ITEMS.filter(i=>i.group!==ST.targetId);

  let it = pool[(Math.random()*pool.length)|0];

  // ‡∏ñ‡πâ‡∏≤ magnet ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏ï‡πà‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤ ‡∏•‡∏≠‡∏á reroll 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  if (!pickTarget && ST.magnetUntil && performance.now()<ST.magnetUntil){
    const again = ITEMS.filter(i=>i.group===ST.targetId);
    if (again.length) it = again[(Math.random()*again.length)|0];
  }

  // B) ‡∏™‡πà‡∏á flag mult=2 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á x2
  const x2Active = performance.now() < ST.x2Until;
  const golden = x2Active && Math.random() < 0.20;

  return {
    id: it.id,
    groupId: it.group,
    char: it.icon,
    good: (it.group===ST.targetId),
    life: diff?.life || 3000,
    golden,             // ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå/‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    mult: x2Active ? 2 : 1
  };
}

// ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡∏¥‡πâ‡∏ô ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ goodjunk
export function onHit(meta, systems){
  if (meta.good){
    ST.got++;
    updateTargetBadge();
    if (meta.golden) systems.coach?.say?.(t('‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥! +‡∏û‡∏•‡∏±‡∏á', 'Golden! +Power', ST.lang));
    else systems.coach?.say?.(t('‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏¢!', 'Nice!', ST.lang));

    if (ST.got >= ST.need){
      ST.got = 0;
      ST.targetId = pickDifferent(GROUPS.map(g=>g.id), ST.targetId);
      updateTargetBadge();
      systems.sfx?.play?.('powerup');
      systems.coach?.say?.(t('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î!', 'New target!', ST.lang));
    }
    return meta.golden ? 'perfect' : 'good';
  }
  systems.coach?.say?.(t('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡∏ô‡∏∞', 'Not this group!', ST.lang));
  return 'bad';
}

// ---------- Powers (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö main.js) ----------
export function getPowerDurations(){
  return { x2:8, freeze:3, magnet:5 };
}
export const powers = {
  x2Target(){
    ST.x2Until = performance.now() + 8000;
  },
  freezeTarget(){
    // ‡∏™‡πà‡∏á event ‡πÉ‡∏´‡πâ main.js ‡πÑ‡∏õ‡∏ï‡∏±‡πâ‡∏á freezeUntil (3s)
    window.dispatchEvent(new CustomEvent('hha:freeze', { detail:{ ms:3000 } }));
  },
  magnetNext(){
    ST.magnetUntil = performance.now() + 5000;
  }
};

// ---------- HUD helpers ----------
function showTargetHUD(show){
  const wrap = document.getElementById('targetWrap');
  if (wrap) wrap.style.display = show ? 'block' : 'none';
}
function updateTargetBadge(){
  const g = GROUPS.find(x=>x.id===ST.targetId);
  const badge = document.getElementById('targetBadge');
  if (badge){
    badge.textContent = t(g.labelTH, g.labelEN, ST.lang) + `  (${ST.got}/${ST.need})`;
    badge.style.fontWeight = '800';
  }
  const tLabel = document.getElementById('t_target');
  if (tLabel) tLabel.textContent = t('‡∏´‡∏°‡∏ß‡∏î', 'Target', ST.lang);
}

// ---------- utils ----------
function t(th, en, lang){ return lang==='EN' ? en : th; }
function pickDifferent(list, prev){
  if (!prev) return list[(Math.random()*list.length)|0];
  const cand = list.filter(x=>x!==prev);
  return cand.length? cand[(Math.random()*cand.length)|0] : prev;
}

// game/modes/groups.js
// ‡πÇ‡∏´‡∏°‡∏î: ‡∏à‡∏≤‡∏ô 5 ‡∏´‡∏°‡∏π‡πà (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á "‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢")

// ===== ‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥ =====
const GROUPS = {
  grain:   { labelTH: '‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä',  labelEN:'Grain',   em: ['üçö','üçû','ü•ñ','ü•Ø','üçú'] },
  veg:     { labelTH: '‡∏ú‡∏±‡∏Å',     labelEN:'Veg',     em: ['ü•¶','ü•ï','ü•¨','üåΩ','ü´ë'] },
  protein: { labelTH: '‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô',  labelEN:'Protein', em: ['ü•©','üçó','üçñ','ü•ö','üêü'] },
  fruit:   { labelTH: '‡∏ú‡∏•‡πÑ‡∏°‡πâ',   labelEN:'Fruit',   em: ['üçé','üçå','üçá','üçì','üçä'] },
  dairy:   { labelTH: '‡∏ô‡∏°',      labelEN:'Dairy',   em: ['ü•õ','üßÄ','üç¶','üç®'] }
};
const GROUP_KEYS = Object.keys(GROUPS);

// ===== Utils =====
const pick = (arr)=>arr[(Math.random()*arr.length)|0];

// ‡∏õ‡πâ‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HUD
function badgeOf(key, lang='TH'){
  const g = GROUPS[key];
  if(!g) return '‚Äî';
  const name = (lang==='EN'? g.labelEN : g.labelTH);
  return `${name}`;
}

// ===== Public API (main.js ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ) =====
export function init(state, hud, diff){
  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° context ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î
  state.ctx = state.ctx || {};
  state.ctx.groups = state.ctx.groups || {
    target: pick(GROUP_KEYS),
    targetHits: 0
  };

  // ‡πÇ‡∏ä‡∏ß‡πå HUD ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤ HUD ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö)
  if (hud?.showTarget) hud.showTarget();
  setTargetHUD(state, hud);

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏´‡∏°‡∏π‡πà
  state.ctx.wrongGroup = 0;
}

export function tick(state, sys, hud){
  // ‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ tick ‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÅ‡∏ï‡πà‡∏Å‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
}

// difficulty ‚Üí ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤
function targetChanceByDiff(diffKey){
  if(diffKey==='Easy')   return 0.45;
  if(diffKey==='Hard')   return 0.65;
  return 0.55; // Normal
}

// ‡∏Ñ‡∏∑‡∏ô meta ‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πÅ‡∏õ‡∏ß‡∏ô‡πå
export function pickMeta(diff, state){
  const ctx = state.ctx?.groups || {};
  const target = ctx.target || 'grain';

  const wantTarget = Math.random() < targetChanceByDiff(state.difficulty);
  let groupKey = wantTarget ? target : pick(GROUP_KEYS.filter(k=>k!==target));
  if(!GROUPS[groupKey]) groupKey = 'grain';

  const char = pick(GROUPS[groupKey].em);

  // ‡∏≠‡∏≤‡∏¢‡∏∏‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö diff.life ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ default
  const life = (diff?.life ?? 3000);

  // meta ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡∏™‡πÅ‡∏õ‡∏ß‡∏ô‡πå/‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
  return {
    type: 'food',
    char,
    life,
    groupKey,
    good: (groupKey === target), // ‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤ = true
  };
}

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å
export function onHit(meta, sys, state, hud){
  const { score, sfx, fx, coach } = sys || {};
  const lang = (state.lang || 'TH');

  const ctx = state.ctx?.groups || (state.ctx.groups = { target: 'grain', targetHits: 0 });

  if (meta.type!=='food'){
    score?.add?.(1);
    fx?.popText?.('+1',{color:'#8ff'});
    return;
  }

  // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤
  if (meta.good){
    score?.add?.(7);
    // combo +1 ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    score.combo = (score.combo||0) + 1;
    if (hud?.setCombo) hud.setCombo(score.combo);
    fx?.popText?.('+7',{color:'#7fffd4'});

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    ctx.targetHits = (ctx.targetHits||0) + 1;

    // ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏™‡∏±‡πâ‡∏ô ‡πÜ
    coach?.say?.(lang==='TH' ? '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏î‡∏ô!' : 'On target!');
    sfx?.good?.();

    // ‡∏ó‡∏∏‡∏Å‡πÜ 3 ‡∏ä‡∏¥‡πâ‡∏ô‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤ ‚Üí ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
    if (ctx.targetHits >= 3){
      rotateTarget(state, hud);
      ctx.targetHits = 0;
    }
    return;
  }

  // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ñ‡∏π‡∏Å‡∏´‡∏°‡∏π‡πà‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏õ‡πâ‡∏≤ (‡πÄ‡∏ä‡πá‡∏Ñ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡πà‡∏≤ meta.groupKey ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô 5 ‡∏´‡∏°‡∏π‡πà)
  if (GROUPS[meta.groupKey]){
    score?.add?.(2);
    fx?.popText?.('+2',{color:'#9fdcff'});
    // ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö
    coach?.say?.(lang==='TH' ? '‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏õ‡πâ‡∏≤' : 'Okay, not the target');
    sfx?.tick?.();
    return;
  }

  // ‡∏ú‡∏¥‡∏î‡∏´‡∏°‡∏π‡πà (‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏î ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 5 ‡∏´‡∏°‡∏π‡πà)
  score?.add?.(-2);
  score.combo = 0; if (hud?.setCombo) hud.setCombo(0);
  state.ctx.wrongGroup = (state.ctx.wrongGroup||0) + 1;
  fx?.popText?.('-2',{color:'#ff7a7a'});
  coach?.say?.(lang==='TH' ? '‡∏ú‡∏¥‡∏î‡∏´‡∏°‡∏ß‡∏î!' : 'Wrong group!');
  sfx?.bad?.();
}

// ===== Helpers =====
function rotateTarget(state, hud){
  const current = state.ctx.groups.target;
  const pool = GROUP_KEYS.filter(k=>k!==current);
  const next = pick(pool);
  state.ctx.groups.target = next;
  setTargetHUD(state, hud);
}

function setTargetHUD(state, hud){
  const lang = (state.lang || 'TH');
  const key = state.ctx.groups.target;
  const label = badgeOf(key, lang);
  // ‡∏ñ‡πâ‡∏≤ HUD ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö API ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  if (hud?.setTargetBadge) hud.setTargetBadge(label);
  else {
    // fallback: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á DOM ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const b = document.getElementById('targetBadge');
    if (b) b.textContent = label;
    const wrap = document.getElementById('targetWrap');
    if (wrap) wrap.style.display = 'block';
  }
}

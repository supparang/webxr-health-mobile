// === Hero Health Academy ‚Äî game/modes/groups.js (Floating icons with TTL, target quota & autoswitch) ===
export const name = 'groups';

// ---------- ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà ‚Äú‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏°‚Äù ‡πÑ‡∏î‡πâ ----------
const TUNING = {
  // ‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏î‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà
  quotaByDiff: { Easy: 3, Normal: 4, Hard: 5 },

  // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏∏‡πà‡∏°‡∏ä‡∏¥‡πâ‡∏ô ‚Äú‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‚Äù (0‚Äì1) ‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏π‡∏á‡∏¢‡∏¥‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ö‡πà‡∏≠‡∏¢
  targetBias: 0.60,

  // TTL/‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å (‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‚Äî main.js ‡∏à‡∏∞‡πÉ‡∏ä‡πâ meta.life ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  ttlByDiff: { Easy: 4200, Normal: 3000, Hard: 2200 },

  // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤
  autoswitchSec: 18,

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ ‚Äú‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‚Äù ‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏î‡∏¥‡∏°
  avoidRepeatGroup: true,
};

// ---------- ‡∏Å‡∏•‡∏∏‡πà‡∏°/‡∏´‡∏°‡∏ß‡∏î ----------
const GROUPS = [
  { id:'fruits',  labelTH:'‡∏ú‡∏•‡πÑ‡∏°‡πâ',     labelEN:'Fruits',     color:'#ef4444' },
  { id:'veggies', labelTH:'‡∏ú‡∏±‡∏Å',        labelEN:'Vegetables', color:'#22c55e' },
  { id:'protein', labelTH:'‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô',     labelEN:'Protein',    color:'#3b82f6' },
  { id:'grains',  labelTH:'‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä',     labelEN:'Grains',     color:'#f59e0b' },
];

// ---------- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥) ----------
const ITEMS = [
  // Fruits (12)
  { id:'apple',      group:'fruits',  labelEN:'Apple',      labelTH:'‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡∏•',       icon:'üçé' },
  { id:'banana',     group:'fruits',  labelEN:'Banana',     labelTH:'‡∏Å‡∏•‡πâ‡∏ß‡∏¢',         icon:'üçå' },
  { id:'strawberry', group:'fruits',  labelEN:'Strawberry', labelTH:'‡∏™‡∏ï‡∏£‡∏≠‡∏ß‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà', icon:'üçì' },
  { id:'watermelon', group:'fruits',  labelEN:'Watermelon', labelTH:'‡πÅ‡∏ï‡∏á‡πÇ‡∏°',          icon:'üçâ' },
  { id:'orange',     group:'fruits',  labelEN:'Orange',     labelTH:'‡∏™‡πâ‡∏°',            icon:'üçä' },
  { id:'grapes',     group:'fruits',  labelEN:'Grapes',     labelTH:'‡∏≠‡∏á‡∏∏‡πà‡∏ô',          icon:'üçá' },
  { id:'pineapple',  group:'fruits',  labelEN:'Pineapple',  labelTH:'‡∏™‡∏±‡∏ö‡∏õ‡∏∞‡∏£‡∏î',        icon:'üçç' },
  { id:'mango',      group:'fruits',  labelEN:'Mango',      labelTH:'‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á',         icon:'ü•≠' },
  { id:'cherry',     group:'fruits',  labelEN:'Cherry',     labelTH:'‡πÄ‡∏ä‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà',        icon:'üçí' },
  { id:'peach',      group:'fruits',  labelEN:'Peach',      labelTH:'‡∏û‡∏µ‡∏ä',            icon:'üçë' },
  { id:'lemon',      group:'fruits',  labelEN:'Lemon',      labelTH:'‡∏°‡∏∞‡∏ô‡∏≤‡∏ß',          icon:'üçã' },
  { id:'kiwi',       group:'fruits',  labelEN:'Kiwi',       labelTH:'‡∏Å‡∏µ‡∏ß‡∏µ',           icon:'ü•ù' },

  // Veggies (12)
  { id:'carrot',     group:'veggies', labelEN:'Carrot',     labelTH:'‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó',         icon:'ü•ï' },
  { id:'broccoli',   group:'veggies', labelEN:'Broccoli',   labelTH:'‡∏ö‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏•‡∏µ',      icon:'ü•¶' },
  { id:'cucumber',   group:'veggies', labelEN:'Cucumber',   labelTH:'‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤',        icon:'ü•í' },
  { id:'tomato',     group:'veggies', labelEN:'Tomato',     labelTH:'‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®',      icon:'üçÖ' },
  { id:'corn',       group:'veggies', labelEN:'Corn',       labelTH:'‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î',        icon:'üåΩ' },
  { id:'lettuce',    group:'veggies', labelEN:'Lettuce',    labelTH:'‡∏ú‡∏±‡∏Å‡πÉ‡∏ö',          icon:'ü•¨' },
  { id:'mushroom',   group:'veggies', labelEN:'Mushroom',   labelTH:'‡πÄ‡∏´‡πá‡∏î',           icon:'üçÑ' },
  { id:'salad',      group:'veggies', labelEN:'Salad',      labelTH:'‡∏™‡∏•‡∏±‡∏î‡∏ú‡∏±‡∏Å',        icon:'ü•ó' },
  { id:'chili',      group:'veggies', labelEN:'Chili',      labelTH:'‡∏û‡∏£‡∏¥‡∏Å',           icon:'üå∂Ô∏è' },
  { id:'onion',      group:'veggies', labelEN:'Onion',      labelTH:'‡∏´‡∏±‡∏ß‡∏´‡∏≠‡∏°',         icon:'üßÖ' },
  { id:'garlic',     group:'veggies', labelEN:'Garlic',     labelTH:'‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°',       icon:'üßÑ' },
  { id:'potato',     group:'veggies', labelEN:'Potato',     labelTH:'‡∏°‡∏±‡∏ô‡∏ù‡∏£‡∏±‡πà‡∏á',        icon:'ü•î' },

  // Protein (14)
  { id:'egg',        group:'protein', labelEN:'Egg',        labelTH:'‡πÑ‡∏Ç‡πà',            icon:'ü•ö' },
  { id:'fish',       group:'protein', labelEN:'Fish',       labelTH:'‡∏õ‡∏•‡∏≤',            icon:'üêü' },
  { id:'tofu',       group:'protein', labelEN:'Tofu',       labelTH:'‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ',         icon:'üç¢' },
  { id:'chicken',    group:'protein', labelEN:'Chicken',    labelTH:'‡πÑ‡∏Å‡πà',            icon:'üçó' },
  { id:'beef',       group:'protein', labelEN:'Beef',       labelTH:'‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ß',       icon:'ü•©' },
  { id:'shrimp',     group:'protein', labelEN:'Shrimp',     labelTH:'‡∏Å‡∏∏‡πâ‡∏á',            icon:'ü¶ê' },
  { id:'crab',       group:'protein', labelEN:'Crab',       labelTH:'‡∏õ‡∏π',              icon:'ü¶Ä' },
  { id:'squid',      group:'protein', labelEN:'Squid',      labelTH:'‡∏´‡∏°‡∏∂‡∏Å',            icon:'ü¶ë' },
  { id:'peanuts',    group:'protein', labelEN:'Peanuts',    labelTH:'‡∏ñ‡∏±‡πà‡∏ß‡∏•‡∏¥‡∏™‡∏á',       icon:'ü•ú' },
  { id:'soybeans',   group:'protein', labelEN:'Soybeans',   labelTH:'‡∏ñ‡∏±‡πà‡∏ß‡πÄ‡∏°‡∏•‡πá‡∏î‡πÅ‡∏´‡πâ‡∏á',  icon:'ü´ò' },
  { id:'milk',       group:'protein', labelEN:'Milk',       labelTH:'‡∏ô‡∏°',             icon:'ü•õ' },
  { id:'cheese',     group:'protein', labelEN:'Cheese',     labelTH:'‡∏ä‡∏µ‡∏™',            icon:'üßÄ' },
  { id:'ham',        group:'protein', labelEN:'Ham',        labelTH:'‡πÅ‡∏Æ‡∏°/‡πÄ‡∏ö‡∏Ñ‡∏≠‡∏ô',      icon:'ü•ì' },
  { id:'sausage',    group:'protein', labelEN:'Sausage',    labelTH:'‡πÑ‡∏™‡πâ‡∏Å‡∏£‡∏≠‡∏Å',        icon:'üå≠' },

  // Grains (12)
  { id:'rice',       group:'grains',  labelEN:'Rice',       labelTH:'‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢',        icon:'üçö' },
  { id:'bread',      group:'grains',  labelEN:'Bread',      labelTH:'‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á',         icon:'üçû' },
  { id:'noodles',    group:'grains',  labelEN:'Noodles',    labelTH:'‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß',     icon:'üçú' },
  { id:'spaghetti',  group:'grains',  labelEN:'Spaghetti',  labelTH:'‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡∏ï‡∏ï‡∏µ',       icon:'üçù' },
  { id:'croissant',  group:'grains',  labelEN:'Croissant',  labelTH:'‡∏Ñ‡∏£‡∏±‡∏ß‡∏ã‡∏≠‡∏á‡∏ï‡πå',       icon:'ü•ê' },
  { id:'pancake',    group:'grains',  labelEN:'Pancake',    labelTH:'‡πÅ‡∏û‡∏ô‡πÄ‡∏Ñ‡πâ‡∏Å',         icon:'ü•û' },
  { id:'burrito',    group:'grains',  labelEN:'Burrito',    labelTH:'‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏¥‡πÇ‡∏ï',       icon:'üåØ' },
  { id:'sandwich',   group:'grains',  labelEN:'Sandwich',   labelTH:'‡πÅ‡∏ã‡∏ô‡∏î‡πå‡∏ß‡∏¥‡∏ä',        icon:'ü•™' },
  { id:'taco',       group:'grains',  labelEN:'Taco',       labelTH:'‡∏ó‡∏≤‡πÇ‡∏Å‡πâ',           icon:'üåÆ' },
  { id:'pie',        group:'grains',  labelEN:'Pie',        labelTH:'‡∏û‡∏≤‡∏¢',             icon:'ü•ß' },
  { id:'cookie',     group:'grains',  labelEN:'Cookie',     labelTH:'‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ',          icon:'üç™' },
  { id:'donut',      group:'grains',  labelEN:'Donut',      labelTH:'‡πÇ‡∏î‡∏ô‡∏±‡∏ó',           icon:'üç©' },
];

// ---------- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏´‡∏°‡∏î ----------
const ST = {
  lang: 'TH',
  targetId: 'fruits',
  need: 4,            // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏ï‡∏≠‡∏ô init()
  got: 0,
  lastSwitchMs: 0,    // ‡πÄ‡∏ß‡∏•‡∏≤ (ms) ‡∏ï‡∏≠‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
};

// ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢ ----------
const t = (th, en, lang)=> (lang==='EN' ? en : th);
const now = ()=> (performance?.now?.() || Date.now());
function pickDifferent(list, prev){
  if (!prev) return list[(Math.random()*list.length)|0];
  const cand = list.filter(x=>x!==prev);
  return cand.length? cand[(Math.random()*cand.length)|0] : prev;
}
function showTargetHUD(show){
  const wrap = document.getElementById('targetWrap');
  if (wrap) wrap.style.display = show ? 'block' : 'none';
}
function updateTargetBadge(){
  const g = GROUPS.find(x=>x.id===ST.targetId);
  const badge = document.getElementById('targetBadge');
  if (badge){
    badge.textContent = t(g.labelTH, g.labelEN, ST.lang) + `  (${ST.got}/${ST.need})`;
    badge.style.fontWeight = '800';
  }
  const tLabel = document.getElementById('t_target');
  if (tLabel) tLabel.textContent = t('‡∏´‡∏°‡∏ß‡∏î', 'Target', ST.lang);
}
function switchTarget(forced=false){
  const ids = GROUPS.map(g=>g.id);
  ST.targetId = (TUNING.avoidRepeatGroup && ST.targetId)
    ? pickDifferent(ids, ST.targetId)
    : ids[(Math.random()*ids.length)|0];
  ST.got = 0;
  ST.lastSwitchMs = now();
  updateTargetBadge();
  return forced;
}

// ---------- API ‡πÉ‡∏´‡πâ main.js ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å ----------
export function init(gameState, hud, diff){
  // ‡∏†‡∏≤‡∏©‡∏≤
  ST.lang = (localStorage.getItem('hha_lang')||'TH');

  // ‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
  const d = (gameState?.difficulty)||'Normal';
  ST.need = TUNING.quotaByDiff[d] ?? 4;

  // ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  switchTarget(false);

  // ‡πÇ‡∏ä‡∏ß‡πå HUD ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
  showTargetHUD(true);

  // ‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏ä‡∏û‡∏π‡∏î
  try {
    const g = GROUPS.find(x=>x.id===ST.targetId);
    const msg = t(`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${g.labelTH}`, `Target: ${g.labelEN}`, ST.lang);
    gameState?.coach?.say?.(msg);
  } catch {}
}

export function cleanup(){
  showTargetHUD(false);
}

// main.js ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (dt ~ 1s)
export function tick(state /* gameState */, systems /* {score,sfx,power,coach,...} */){
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏ä‡πâ‡∏≤ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤) ‡πÄ‡∏Å‡∏¥‡∏ô autoswitchSec ‚Üí ‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏ä‡πà‡∏ß‡∏¢‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  if (ST.got < ST.need){
    const waited = (now() - ST.lastSwitchMs) / 1000;
    if (waited >= TUNING.autoswitchSec){
      switchTarget(true);
      systems?.coach?.say?.(t('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î!', 'New target!', ST.lang));
      try { systems?.sfx?.play?.('powerup'); } catch {}
    }
  }
}

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠ main.js spawn ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡∏¥‡πâ‡∏ô ‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏≤‡∏° meta ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏î
export function pickMeta(diff, gameState){
  const d = (gameState?.difficulty)||'Normal';
  const life = TUNING.ttlByDiff[d] ?? (diff?.life || 3000);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ targetBias
  const pool = (Math.random() < TUNING.targetBias)
    ? ITEMS.filter(i=>i.group===ST.targetId)
    : ITEMS.filter(i=>i.group!==ST.targetId);

  // ‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ pool ‡∏ß‡πà‡∏≤‡∏á (‡πÄ‡∏ä‡πà‡∏ô bias ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏•‡∏±‡∏ö)
  const list = pool.length ? pool : ITEMS;
  const it = list[(Math.random()*list.length)|0];

  return {
    id: it.id,
    char: it.icon,
    good: (it.group === ST.targetId),
    life, // TTL ‡∏Ç‡∏≠‡∏á‡∏ä‡∏¥‡πâ‡∏ô‡∏ô‡∏µ‡πâ (main.js ‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á setTimeout ‡∏•‡∏ö‡πÄ‡∏≠‡∏á)
  };
}

// ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡∏¥‡πâ‡∏ô
export function onHit(meta, systems){
  if (meta.good){
    ST.got++;
    updateTargetBadge();
    systems?.coach?.say?.(t('‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏¢!', 'Nice!', ST.lang));

    if (ST.got >= ST.need){
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ ‚Üí ‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      switchTarget(true);
      try { systems?.sfx?.play?.('powerup'); } catch {}
      systems?.coach?.say?.(t('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î!', 'New target!', ST.lang));
    }
    return 'good'; // main.js ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö/FEVER ‡πÉ‡∏´‡πâ
  }

  // ‡∏Å‡∏î‡∏ú‡∏¥‡∏î‡∏´‡∏°‡∏ß‡∏î
  systems?.coach?.say?.(t('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡∏ô‡∏∞', 'Not this group!', ST.lang));
  return 'bad';
}

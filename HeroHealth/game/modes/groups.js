// === Hero Health Academy ‚Äî game/modes/groups.js ===
// Floating icons ‡πÅ‡∏ö‡∏ö goodjunk + Multi-Target + Powers (x2/freeze/magnet) + Golden
// ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö styles/group.css ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ html[data-hha-mode="groups"]

import { Progress } from '../core/progression.js';

export const name = 'groups';

/* ---------- Groups & Items ---------- */
const GROUPS = [
  { id:'fruits',  labelTH:'‡∏ú‡∏•‡πÑ‡∏°‡πâ',     labelEN:'Fruits',     color:'#ef4444' },
  { id:'veggies', labelTH:'‡∏ú‡∏±‡∏Å',        labelEN:'Vegetables', color:'#22c55e' },
  { id:'protein', labelTH:'‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô',     labelEN:'Protein',    color:'#3b82f6' },
  { id:'grains',  labelTH:'‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä',     labelEN:'Grains',     color:'#f59e0b' },
];

const ITEMS = [
  // Fruits (12)
  { id:'apple',      group:'fruits',  labelEN:'Apple',      labelTH:'‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡∏•',       icon:'üçé' },
  { id:'banana',     group:'fruits',  labelEN:'Banana',     labelTH:'‡∏Å‡∏•‡πâ‡∏ß‡∏¢',         icon:'üçå' },
  { id:'strawberry', group:'fruits',  labelEN:'Strawberry', labelTH:'‡∏™‡∏ï‡∏£‡∏≠‡∏ß‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà', icon:'üçì' },
  { id:'watermelon', group:'fruits',  labelEN:'Watermelon', labelTH:'‡πÅ‡∏ï‡∏á‡πÇ‡∏°',          icon:'üçâ' },
  { id:'orange',     group:'fruits',  labelEN:'Orange',     labelTH:'‡∏™‡πâ‡∏°',            icon:'üçä' },
  { id:'grapes',     group:'fruits',  labelEN:'Grapes',     labelTH:'‡∏≠‡∏á‡∏∏‡πà‡∏ô',          icon:'üçá' },
  { id:'pineapple',  group:'fruits',  labelEN:'Pineapple',  labelTH:'‡∏™‡∏±‡∏ö‡∏õ‡∏∞‡∏£‡∏î',        icon:'üçç' },
  { id:'mango',      group:'fruits',  labelEN:'Mango',      labelTH:'‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á',         icon:'ü•≠' },
  { id:'cherry',     group:'fruits',  labelEN:'Cherry',     labelTH:'‡πÄ‡∏ä‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà',        icon:'üçí' },
  { id:'peach',      group:'fruits',  labelEN:'Peach',      labelTH:'‡∏û‡∏µ‡∏ä',            icon:'üçë' },
  { id:'lemon',      group:'fruits',  labelEN:'Lemon',      labelTH:'‡∏°‡∏∞‡∏ô‡∏≤‡∏ß',          icon:'üçã' },
  { id:'kiwi',       group:'fruits',  labelEN:'Kiwi',       labelTH:'‡∏Å‡∏µ‡∏ß‡∏µ',           icon:'ü•ù' },

  // Veggies (12)
  { id:'carrot',     group:'veggies', labelEN:'Carrot',     labelTH:'‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó',         icon:'ü•ï' },
  { id:'broccoli',   group:'veggies', labelEN:'Broccoli',   labelTH:'‡∏ö‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏•‡∏µ',      icon:'ü•¶' },
  { id:'cucumber',   group:'veggies', labelEN:'Cucumber',   labelTH:'‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤',        icon:'ü•í' },
  { id:'tomato',     group:'veggies', labelEN:'Tomato',     labelTH:'‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®',      icon:'üçÖ' },
  { id:'corn',       group:'veggies', labelEN:'Corn',       labelTH:'‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î',        icon:'üåΩ' },
  { id:'lettuce',    group:'veggies', labelEN:'Lettuce',    labelTH:'‡∏ú‡∏±‡∏Å‡πÉ‡∏ö',          icon:'ü•¨' },
  { id:'mushroom',   group:'veggies', labelEN:'Mushroom',   labelTH:'‡πÄ‡∏´‡πá‡∏î',           icon:'üçÑ' },
  { id:'salad',      group:'veggies', labelEN:'Salad',      labelTH:'‡∏™‡∏•‡∏±‡∏î‡∏ú‡∏±‡∏Å',        icon:'ü•ó' },
  { id:'chili',      group:'veggies', labelEN:'Chili',      labelTH:'‡∏û‡∏£‡∏¥‡∏Å',           icon:'üå∂Ô∏è' },
  { id:'onion',      group:'veggies', labelEN:'Onion',      labelTH:'‡∏´‡∏±‡∏ß‡∏´‡∏≠‡∏°',         icon:'üßÖ' },
  { id:'garlic',     group:'veggies', labelEN:'Garlic',     labelTH:'‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°',       icon:'üßÑ' },
  { id:'potato',     group:'veggies', labelEN:'Potato',     labelTH:'‡∏°‡∏±‡∏ô‡∏ù‡∏£‡∏±‡πà‡∏á',        icon:'ü•î' },

  // Protein (14)
  { id:'egg',        group:'protein', labelEN:'Egg',        labelTH:'‡πÑ‡∏Ç‡πà',            icon:'ü•ö' },
  { id:'fish',       group:'protein', labelEN:'Fish',       labelTH:'‡∏õ‡∏•‡∏≤',            icon:'üêü' },
  { id:'tofu',       group:'protein', labelEN:'Tofu',       labelTH:'‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ',         icon:'üç¢' },
  { id:'chicken',    group:'protein', labelEN:'Chicken',    labelTH:'‡πÑ‡∏Å‡πà',            icon:'üçó' },
  { id:'beef',       group:'protein', labelEN:'Beef',       labelTH:'‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ß',       icon:'ü•©' },
  { id:'shrimp',     group:'protein', labelEN:'Shrimp',     labelTH:'‡∏Å‡∏∏‡πâ‡∏á',            icon:'ü¶ê' },
  { id:'crab',       group:'protein', labelEN:'Crab',       labelTH:'‡∏õ‡∏π',              icon:'ü¶Ä' },
  { id:'squid',      group:'protein', labelEN:'Squid',      labelTH:'‡∏´‡∏°‡∏∂‡∏Å',            icon:'ü¶ë' },
  { id:'peanuts',    group:'protein', labelEN:'Peanuts',    labelTH:'‡∏ñ‡∏±‡πà‡∏ß‡∏•‡∏¥‡∏™‡∏á',       icon:'ü•ú' },
  { id:'soybeans',   group:'protein', labelEN:'Soybeans',   labelTH:'‡∏ñ‡∏±‡πà‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á',      icon:'ü´ò' },
  { id:'milk',       group:'protein', labelEN:'Milk',       labelTH:'‡∏ô‡∏°',             icon:'ü•õ' },
  { id:'cheese',     group:'protein', labelEN:'Cheese',     labelTH:'‡∏ä‡∏µ‡∏™',            icon:'üßÄ' },
  { id:'ham',        group:'protein', labelEN:'Ham',        labelTH:'‡πÅ‡∏Æ‡∏°/‡πÄ‡∏ö‡∏Ñ‡∏≠‡∏ô',      icon:'ü•ì' },
  { id:'sausage',    group:'protein', labelEN:'Sausage',    labelTH:'‡πÑ‡∏™‡πâ‡∏Å‡∏£‡∏≠‡∏Å',        icon:'üå≠' },

  // Grains (12)
  { id:'rice',       group:'grains',  labelEN:'Rice',       labelTH:'‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢',        icon:'üçö' },
  { id:'bread',      group:'grains',  labelEN:'Bread',      labelTH:'‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á',         icon:'üçû' },
  { id:'noodles',    group:'grains',  labelEN:'Noodles',    labelTH:'‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß',     icon:'üçú' },
  { id:'spaghetti',  group:'grains',  labelEN:'Spaghetti',  labelTH:'‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡∏ï‡∏ï‡∏µ',       icon:'üçù' },
  { id:'croissant',  group:'grains',  labelEN:'Croissant',  labelTH:'‡∏Ñ‡∏£‡∏±‡∏ß‡∏ã‡∏≠‡∏á‡∏ï‡πå',       icon:'ü•ê' },
  { id:'pancake',    group:'grains',  labelEN:'Pancake',    labelTH:'‡πÅ‡∏û‡∏ô‡πÄ‡∏Ñ‡πâ‡∏Å',         icon:'ü•û' },
  { id:'burrito',    group:'grains',  labelEN:'Burrito',    labelTH:'‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏¥‡πÇ‡∏ï',       icon:'üåØ' },
  { id:'sandwich',   group:'grains',  labelEN:'Sandwich',   labelTH:'‡πÅ‡∏ã‡∏ô‡∏î‡πå‡∏ß‡∏¥‡∏ä',        icon:'ü•™' },
  { id:'taco',       group:'grains',  labelEN:'Taco',       labelTH:'‡∏ó‡∏≤‡πÇ‡∏Å‡πâ',           icon:'üåÆ' },
  { id:'pie',        group:'grains',  labelEN:'Pie',        labelTH:'‡∏û‡∏≤‡∏¢',             icon:'ü•ß' },
  { id:'cookie',     group:'grains',  labelEN:'Cookie',     labelTH:'‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ',          icon:'üç™' },
  { id:'donut',      group:'grains',  labelEN:'Donut',      labelTH:'‡πÇ‡∏î‡∏ô‡∏±‡∏ó',           icon:'üç©' },
];

/* ---------- State ---------- */
const ST = {
  lang: 'TH',

  // ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏∏‡πà‡∏° 1‚Äì3 ‡∏´‡∏°‡∏ß‡∏î/‡∏£‡∏≠‡∏ö
  targetIds: ['fruits'],
  needPerTarget: 4,
  gotPerTarget: {},

  // ‡∏û‡∏•‡∏±‡∏á
  x2Until: 0,
  freezeUntil: 0,
  magnetOnce: false,    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏∏‡πà‡∏° target ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß

  // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏≠‡∏á (‡πÇ‡∏ö‡∏ô‡∏±‡∏™)
  goldenRate: 0.12
};

/* ---------- API for main.js ---------- */
export function init(gameState, hud, diff){
  ST.lang = (localStorage.getItem('hha_lang')||'TH');

  // ‡∏ï‡∏¥‡∏î‡∏ò‡∏á‡πÇ‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ CSS ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (styles/group.css)
  try { document.documentElement.setAttribute('data-hha-mode', 'groups'); } catch {}

  // ‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö
  const d = gameState?.difficulty || 'Normal';
  ST.needPerTarget = d==='Easy' ? 3 : d==='Hard' ? 5 : 4;

  // ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ 1‚Äì3
  const howMany = 1 + ((Math.random()*3)|0);
  ST.targetIds = pickN(shuffle(GROUPS.map(g=>g.id)), howMany);

  ST.gotPerTarget = {};
  for (const id of ST.targetIds) ST.gotPerTarget[id] = 0;

  renderTargetHUD();
  Progress.event('mode_init', { mode:'groups', targetIds: ST.targetIds, need: ST.needPerTarget });
}

export function cleanup(){
  // ‡πÄ‡∏≠‡∏≤‡∏ò‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°
  try { if (document.documentElement.getAttribute('data-hha-mode') === 'groups') {
    document.documentElement.removeAttribute('data-hha-mode');
  }} catch {}
}

export function tick(/* state, systems, hud */){
  // TTL/Spawn ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢ main.js ‡πÅ‡∏•‡πâ‡∏ß ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
}

/** main.js ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Å‡πà‡∏≠‡∏ô spawn ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏¥‡πâ‡∏ô */
export function pickMeta(diff, /* gameState */){
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏à‡∏≠ target ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏°‡πà‡πÄ‡∏´‡∏•‡πá‡∏Å
  const baseProb = 0.58;
  const probTarget = ST.magnetOnce ? 0.92 : baseProb;
  if (ST.magnetOnce) ST.magnetOnce = false; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

  const isTarget  = Math.random() < probTarget;
  const pool = isTarget ? ITEMS.filter(i => ST.targetIds.includes(i.group)) : ITEMS;
  const it = pool[(Math.random()*pool.length)|0];

  const lifeBase = (diff?.life ?? 3000);
  const life = Math.max(900, lifeBase * (isFrozen() ? 1.8 : 1.0));

  const golden = isTarget && Math.random() < ST.goldenRate;

  return {
    id: it.id,
    char: golden ? 'üü°' : it.icon,  // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå ‚Äú‡∏ó‡∏≠‡∏á‚Äù
    good: ST.targetIds.includes(it.group),
    life,
    groupId: it.group,
    golden
  };
}

/** ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô */
export function onHit(meta, systems /*, gameState, hud */){
  if (!meta) return 'ok';

  if (meta.good){
    if (meta.groupId in ST.gotPerTarget){
      ST.gotPerTarget[meta.groupId] = Math.min(ST.needPerTarget, (ST.gotPerTarget[meta.groupId]||0) + 1);
      renderTargetHUD();
      Progress.event('groups_hit', { good:true, groupId: meta.groupId, golden: !!meta.golden });

      // ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ ‚Üí ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
      const doneAll = Object.keys(ST.gotPerTarget).every(id => ST.gotPerTarget[id] >= ST.needPerTarget);
      if (doneAll){
        const howMany = 1 + ((Math.random()*3)|0);
        ST.targetIds = pickN(shuffle(GROUPS.map(g=>g.id)), howMany);
        ST.gotPerTarget = {};
        for (const id of ST.targetIds) ST.gotPerTarget[id] = 0;
        renderTargetHUD();
        systems.sfx?.play?.('powerup');
        systems.coach?.say?.(t('‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà!', 'New targets!', ST.lang));
        Progress.event('groups_cycle', { targetIds: ST.targetIds, need: ST.needPerTarget });
      }
    }

    if (meta.golden){
      systems.coach?.say?.(t('‡∏ó‡∏≠‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß!', 'Golden!', ST.lang));
      Progress.event('golden', { mode:'groups' });
    }

    return 'good';
  }

  // ‡∏Å‡∏î‡∏ú‡∏¥‡∏î‡∏´‡∏°‡∏ß‡∏î
  systems.coach?.say?.(t('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡∏ô‡∏∞', 'Not this group!', ST.lang));
  Progress.event('groups_hit', { good:false, groupId: meta.groupId||null, golden: !!meta.golden });
  return 'bad';
}

/* ---------- Powers (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å main.js) ---------- */
export const powers = {
  x2Target(){
    // ‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÉ‡∏´‡πâ main.js ‡∏Ñ‡∏π‡∏ì‡∏ï‡∏≤‡∏° FEVER/Combo ‡∏≠‡∏¢‡∏π‡πà
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ß‡πâ ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ logic ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    ST.x2Until = now() + 8000;
  },
  freezeTarget(){
    ST.freezeUntil = now() + 3000;
  },
  magnetNext(){
    ST.magnetOnce = true;
  }
};

export function getPowerDurations(){
  // main.js ‡πÉ‡∏ä‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ö CD/‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô powerbar
  return { x2:8, freeze:3, magnet:0 };
}

/* ---------- HUD ---------- */
function renderTargetHUD(){
  const wrap  = document.getElementById('targetWrap');
  const badge = document.getElementById('targetBadge');
  const tLabel= document.getElementById('t_target');
  if (!wrap || !badge || !tLabel) return;

  wrap.style.display = 'inline-flex';
  tLabel.textContent = t('‡∏´‡∏°‡∏ß‡∏î', 'Target', ST.lang);

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ú‡∏•‡πÑ‡∏°‡πâ(2/4), ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô(1/4)
  const parts = ST.targetIds.map(id=>{
    const g = GROUPS.find(x=>x.id===id);
    const got = ST.gotPerTarget[id] || 0;
    const need = ST.needPerTarget;
    return `${t(g.labelTH, g.labelEN, ST.lang)}(${got}/${need})`;
  });
  badge.textContent = parts.join(', ');
}

/* ---------- utils ---------- */
function t(th, en, lang){ return lang==='EN' ? en : th; }
function shuffle(a){ for(let i=a.length-1;i>0;i--){ const j=(Math.random()*(i+1)|0); [a[i],a[j]]=[a[j],a[i]]; } return a; }
function pickN(a, n){ return a.slice(0, Math.max(1, Math.min(n, a.length))); }
function now(){ return performance?.now?.()||Date.now(); }
function isFrozen(){ return now() < (ST.freezeUntil||0); }

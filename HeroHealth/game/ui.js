// game/ui.js ‚Äî Stage 2: How-to-Play per mode + Interactive Tutorial + robust UI bindings

const $  = (s)=>document.querySelector(s);
const $$ = (s)=>document.querySelectorAll(s);

// ===== Ensure UI always clickable (canvas never blocks) =====
(function ensureLayers(){
  const c = $('#c'); if(c){ c.style.pointerEvents='none'; c.style.zIndex='1'; }
  ['hud','menu','modal','coach','item'].forEach(cls=>{
    document.querySelectorAll('.'+cls).forEach(el=>{
      const z = parseInt(getComputedStyle(el).zIndex || '100', 10);
      el.style.pointerEvents='auto';
      if (z < 100) el.style.zIndex = '100';
    });
  });
})();

// ===== Local UI state =====
const UI = {
  modeKey: 'goodjunk',       // track mode from clicks
  diff: 'Normal',
  lang: 'TH',
  seenHelp: JSON.parse(localStorage.getItem('hha_seen_help_per_mode')||'{}'), // {goodjunk:true}
};

// detect language from #langToggle initial text (fallback TH)
(function detectLang(){
  const txt = $('#langToggle')?.textContent || '';
  UI.lang = /TH/.test(txt) ? 'TH' : 'EN'; // crude but works; main.js ‡∏à‡∏∞ sync ‡πÄ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
})();

// ===== Mode selectors tracking =====
function bindModeDiffButtons(){
  // mode
  ['goodjunk','groups','hydration','plate'].forEach(key=>{
    const el = $('#m_'+key);
    el?.addEventListener('click', ()=>{ UI.modeKey = key; refreshModeLabel(); });
  });
  // difficulty
  [['Easy','d_easy'],['Normal','d_normal'],['Hard','d_hard']].forEach(([v, id])=>{
    $('#'+id)?.addEventListener('click', ()=>{ UI.diff=v; refreshModeLabel(); });
  });
}
function refreshModeLabel(){
  // ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö label ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ HTML ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà
  const mapTH = { goodjunk:'‡∏î‡∏µ vs ‡∏Ç‡∏¢‡∏∞', groups:'‡∏à‡∏≤‡∏ô 5 ‡∏´‡∏°‡∏π‡πà', hydration:'‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ô‡πâ‡∏≥', plate:'‡∏à‡∏±‡∏î‡∏à‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' };
  const mapEN = { goodjunk:'Good vs Junk', groups:'5 Food Groups', hydration:'Hydration', plate:'Healthy Plate' };
  const L = UI.lang==='TH' ? mapTH : mapEN;
  $('#modeName') && ($('#modeName').textContent = L[UI.modeKey]);
  $('#difficulty') && ($('#difficulty').textContent = UI.diff==='Normal' ? (UI.lang==='TH'?'‡∏õ‡∏Å‡∏ï‡∏¥':'Normal') :
                                             UI.diff==='Easy'   ? (UI.lang==='TH'?'‡∏á‡πà‡∏≤‡∏¢':'Easy') :
                                                                  (UI.lang==='TH'?'‡∏¢‡∏≤‡∏Å':'Hard'));
}
bindModeDiffButtons(); refreshModeLabel();

// ===== Audio helpers =====
const play = (sel,opts)=>{ try{ const a=$(sel); if(!a) return; Object.assign(a,opts||{}); a.currentTime=0; a.play(); }catch{} };
const SFX = {
  good: ()=>play('#sfx-good'),
  bad: ()=>play('#sfx-bad'),
  perfect: ()=>play('#sfx-perfect'),
  tick: ()=>play('#sfx-tick'),
  power: ()=>play('#sfx-powerup'),
  bgm: ()=>{ const a=$('#bgm-main'); if(a){ a.volume=0.45; a.play().catch(()=>{}); } },
};
const vibrate = (p)=>{ try{ navigator.vibrate?.(p); }catch{} };

// ===== Key dispatch (mouse mapping stays) =====
function dispatchKey(key){
  const ev = new KeyboardEvent('keydown', {key, bubbles:true});
  window.dispatchEvent(ev);
}
window.addEventListener('mousedown', (e)=>{
  if(e.button===0) { dispatchKey('ArrowUp');   vibrate(12); }
  if(e.button===2) { dispatchKey('ArrowDown'); vibrate(18); }
});
window.addEventListener('wheel', (e)=>{ if(e.deltaY<0) dispatchKey('ArrowLeft'); else dispatchKey('ArrowRight'); });
window.addEventListener('contextmenu', (e)=>{ e.preventDefault(); }, {passive:false});

// ===== How-to-Play content (per mode, TH/EN) =====
function howto(mode, lang){
  const T = {
    TH:{
      kb:`‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î: ‚Üë Jump, ‚Üì Duck, ‚Üê/‚Üí Dash, Space=Jump, Ctrl=Duck
‡πÄ‡∏°‡∏≤‡∏™‡πå: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢=Jump, ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤=Duck, ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡πâ‡∏≠=Dash`,
      goodjunk:`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏µ ü•¶üçé ‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞ üçîüçüü•§
‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö: ‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (x4/x8/x12 ‡∏°‡∏µ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏Ç‡∏±‡πâ‡∏ô)
Quick Double: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ 2 ‡∏ä‡∏¥‡πâ‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 600ms ‡πÑ‡∏î‡πâ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏û‡∏¥‡πà‡∏°
‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏¢‡πà‡∏≠‡∏¢: ‡πÇ‡∏ú‡∏•‡πà‡∏ö‡∏ô‡πÅ‡∏ñ‡∏ö Mission (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Å‡πá‡∏ö‡∏î‡∏µ 8 ‡∏ä‡∏¥‡πâ‡∏ô‡πÉ‡∏ô 15s)
‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå: üõ°Ô∏è ‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î / üåÄ ‡∏ä‡∏∞‡∏•‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ / ‚ú® ‡πÄ‡∏ï‡∏¥‡∏° Fever`,
      groups:`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á ‚Äú‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà HUD ‡∏£‡∏∞‡∏ö‡∏∏‚Äù
‡∏ñ‡∏π‡∏Å +7, ‡∏ú‡∏¥‡∏î -2 ‚Ä¢ ‡∏ó‡∏∏‡∏Å 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏∏‡∏Å ~10 ‡∏ß‡∏¥`,
      hydration:`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ô‡πâ‡∏≥ 45‚Äì65%
‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°:
‚Ä¢ üíß ‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤/‡πÅ‡∏£‡πà: ‡πÄ‡∏û‡∏¥‡πà‡∏°% ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏ö‡∏≤‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏°‡∏µ‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)
‚Ä¢ ü•§ ‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô/‚òï ‡∏Å‡∏≤‡πÅ‡∏ü: ‡∏•‡∏î%
‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©: ‡∏ñ‡πâ‡∏≤ % > 65 ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∑‡πà‡∏° ü•§ = ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô, ‡∏ñ‡πâ‡∏≤ % < 45 ‡∏î‡∏∑‡πà‡∏° ü•§ = ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏£‡∏¥‡∏°: N = Normalize (55%) ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå 25s ‚Ä¢ G = Guard 5s`,
      plate:`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏à‡∏±‡∏î‡∏à‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ (‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä2 ‡∏ú‡∏±‡∏Å2 ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô1 ‡∏ú‡∏•‡πÑ‡∏°‡πâ1 ‡∏ô‡∏°1)
‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚ÄúPerfect Plate!‚Äù ‡πÑ‡∏î‡πâ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏π‡∏á ‚Ä¢ ‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤/‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢`
    },
    EN:{
      kb:`Keyboard: ‚Üë Jump, ‚Üì Duck, ‚Üê/‚Üí Dash, Space=Jump, Ctrl=Duck
Mouse: LMB=Jump, RMB=Duck, Wheel=Dash`,
      goodjunk:`Goal: Collect healthy foods ü•¶üçé, avoid junk üçîüçüü•§
Combo: Continuous hits raise combo (x4/x8/x12 tier bonuses)
Quick Double: Two healthy hits within 600ms = extra bonus
Micro-missions: appear on Mission bar
Power-ups: üõ°Ô∏è Shield / üåÄ Slow-Time / ‚ú® Heal Fever`,
      groups:`Goal: Match the ‚Äútarget group‚Äù shown on HUD
Right +7, Wrong -2 ‚Ä¢ Target changes every 3 corrects or ~10s`,
      hydration:`Goal: Keep hydration 45‚Äì65%
Drinks:
‚Ä¢ üíß Water/Mineral: increases instantly (some add over-time)
‚Ä¢ ü•§ Sugary/‚òï Coffee: decreases
Special rule: If % > 65 then ü•§ = +score; if % < 45 then ü•§ = -score
Extra: N = Normalize (55%) cd 25s ‚Ä¢ G = Guard 5s`,
      plate:`Goal: Fill plate quotas (Grain2 Veg2 Protein1 Fruit1 Dairy1)
Complete all for ‚ÄúPerfect Plate!‚Äù bonus ‚Ä¢ Overfill reduces time/score slightly`
    }
  };
  const L = (lang==='EN') ? T.EN : T.TH;
  if (mode==='goodjunk')  return `${L.goodjunk}\n\n${L.kb}`;
  if (mode==='groups')    return `${L.groups}\n\n${L.kb}`;
  if (mode==='hydration') return `${L.hydration}\n\n${L.kb}`;
  if (mode==='plate')     return `${L.plate}\n\n${L.kb}`;
  return `${L.goodjunk}\n\n${L.kb}`;
}

// ===== Help modal handlers =====
function showHelp(mode=UI.modeKey){
  const help = $('#help'); const body = $('#helpBody'); const title = $('#h_help');
  if (help && body){
    if(title) title.textContent = (UI.lang==='TH'?'‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡πà‡∏ô':'How to Play');
    body.textContent = howto(mode, UI.lang);
    help.style.display='flex';
  }
}
function hideHelp(){ const help=$('#help'); if(help) help.style.display='none'; }
$('#btn_help')?.addEventListener('click', ()=> showHelp(UI.modeKey));
$('#btn_ok')?.addEventListener('click', ()=> hideHelp());

// ===== Result modal: replay/home =====
$('#result')?.addEventListener('click', (e)=>{
  const a=e.target.getAttribute('data-result');
  if(a==='replay'){ $('#result').style.display='none'; startFlow(); }
  if(a==='home'){   $('#result').style.display='none'; }
});

// ===== Pre-start interactive tutorial (per mode, once) =====
async function interactiveTutorial(mode){
  // coach bubble (re-use coachHUD)
  const coach = $('#coachHUD'); const text = $('#coachText');
  const say = (t)=>{ if(text) text.textContent=t; if(coach) coach.classList.add('show'); };
  const hush= ()=>{ if(coach) coach.classList.remove('show'); };

  const wait = (ms)=>new Promise(r=>setTimeout(r,ms));
  const waitForKey=(keys,ms=6000)=> new Promise(res=>{
    let done=false; function onKey(e){ if(done) return; if(keys.includes(e.key)){ done=true; window.removeEventListener('keydown',onKey); res(true);} }
    window.addEventListener('keydown',onKey); setTimeout(()=>{ if(!done){ window.removeEventListener('keydown',onKey); res(false); } }, ms);
  });

  // sequence
  say(UI.lang==='TH'?'‡πÄ‡∏î‡πÇ‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô 3‚Ä¶':'Demo starts in 3‚Ä¶'); SFX.tick(); await wait(700);
  say('2‚Ä¶'); SFX.tick(); await wait(650);
  say('1‚Ä¶'); SFX.tick(); await wait(650);

  // minimal tutorial per mode
  if (mode==='goodjunk'){
    say(UI.lang==='TH'?'‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ (‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ú‡∏±‡∏Å/‡∏ú‡∏•‡πÑ‡∏°‡πâ)! ‡∏Å‡∏î ‚Üë ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Jump':'Collect healthy foods! Press ‚Üë to Jump');
    await waitForKey(['ArrowUp',' '], 5500);
    say(UI.lang==='TH'?'‡∏•‡∏≠‡∏á ‚Üì ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Duck':'Try ‚Üì to Duck'); await waitForKey(['ArrowDown','Control','Ctrl'], 5500);
  } else if (mode==='groups'){
    say(UI.lang==='TH'?'‡∏î‡∏π‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏ö‡∏ô HUD ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á':'Match target group shown on HUD');
    await wait(1200);
  } else if (mode==='hydration'){
    say(UI.lang==='TH'?'‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡πà‡∏≤ üíß 45‚Äì65%! ‡∏Å‡∏î N ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Normalize':'Keep üíß 45‚Äì65%! Press N to Normalize');
    await waitForKey(['n','N'], 5500);
    say(UI.lang==='TH'?'‡∏Å‡∏î G ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Guard 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ':'Press G for 5s Guard'); await waitForKey(['g','G'], 5500);
  } else if (mode==='plate'){
    say(UI.lang==='TH'?'‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 5 ‡∏´‡∏°‡∏π‡πà':'Fill all 5 food quotas'); await wait(1200);
  }

  say(UI.lang==='TH'?'‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏à‡∏£‡∏¥‡∏á!':'Great! Starting the game!');
  await wait(600);
  hush();
}

// ===== Start flow: show help (once/mode) -> tutorial (once/mode) -> start =====
async function startFlow(){
  SFX.bgm();
  const key = UI.modeKey;
  // Show help once per mode
  if (!UI.seenHelp[key]){
    showHelp(key);
    // wait until user closes help
    await new Promise(res=>{
      const fn=()=>{ $('#help')?.removeEventListener('click',onOverlay); $('#btn_ok')?.removeEventListener('click',onOk); res(); };
      const onOk = ()=>{ hideHelp(); fn(); };
      const onOverlay=(e)=>{ if(e.target.id==='help') { hideHelp(); fn(); } };
      $('#btn_ok')?.addEventListener('click', onOk, {once:true});
      $('#help')?.addEventListener('click', onOverlay);
    });
    UI.seenHelp[key]=true;
    localStorage.setItem('hha_seen_help_per_mode', JSON.stringify(UI.seenHelp));
  }
  // Tutorial once per mode
  if (!localStorage.getItem('hha_seen_demo_'+key)){
    await interactiveTutorial(key);
    localStorage.setItem('hha_seen_demo_'+key, '1');
  }
  // Call game start in main.js
  if (window.preStartFlow) { window.preStartFlow(); } // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ
  else if (window.start)   { window.start(); }
}

// ===== Buttons =====
(function bindStartStrong(){
  const b = document.getElementById('btn_start');
  if (!b) return;
  // ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß bind ‡πÉ‡∏´‡∏°‡πà
  const clone = b.cloneNode(true);
  b.parentNode.replaceChild(clone, b);
  clone.addEventListener('click', (e)=>{
    e.preventDefault(); e.stopPropagation();
    // ‡πÉ‡∏ä‡πâ startFlow ‡∏Ç‡∏≠‡∏á ui.js ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (typeof startFlow === 'function') startFlow();
    else if (window.preStartFlow) window.preStartFlow();
    else if (window.HHA?.startGame) window.HHA.startGame({demoPassed:true});
    else if (window.start) window.start({demoPassed:true});
  }, {capture:true});
})();
$('#btn_restart')?.addEventListener('click', ()=>{ vibrate(18); if(window.end) window.end(true); startFlow(); });
$('#btn_pause')?.addEventListener('click', ()=>{ vibrate(12); /* main.js ‡∏£‡∏±‡∏ö‡πÑ‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ */ });

// ===== Language/GFX/Sound toggles ‚Äî ping sfx =====
$('#langToggle')?.addEventListener('click', ()=>{ SFX.tick(); UI.lang = (UI.lang==='TH'?'EN':'TH'); refreshModeLabel(); });
$('#gfxToggle') ?.addEventListener('click', ()=> SFX.tick());
$('#soundToggle')?.addEventListener('click', ()=> SFX.tick());

// ===== Debug overlay guard: log if something sits on top of Start =====
(function probeOverlay(){
  setTimeout(()=>{
    const b = $('#btn_start'); if(!b) return;
    const r = b.getBoundingClientRect(); const cx=r.left+r.width/2, cy=r.top+r.height/2;
    const stack = document.elementsFromPoint(cx, cy);
    if(stack && stack[0] !== b){ console.warn('[Overlay Detected on Start]', stack[0]); }
  }, 600);
})();

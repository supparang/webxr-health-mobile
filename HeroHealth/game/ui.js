// === Hero Health Academy ‚Äî game/ui.js (Stage 2.5)
// How-to-Play per mode + Interactive Tutorial + robust UI bindings
// - Canvas never blocks clicks
// - Safer button (re)binding + Esc/overlay close
// - Works with #result | #resultModal
// - One-time help+demo per mode, persisted in localStorage
// - Minimal public API on window.HHA_UI for main.js

/* ---------------- Mini helpers ---------------- */
const $  = (s)=>document.querySelector(s);
const $$ = (s)=>document.querySelectorAll(s);
const on  = (el,ev,fn,opt)=> el && el.addEventListener(ev,fn,opt||{});

/* ---------------- Keep UI clickable (canvas below) ---------------- */
(function ensureLayers(){
  const c = $('#c'); if (c){ c.style.pointerEvents='none'; c.style.zIndex='1'; }
  const cls = ['hud','menu','modal','coach','item'];
  cls.forEach(k=>{
    $$('.'+k).forEach(el=>{
      const z = parseInt(getComputedStyle(el).zIndex || '100', 10);
      el.style.pointerEvents = 'auto';
      if (z < 100) el.style.zIndex = '100';
    });
  });
})();

/* ---------------- Local UI state ---------------- */
const UI = {
  modeKey: 'goodjunk',
  diff: 'Normal',
  lang: 'TH',
  seenHelp: JSON.parse(localStorage.getItem('hha_seen_help_per_mode')||'{}'), // {goodjunk:true}
};

// detect language from #langToggle initial text (fallback TH)
(function detectLang(){
  const t = ($('#langToggle')?.textContent || '').trim();
  UI.lang = /TH\b/i.test(t) ? 'TH' : (/EN\b/i.test(t) ? 'EN' : 'TH');
})();

/* ---------------- Mode/difficulty bindings ---------------- */
function bindModeDiffButtons(){
  // modes
  ['goodjunk','groups','hydration','plate'].forEach(key=>{
    on($('#m_'+key),'click', ()=>{
      UI.modeKey = key;
      refreshModeLabel();
      document.body.dataset.mode = key;
    });
  });
  // difficulty
  [['Easy','d_easy'],['Normal','d_normal'],['Hard','d_hard']].forEach(([v, id])=>{
    on($('#'+id),'click', ()=>{
      UI.diff = v;
      refreshModeLabel();
      document.body.dataset.diff = v;
    });
  });
}
function refreshModeLabel(){
  const mapTH = { goodjunk:'‡∏î‡∏µ vs ‡∏Ç‡∏¢‡∏∞', groups:'‡∏à‡∏≤‡∏ô 5 ‡∏´‡∏°‡∏π‡πà', hydration:'‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ô‡πâ‡∏≥', plate:'‡∏à‡∏±‡∏î‡∏à‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' };
  const mapEN = { goodjunk:'Good vs Junk', groups:'5 Food Groups', hydration:'Hydration', plate:'Healthy Plate' };
  const L = UI.lang==='TH' ? mapTH : mapEN;

  const nameEl = $('#modeName');
  if (nameEl) nameEl.textContent = L[UI.modeKey];

  const dEl = $('#difficulty');
  if (dEl){
    const th = {Easy:'‡∏á‡πà‡∏≤‡∏¢', Normal:'‡∏õ‡∏Å‡∏ï‡∏¥', Hard:'‡∏¢‡∏≤‡∏Å'};
    dEl.textContent = (UI.lang==='TH' ? th[UI.diff] : UI.diff);
  }
}
bindModeDiffButtons();
refreshModeLabel();
document.body.dataset.mode = UI.modeKey;
document.body.dataset.diff = UI.diff;

/* ---------------- Audio helpers ---------------- */
const play = (sel,opts)=>{
  try{
    const a=$(sel); if(!a) return;
    Object.assign(a,opts||{});
    a.currentTime=0;
    a.play().catch(()=>{ /* autoplay blocked; will unlock later */ });
  }catch{}
};
const SFX = {
  good:   ()=>play('#sfx-good'),
  bad:    ()=>play('#sfx-bad'),
  perfect:()=>play('#sfx-perfect'),
  tick:   ()=>play('#sfx-tick'),
  power:  ()=>play('#sfx-powerup'),
  bgm:    ()=>{ const a=$('#bgm-main'); if(a){ a.volume=0.45; a.play().catch(()=>{}); } },
};
// one-time unlock for mobile/iOS
(function unlockOnce(){
  let unlocked=false;
  const kick=()=>{
    if(unlocked) return;
    unlocked=true;
    ['#sfx-good','#sfx-bad','#sfx-perfect','#sfx-tick','#sfx-powerup','#bgm-main'].forEach(sel=>{
      try{ const a=$(sel); if(a){ a.muted=false; a.play().then(()=>{ a.pause(); a.currentTime=0; }).catch(()=>{}); } }catch{}
    });
    window.removeEventListener('pointerdown',kick,true);
    window.removeEventListener('keydown',kick,true);
    window.removeEventListener('touchstart',kick,true);
  };
  window.addEventListener('pointerdown',kick,true);
  window.addEventListener('keydown',kick,true);
  window.addEventListener('touchstart',kick,true);
})();

const vibrate = (p)=>{ try{ navigator.vibrate?.(p); }catch{} };

/* ---------------- Key dispatch (mouse mapping stays) ---------------- */
function dispatchKey(key){
  const ev = new KeyboardEvent('keydown', {key, bubbles:true});
  window.dispatchEvent(ev);
}
on(window,'mousedown',(e)=>{
  if(e.button===0) { dispatchKey('ArrowUp');   vibrate(12); }
  if(e.button===2) { dispatchKey('ArrowDown'); vibrate(18); }
},{passive:false});
on(window,'wheel',(e)=>{ if(e.deltaY<0) dispatchKey('ArrowLeft'); else dispatchKey('ArrowRight'); },{passive:true});
on(window,'contextmenu',(e)=> e.preventDefault(),{passive:false});

/* ---------------- How-to-Play ---------------- */
function howto(mode, lang){
  const T = {
    TH:{
      kb:`‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î: ‚Üë ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î, ‚Üì ‡∏´‡∏°‡∏≠‡∏ö, ‚Üê/‚Üí ‡πÅ‡∏î‡∏ä, Space=‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î, Ctrl=‡∏´‡∏°‡∏≠‡∏ö
‡πÄ‡∏°‡∏≤‡∏™‡πå: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢=‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î, ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤=‡∏´‡∏°‡∏≠‡∏ö, ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡πâ‡∏≠=‡πÅ‡∏î‡∏ä`,
      goodjunk:`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ ü•¶üçé ‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏¢‡∏∞ üçîüçüü•§
‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö: ‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (x4/x8/x12 ‡∏°‡∏µ‡πÇ‡∏ö‡∏ô‡∏±‡∏™)
‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡πÑ‡∏ß: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ 2 ‡∏ä‡∏¥‡πâ‡∏ô‡πÉ‡∏ô 600ms ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏û‡∏¥‡πà‡∏°
‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏¢‡πà‡∏≠‡∏¢: ‡∏î‡∏π‡∏ó‡∏µ‡πà Mission bar
‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå: üõ°Ô∏è ‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î / üåÄ ‡∏ä‡∏∞‡∏•‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ / ‚ú® ‡πÄ‡∏ï‡∏¥‡∏° Fever`,
      groups:`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á ‚Äú‡∏´‡∏°‡∏ß‡∏î‡∏ö‡∏ô HUD‚Äù
‡∏ñ‡∏π‡∏Å +7, ‡∏ú‡∏¥‡∏î ‚àí2 ‚Ä¢ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏∏‡∏Å 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ~10 ‡∏ß‡∏¥`,
      hydration:`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏£‡∏±‡∏Å‡∏©‡∏≤ üíß 45‚Äì65%
‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°:
‚Ä¢ üíß ‡∏ô‡πâ‡∏≥: ‡πÄ‡∏û‡∏¥‡πà‡∏°% (‡∏ö‡∏≤‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)
‚Ä¢ ü•§ ‡∏´‡∏ß‡∏≤‡∏ô/‚òï ‡∏Å‡∏≤‡πÅ‡∏ü: ‡∏•‡∏î%
‡∏Ç‡πâ‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©: %>65 ‡∏î‡∏∑‡πà‡∏° ü•§ = ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô, %<45 ‡∏î‡∏∑‡πà‡∏° ü•§ = ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
‡∏õ‡∏∏‡πà‡∏°: N=Normalize (55%) ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå 25s ‚Ä¢ G=Guard 5s`,
      plate:`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏à‡∏±‡∏î‡∏à‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ (‡∏ò‡∏±‡∏ç‡∏û‡∏∑‡∏ä2 ‡∏ú‡∏±‡∏Å2 ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô1 ‡∏ú‡∏•‡πÑ‡∏°‡πâ1 ‡∏ô‡∏°1)
‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚ÄúPerfect Plate!‚Äù ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏π‡∏á ‚Ä¢ ‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤/‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢`
    },
    EN:{
      kb:`Keyboard: ‚Üë Jump, ‚Üì Duck, ‚Üê/‚Üí Dash, Space=Jump, Ctrl=Duck
Mouse: LMB=Jump, RMB=Duck, Wheel=Dash`,
      goodjunk:`Goal: Collect healthy foods ü•¶üçé, avoid junk üçîüçüü•§
Combo: Continuous hits raise combo (x4/x8/x12 bonuses)
Quick Double: Two healthy hits within 600ms = extra
Micro-missions: see Mission bar
Power-ups: üõ°Ô∏è Shield / üåÄ Slow-Time / ‚ú® Fever heal`,
      groups:`Goal: Match the ‚Äútarget group‚Äù on HUD
Right +7, Wrong ‚àí2 ‚Ä¢ Target changes every 3 rights or ~10s`,
      hydration:`Goal: Keep hydration 45‚Äì65%
Drinks:
‚Ä¢ üíß Water/Mineral: increases (some over-time)
‚Ä¢ ü•§ Sugary/‚òï Coffee: decreases
Special: If %>65 then ü•§ = +score; if %<45 then ü•§ = ‚àíscore
Keys: N=Normalize (55%) cd 25s ‚Ä¢ G=Guard 5s`,
      plate:`Goal: Fill plate quotas (Grain2 Veg2 Protein1 Fruit1 Dairy1)
Complete all for ‚ÄúPerfect Plate!‚Äù bonus ‚Ä¢ Overfill slightly reduces time/score`
    }
  };
  const L = (lang==='EN') ? T.EN : T.TH;
  if (mode==='goodjunk')  return `${L.goodjunk}\n\n${L.kb}`;
  if (mode==='groups')    return `${L.groups}\n\n${L.kb}`;
  if (mode==='hydration') return `${L.hydration}\n\n${L.kb}`;
  if (mode==='plate')     return `${L.plate}\n\n${L.kb}`;
  return `${L.goodjunk}\n\n${L.kb}`;
}

/* ---------------- Help modal ---------------- */
function showHelp(mode=UI.modeKey){
  const help = $('#help'), body = $('#helpBody'), title = $('#h_help');
  if (!help || !body) return;
  if (title) title.textContent = (UI.lang==='TH'?'‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡πà‡∏ô':'How to Play');
  body.textContent = howto(mode, UI.lang);
  help.style.display = 'flex';
}
function hideHelp(){ const help=$('#help'); if(help) help.style.display='none'; }

on($('#btn_help'),'click', ()=>{ SFX.tick(); showHelp(UI.modeKey); });
on($('#btn_ok'),'click', ()=>{ SFX.tick(); hideHelp(); });
on($('#help'),'click', (e)=>{ if (e.target?.id==='help') hideHelp(); });
on(window,'keydown',(e)=>{ if(e.key==='Escape') hideHelp(); });

/* ---------------- Result modal (supports #result or #resultModal) ---------------- */
function resultRoot(){ return $('#result') || $('#resultModal') || null; }
on(resultRoot(),'click',(e)=>{
  const t = e.target;
  const act = t?.getAttribute?.('data-result') || t?.dataset?.result;
  if (act==='replay'){ resultRoot().style.display='none'; startFlow(); }
  if (act==='home'){   resultRoot().style.display='none'; }
});

/* ---------------- Pre-start interactive tutorial (once per mode) ---------------- */
async function interactiveTutorial(mode){
  const coach = $('#coachHUD'), text = $('#coachText');
  const say = (t)=>{ if(text) text.textContent=t; if(coach){ coach.classList.add('show'); coach.style.display='flex'; } };
  const hush= ()=>{ if(coach){ coach.classList.remove('show'); coach.style.display='none'; } };
  const wait = (ms)=>new Promise(r=>setTimeout(r,ms));
  const waitForKey=(keys,ms=6000)=> new Promise(res=>{
    let done=false;
    const onKey=(e)=>{ if(done) return; if(keys.includes(e.key)){ done=true; window.removeEventListener('keydown',onKey); res(true);} };
    window.addEventListener('keydown',onKey);
    setTimeout(()=>{ if(!done){ window.removeEventListener('keydown',onKey); res(false); } }, ms);
  });

  say(UI.lang==='TH'?'‡πÄ‡∏î‡πÇ‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô 3‚Ä¶':'Demo starts in 3‚Ä¶'); SFX.tick(); await wait(700);
  say('2‚Ä¶'); SFX.tick(); await wait(650);
  say('1‚Ä¶'); SFX.tick(); await wait(650);

  if (mode==='goodjunk'){
    say(UI.lang==='TH'?'‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏î‡∏µ! ‡∏Å‡∏î ‚Üë ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î':'Collect healthy foods! Press ‚Üë to jump');
    await waitForKey(['ArrowUp',' '], 5500);
    say(UI.lang==='TH'?'‡∏•‡∏≠‡∏á ‚Üì ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏≠‡∏ö':'Try ‚Üì to duck');
    await waitForKey(['ArrowDown','Control','Ctrl'], 5500);
  } else if (mode==='groups'){
    say(UI.lang==='TH'?'‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏ö‡∏ô HUD ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á':'Match the HUD target group'); await wait(1200);
  } else if (mode==='hydration'){
    say(UI.lang==='TH'?'‡∏£‡∏±‡∏Å‡∏©‡∏≤ üíß 45‚Äì65%! ‡∏Å‡∏î N ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Normalize':'Keep üíß 45‚Äì65%! Press N to normalize');
    await waitForKey(['n','N'], 5500);
    say(UI.lang==='TH'?'‡∏Å‡∏î G ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Guard 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ':'Press G for 5s Guard');
    await waitForKey(['g','G'], 5500);
  } else if (mode==='plate'){
    say(UI.lang==='TH'?'‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 5 ‡∏´‡∏°‡∏π‡πà':'Fill all 5 food groups'); await wait(1200);
  }

  say(UI.lang==='TH'?'‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏à‡∏£‡∏¥‡∏á!':'Great! Starting!');
  await wait(600);
  hush();
}

/* ---------------- Start flow: help (once) ‚Üí tutorial (once) ‚Üí start ---------------- */
async function startFlow(){
  try{ SFX.bgm(); }catch{}
  const key = UI.modeKey;

  // Help once per mode
  if (!UI.seenHelp[key]){
    showHelp(key);
    await new Promise(res=>{
      const done=()=>{ $('#help')?.removeEventListener('click',overlay); $('#btn_ok')?.removeEventListener('click',ok); res(); };
      const ok = ()=>{ hideHelp(); done(); };
      const overlay = (e)=>{ if(e.target?.id==='help'){ hideHelp(); done(); } };
      on($('#btn_ok'),'click', ok, {once:true});
      on($('#help'),'click', overlay);
    });
    UI.seenHelp[key]=true;
    localStorage.setItem('hha_seen_help_per_mode', JSON.stringify(UI.seenHelp));
  }

  // Demo once per mode
  const demoKey = 'hha_seen_demo_'+key;
  if (!localStorage.getItem(demoKey)){
    await interactiveTutorial(key);
    localStorage.setItem(demoKey,'1');
  }

  // Hand off to main.js variants
  if (window.preStartFlow) { window.preStartFlow(); }
  else if (window.HHA?.startGame) { window.HHA.startGame({ demoPassed:true }); }
  else if (window.start) { window.start({ demoPassed:true }); }
}

/* ---------------- Strong start/restart bindings ---------------- */
(function bindStartStrong(){
  const b = $('#btn_start'); if (!b) return;
  const clone = b.cloneNode(true);
  b.parentNode.replaceChild(clone, b);
  on(clone,'click', (e)=>{
    e.preventDefault(); e.stopPropagation();
    startFlow();
  }, {capture:true});
})();

on($('#btn_restart'),'click', ()=>{ vibrate(18); try{ window.end?.(true); }catch{} startFlow(); });
on($('#btn_pause'),'click',  ()=>{ vibrate(12); try{ window.onPauseIntent?.(); }catch{} });

/* ---------------- Language/GFX/Sound toggles ---------------- */
on($('#langToggle'),'click', ()=>{
  SFX.tick();
  UI.lang = (UI.lang==='TH'?'EN':'TH');
  refreshModeLabel();
  try { window.onLangSwitch?.(UI.lang); }catch{}
});
on($('#gfxToggle'), 'click', ()=>{ SFX.tick(); try{ window.onGfxToggle?.(); }catch{} });
on($('#soundToggle'),'click', ()=>{ SFX.tick(); try{ window.onSoundToggle?.(); }catch{} });

/* ---------------- Pause on blur / resume on focus (signal to main) ---------------- */
on(window,'blur',  ()=>{ try{ window.onAppBlur?.(); }catch{} });
on(window,'focus', ()=>{ try{ window.onAppFocus?.(); }catch{} });

/* ---------------- XR helper (optional) ---------------- */
on($('#btn_vr'),'click', async ()=>{
  SFX.tick();
  try { await window.VRInput?.toggleVR?.(); } catch (e) { console.warn('[ui] VR toggle failed', e); }
});

/* ---------------- Debug overlay guard: who blocks the Start button? ---------------- */
(function probeOverlay(){
  setTimeout(()=>{
    const b = $('#btn_start'); if(!b) return;
    const r = b.getBoundingClientRect(); const cx=r.left+r.width/2, cy=r.top+r.height/2;
    const stack = document.elementsFromPoint(cx, cy);
    if(stack && stack[0] !== b){ console.warn('[Overlay Detected on Start]', stack[0]); }
  }, 600);
})();

/* ---------------- Public API for main.js ---------------- */
window.HHA_UI = {
  getMode:   ()=>UI.modeKey,
  getDiff:   ()=>UI.diff,
  getLang:   ()=>UI.lang,
  startFlow, // allow main to trigger the full sequence
  setLang(thOrEn){ UI.lang = (String(thOrEn).toUpperCase()==='EN'?'EN':'TH'); refreshModeLabel(); },
  setMode(key){ if(['goodjunk','groups','hydration','plate'].includes(key)){ UI.modeKey=key; refreshModeLabel(); } },
  setDiff(v){ if(['Easy','Normal','Hard'].includes(v)){ UI.diff=v; refreshModeLabel(); } }
};

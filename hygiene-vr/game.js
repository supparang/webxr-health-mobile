/* Hygiene Rhythm Game (VR / A-Frame)
   - 3 ‡πÄ‡∏•‡∏ô: wash (üßº), brush (ü™•), cover (ü§ß)
   - ‡πÄ‡∏•‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ gaze+fuse ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å
   - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ‡πÉ‡∏ä‡πâ BPM/BeatMap ‡∏Ç‡∏¢‡∏±‡∏ö‡πÇ‡∏ô‡πâ‡∏ï‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
*/

const $ = (id) => document.getElementById(id);
const hud = $("hudText");
const fb = $("feedback");
const btnStart = $("btnStart");
const btnReset = $("btnReset");
const selectDiff = $("difficulty");
const root = document.getElementById("root");

let state = {
  running: false,
  startTime: 0,
  elapsed: 0,
  bpm: 100,
  hitWindow: 0.35,  // ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏î‡∏ô (¬±)
  score: 0,
  combo: 0,
  maxCombo: 0,
  notes: [],       // ‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  lanes: {},       // lane panels
  feedbackTimer: null,
  timerId: null,
  duration: 60,    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏û‡∏•‡∏á (‡∏ß‡∏¥)
};

// ---------- Beat Map ----------
/* ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á 3 ‡πÄ‡∏•‡∏ô
   time = ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°), lane = wash/brush/cover
*/
const BEATMAPS = {
  easy: {
    bpm: 80, duration: 40,
    notes: makePattern(80, 40, {wash:0.0, brush:1.0, cover:2.0}, 1.2)
  },
  normal: {
    bpm: 100, duration: 60,
    notes: makePattern(100, 60, {wash:0.0, brush:1.0, cover:2.0}, 1.0)
  },
  hard: {
    bpm: 120, duration: 60,
    notes: makePattern(120, 60, {wash:0.0, brush:1.0, cover:2.0}, 0.75, true)
  }
};

/* ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÇ‡∏ô‡πâ‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢:
   - ‡∏ó‡∏∏‡∏Å 1 beat ‡∏™‡∏∏‡πà‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏•‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ö A-B-C
   - spacingZ = ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏ô‡πâ‡∏ï (‡πÄ‡∏°‡∏ï‡∏£) ‡πÄ‡∏°‡∏∑‡πà‡∏≠ time ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á
   - hardMode = ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ô‡πâ‡∏ï‡∏ã‡πâ‡∏≠‡∏ô (syncopation) ‡∏ö‡∏≤‡∏á‡∏à‡∏∏‡∏î
*/
function makePattern(bpm, duration, laneOffsets, spacingZ=1.0, hardMode=false) {
  const beatSec = 60/bpm;
  const notes = [];
  let order = ["wash","brush","cover"];
  let i = 0;
  for (let t=2*beatSec; t<duration; t+=beatSec) {
    const lane = order[i % order.length];
    notes.push({ time: t, lane, z0: -4.0, zHit: 0, z: -4.0, speed: (4.0)/(t) });
    if (hardMode && (i%6===3)) { // ‡πÉ‡∏™‡πà‡πÇ‡∏ô‡πâ‡∏ï‡∏Ñ‡∏±‡πà‡∏ô‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ö‡∏µ‡∏ó
      notes.push({ time: t + beatSec/2, lane: order[(i+1)%3], z0: -4.0, zHit: 0, z: -4.0, speed: (4.0)/(t+beatSec/2) });
    }
    i++;
  }
  return notes;
}

// ---------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏â‡∏≤‡∏Å ----------
function clearChildren(el){ while(el.firstChild) el.removeChild(el.firstChild); }

function buildScene(){
  clearChildren(root);

  // ‡πÄ‡∏™‡πâ‡∏ô Hit line
  const hitLine = document.createElement("a-plane");
  hitLine.setAttribute("width","3.6");
  hitLine.setAttribute("height","0.02");
  hitLine.setAttribute("material","color:#0ea5e9; opacity:0.95; shader:flat");
  hitLine.setAttribute("position","0 -0.25 0");
  root.appendChild(hitLine);

  // 3 ‡πÄ‡∏•‡∏ô: wash / brush / cover
  const lanes = [
    {key:"wash",  x:-1.2, color:"#16a34a", label:"üßº ‡∏•‡πâ‡∏≤‡∏á‡∏°‡∏∑‡∏≠"},
    {key:"brush", x: 0.0, color:"#eab308", label:"ü™• ‡πÅ‡∏õ‡∏£‡∏á‡∏ü‡∏±‡∏ô"},
    {key:"cover", x: 1.2, color:"#ef4444", label:"ü§ß ‡∏õ‡∏¥‡∏î‡∏õ‡∏≤‡∏Å"}
  ];

  lanes.forEach(l=>{
    const lane = document.createElement("a-entity");
    lane.setAttribute("position", `${l.x} 0 0`);

    // ‡πÅ‡∏ú‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏¥‡∏Å/fuse)
    const panel = document.createElement("a-plane");
    panel.classList.add("selectable");
    panel.setAttribute("width","1.0");
    panel.setAttribute("height","0.5");
    panel.setAttribute("material", `color:${l.color}; opacity:0.85; shader:flat`);
    panel.setAttribute("position", `0 -0.55 0`);
    lane.appendChild(panel);

    // ‡∏õ‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏ô
    const txt = document.createElement("a-entity");
    txt.setAttribute("text", `value:${l.label}; width:4.0; align:center; color:#0b1220`);
    txt.setAttribute("position", `0 -0.55 0.02`);
    lane.appendChild(txt);

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏ô = ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° Hit
    panel.addEventListener("click", ()=> tryHit(l.key));

    root.appendChild(lane);
    state.lanes[l.key] = lane;
  });
}

function spawnNotes(map){
  // ‡πÇ‡∏ô‡πâ‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏£‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏Å‡∏Å‡∏•‡∏° ‡πÜ
  map.notes.forEach(n=>{
    const note = document.createElement("a-circle");
    const color = n.lane==="wash" ? "#22c55e" : n.lane==="brush" ? "#f59e0b" : "#ef4444";
    note.setAttribute("radius","0.13");
    note.setAttribute("material", `color:${color}; opacity:0.95; shader:flat`);
    const x = n.lane==="wash" ? -1.2 : n.lane==="brush" ? 0.0 : 1.2;
    note.setAttribute("position", `${x} 0 ${n.z0}`);
    note.dataset.time = n.time.toString();
    note.dataset.lane = n.lane;
    n.el = note;
    root.appendChild(note);
    state.notes.push(n);
  });
}

// ---------- ‡πÄ‡∏Å‡∏°‡πÄ‡∏û‡∏•‡∏¢‡πå ----------
function startGame(){
  const diff = selectDiff.value;
  const map = BEATMAPS[diff];
  state.bpm = map.bpm;
  state.duration = map.duration;

  state.running = true;
  state.startTime = performance.now()/1000;
  state.elapsed = 0;
  state.score = 0;
  state.combo = 0;
  state.maxCombo = 0;
  state.notes = [];
  fb.textContent = "";
  hud.textContent = "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‚Ä¶";

  buildScene();
  spawnNotes(map);

  if (state.timerId) { cancelAnimationFrame(state.timerId); }
  tick();
}

function resetGame(){
  state.running = false;
  clearTimeout(state.feedbackTimer);
  fb.textContent = "";
  clearChildren(root);
  hud.textContent = "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°";
}

function finishGame(){
  state.running = false;
  clearTimeout(state.feedbackTimer);
  const stars = state.score >= 400 ? "‚≠ê‚≠ê‚≠ê" : state.score >= 250 ? "‚≠ê‚≠ê" : "‚≠ê";
  hud.textContent =
    `‡∏à‡∏ö‡πÄ‡∏û‡∏•‡∏á\n‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${state.score}\n‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${state.maxCombo}\n${stars}`;
}

function tick(){
  if (!state.running) return;
  const now = performance.now()/1000;
  state.elapsed = now - state.startTime;

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HUD ‡πÄ‡∏ß‡∏•‡∏≤
  const remain = Math.max(0, Math.ceil(state.duration - state.elapsed));
  hud.textContent = `‡πÄ‡∏ß‡∏•‡∏≤: ${remain} ‡∏ß‡∏¥\n‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${state.score}\n‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö: x${state.combo}`;

  // ‡∏Ç‡∏¢‡∏±‡∏ö‡πÇ‡∏ô‡πâ‡∏ï: ‡πÉ‡∏´‡πâ‡∏ä‡∏ô‡πÄ‡∏™‡πâ‡∏ô z=0 ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ note.time
  for (const n of state.notes) {
    if (!n.el) continue;
    const tToHit = n.time - state.elapsed; // ‡∏ñ‡πâ‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå => ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô
    const z = tToHit * 2.0; // scale ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (‡πÄ‡∏°‡∏ï‡∏£/‡∏ß‡∏¥) ‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏π
    n.z = z;
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    const x = n.lane==="wash" ? -1.2 : n.lane==="brush" ? 0.0 : 1.2;
    n.el.setAttribute("position", `${x} 0 ${z}`);

    // ‡πÄ‡∏•‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡πÑ‡∏õ‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß = Miss ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if (tToHit < -state.hitWindow && !n.judged) {
      judge(n, "miss");
    }
  }

  // ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏•‡∏á ‚Üí ‡∏à‡∏ö‡πÄ‡∏Å‡∏°
  if (state.elapsed >= state.duration) {
    // ‡πÉ‡∏´‡πâ‡πÇ‡∏ô‡πâ‡∏ï‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô miss
    state.notes.forEach(n=>{ if(!n.judged) judge(n,"miss"); });
    finishGame();
    return;
  }

  state.timerId = requestAnimationFrame(tick);
}

function tryHit(lane){
  if (!state.running) return;
  // ‡∏´‡∏≤‡πÇ‡∏ô‡πâ‡∏ï‡πÉ‡∏ô‡πÄ‡∏•‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ß‡∏•‡∏≤ (|Œît| ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô)
  let best = null, bestAbs = Infinity;
  for (const n of state.notes) {
    if (n.lane !== lane || n.judged) continue;
    const dt = n.time - state.elapsed;
    const abs = Math.abs(dt);
    if (abs < bestAbs) { bestAbs = abs; best = n; }
  }
  if (!best) return;

  // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  if (bestAbs <= state.hitWindow*0.35) judge(best, "perfect");
  else if (bestAbs <= state.hitWindow*0.65) judge(best, "great");
  else if (bestAbs <= state.hitWindow) judge(best, "good");
  else judge(best, "miss");
}

function judge(note, type){
  note.judged = true;
  // ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏´‡∏≤‡∏¢ + ‡∏õ‡πä‡∏≠‡∏õ
  if (note.el) {
    note.el.setAttribute("animation__pop","property: scale; to: 1.6 1.6 1; dur: 90; dir: alternate; easing: easeOutQuad");
    note.el.setAttribute("animation__fade","property: material.opacity; to: 0; dur: 140; easing: easeOutQuad");
    setTimeout(()=>{ if(note.el && note.el.parentNode){ note.el.parentNode.removeChild(note.el); } }, 160);
  }

  let add = 0, text = "", color = "";
  switch(type){
    case "perfect": add = 30; text="Perfect!"; color="#38bdf8"; state.combo++; break;
    case "great":   add = 20; text="Great!";   color="#22c55e"; state.combo++; break;
    case "good":    add = 10; text="Good";     color="#eab308"; state.combo=0; break;
    default:        add = 0;  text="Miss";     color="#ef4444"; state.combo=0; break;
  }
  state.score += add + Math.max(0, state.combo-1)*2; // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
  state.maxCombo = Math.max(state.maxCombo, state.combo);

  fb.innerHTML = `<span style="color:${color};font-weight:800;">${text}</span>`;
  clearTimeout(state.feedbackTimer);
  state.feedbackTimer = setTimeout(()=> fb.textContent="", 600);
}

// ---------- ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° ----------
btnStart.onclick = ()=> { if(!state.running) startGame(); else finishGame(); };
btnReset.onclick = resetGame;

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
resetGame();

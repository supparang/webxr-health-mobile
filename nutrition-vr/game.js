// Nutrition Traffic Light VR ‚Äî P5
// ‡∏Å‡∏•‡πÑ‡∏Å: ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô ‚Üí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏±‡∏á ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡πÅ‡∏î‡∏á ‡∏î‡πâ‡∏ß‡∏¢ gaze fuse ‡∏´‡∏£‡∏∑‡∏≠ OK
// ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏î‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏¢‡∏¥‡πâ‡∏°‡∏ï‡∏≠‡∏ô‡∏à‡∏ö ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û

const GAME_ID = "Nutrition-Traffic";
function track(name, props={}){ try{ if(window.plausible) plausible(name,{props:{game:GAME_ID,...props}}) }catch(e){} }

const $ = id => document.getElementById(id);
const hudText = $('hudText');
const btn = { start: $('btnStart'), reset: $('btnReset') };

const gameRoot = document.getElementById('gameRoot');

let running = false;
let timeLeft = 60;
let score = 0;
let lives = 3;
let totalItems = 0;
let timerId = null;

// ===== ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏à‡∏£‡∏≤‡∏à‡∏£ =====
// tag: green ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡πà‡∏≠‡∏¢, yellow ‡∏û‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞, red ‡∏ô‡πâ‡∏≠‡∏¢ ‡πÜ
const FOODS = [
  {name:'‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏•‡πâ‡∏≠‡∏á', emoji:'üçö', tag:'green'},
  {name:'‡∏õ‡∏•‡∏≤‡∏≠‡∏ö', emoji:'üêü', tag:'green'},
  {name:'‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å', emoji:'ü•ó', tag:'green'},
  {name:'‡∏ú‡∏•‡πÑ‡∏°‡πâ', emoji:'üçé', tag:'green'},
  {name:'‡∏ô‡∏°‡∏à‡∏∑‡∏î', emoji:'ü•õ', tag:'yellow'},
  {name:'‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á', emoji:'üçó', tag:'yellow'},
  {name:'‡πÅ‡∏Å‡∏á‡∏à‡∏∑‡∏î', emoji:'üç≤', tag:'yellow'},
  {name:'‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ç‡∏≤‡∏ß', emoji:'üçö', tag:'yellow'},
  {name:'‡∏Ç‡∏≠‡∏á‡∏ó‡∏≠‡∏î', emoji:'üçü', tag:'red'},
  {name:'‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏î‡∏•‡∏°', emoji:'ü•§', tag:'red'},
  {name:'‡∏Ç‡∏ô‡∏°‡∏´‡∏ß‡∏≤‡∏ô', emoji:'üç∞', tag:'red'},
  {name:'‡∏°‡∏±‡∏ô‡∏ù‡∏£‡∏±‡πà‡∏á‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏≠‡∏ö', emoji:'üçø', tag:'red'}
];

function randFood(){ return FOODS[Math.floor(Math.random()*FOODS.length)]; }
function setHUD(line1, line2=""){ hudText.style.whiteSpace='pre-line'; hudText.textContent = line1 + (line2?`\n${line2}`:''); }
function clearChildren(el){ while(el.firstChild) el.removeChild(el.firstChild); }

// billboard: ‡πÉ‡∏´‡πâ‡∏õ‡πâ‡∏≤‡∏¢‡∏´‡∏±‡∏ô‡∏´‡∏≤‡πÄ‡∏•‡∏ô‡∏™‡πå‡πÄ‡∏™‡∏°‡∏≠
AFRAME.registerComponent('billboard',{ tick(){ const cam=document.querySelector('[camera]'); if(!cam) return; const v=new THREE.Vector3(); cam.object3D.getWorldPosition(v); this.el.object3D.lookAt(v);} });

// ===== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏¢‡πå‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏â‡∏≤‡∏Å: ‡∏õ‡πâ‡∏≤‡∏¢‡∏ñ‡∏±‡∏á 3 ‡∏™‡∏µ + ‡πÇ‡∏ã‡∏ô‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° =====
let bins = {}; // {green:entity, yellow:entity, red:entity}
let itemNode = null;

function buildScene(){
  clearChildren(gameRoot);

  // ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡∏≤‡∏á‡∏ñ‡∏±‡∏á: ‡∏ã‡πâ‡∏≤‡∏¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡∏Å‡∏•‡∏≤‡∏á ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡∏Ç‡∏ß‡∏≤ ‡πÅ‡∏î‡∏á
  const lane = document.createElement('a-entity');
  lane.setAttribute('position','0 0 0');
  gameRoot.appendChild(lane);

  bins.green = makeBin('‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡∏Å‡∏¥‡∏ô‡∏ö‡πà‡∏≠‡∏¢', '#16a34a', -0.9);
  bins.yellow= makeBin('‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡∏û‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞', '#f59e0b', 0.0);
  bins.red   = makeBin('‡πÅ‡∏î‡∏á ‡∏Å‡∏¥‡∏ô‡∏ô‡πâ‡∏≠‡∏¢', '#ef4444', 0.9);
  lane.appendChild(bins.green);
  lane.appendChild(bins.yellow);
  lane.appendChild(bins.red);

  // ‡πÇ‡∏´‡∏ô‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
  itemNode = document.createElement('a-entity');
  itemNode.setAttribute('position','0 0.45 0');
  gameRoot.appendChild(itemNode);
}
function makeBin(label, color, x){
  const bin = document.createElement('a-entity');
  bin.setAttribute('position', `${x} -0.35 0`);

  // ‡∏û‡∏∑‡πâ‡∏ô‡∏õ‡πâ‡∏≤‡∏¢
  const panel = document.createElement('a-plane');
  panel.classList.add('selectable');
  panel.setAttribute('width','0.9'); panel.setAttribute('height','0.5');
  panel.setAttribute('material', `color:${color}; opacity:0.35; shader:flat; transparent:true`);
  panel.setAttribute('billboard','');
  panel.setAttribute('position','0 0 0');
  bin.appendChild(panel);

  // ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏°
  const inner = document.createElement('a-plane');
  inner.setAttribute('width','0.86'); inner.setAttribute('height','0.46');
  inner.setAttribute('material', 'color:#0f172a; shader:flat; transparent:true; opacity:0.98');
  inner.setAttribute('position','0 0 0.01');
  bin.appendChild(inner);

  // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏ç‡πà
  const txt = document.createElement('a-entity');
  txt.setAttribute('text', `value:${label}; width:3.2; align:center; color:#EAF2FF`);
  txt.setAttribute('position','0 0 0.02');
  bin.appendChild(txt);

  // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≤‡∏¢ = ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô
  panel.addEventListener('click', ()=>{ if(running) gradeChoice(bin === bins.green ? 'green' : bin === bins.yellow ? 'yellow' : 'red'); });

  return bin;
}

// ===== ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ä‡∏¥‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà =====
let currentFood = null;

function showNewFood(){
  if(!itemNode) return;
  clearChildren(itemNode);
  currentFood = randFood();
  totalItems += 1;

  const card = document.createElement('a-entity');
  card.setAttribute('position','0 0 0');

  const back = document.createElement('a-plane');
  back.setAttribute('width','1.2'); back.setAttribute('height','0.6');
  back.setAttribute('material','color:#111827; shader:flat; transparent:true; opacity:0.98');
  back.setAttribute('position','0 0 0');
  card.appendChild(back);

  const emoji = document.createElement('a-entity');
  emoji.setAttribute('text', `value:${currentFood.emoji}; width:3.2; align:center; color:#fff`);
  emoji.setAttribute('position','-0.35 0 0.01');
  card.appendChild(emoji);

  const label = document.createElement('a-entity');
  label.setAttribute('text', `value:${currentFood.name}; width:3.2; align:left; color:#EAF2FF`);
  label.setAttribute('position','-0.05 0.1 0.01');
  card.appendChild(label);

  const guide = document.createElement('a-entity');
  guide.setAttribute('text', `value:‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏±‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°; width:3.2; align:left; color:#9fb4ff`);
  guide.setAttribute('position','-0.05 -0.12 0.01');
  card.appendChild(guide);

  itemNode.appendChild(card);
  updateHUD();
}

// ===== ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö =====
function gradeChoice(choiceTag){
  if(!currentFood) return;
  const ok = currentFood.tag === choiceTag;
  if(ok){ score += 2; flashBin(choiceTag, true); track('Answer',{ok:true, tag:choiceTag}); }
  else { lives -= 1; flashBin(choiceTag, false); track('Answer',{ok:false, want:currentFood.tag, picked:choiceTag}); }

  if(lives <= 0){ return finishGame(); }
  if(totalItems >= 20){ return finishGame(); }
  showNewFood();
}

function flashBin(tag, ok){
  const bin = tag==='green'?bins.green:tag==='yellow'?bins.yellow:bins.red;
  const panel = bin.children[0];
  panel.setAttribute('animation__flash', `property: material.opacity; from: ${ok?0.35:0.35}; to: ${ok?0.8:0.15}; dur: 160; dir: alternate; easing: easeOutQuad`);
  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏ô HUD ‡∏™‡∏±‡πâ‡∏ô ‡πÜ
  if(ok){ setHUDline2('‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å'); setTimeout(()=>setHUDline2(''), 400); }
  else { setHUDline2('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞ ‡∏•‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà'); setTimeout(()=>setHUDline2(''), 600); }
}
function setHUDline2(suffix){
  const lines = hudText.textContent.split('\n');
  lines[1] = suffix || '';
  hudText.textContent = lines.join('\n').trim();
}

// ===== HUD =====
function updateHUD(){
  hudText.style.whiteSpace = 'pre-line';
  const line1 = `‡πÄ‡∏ß‡∏•‡∏≤  ${timeLeft} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ   ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô  ${score}   ‡∏´‡∏±‡∏ß‡πÉ‡∏à  ${'‚ù§Ô∏è'.repeat(lives)}${'ü§ç'.repeat(Math.max(0,3-lives))}`;
  const line2 = `‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà  ${totalItems}  ‡∏à‡∏≤‡∏Å  20`;
  setHUD(line1, line2);
}

// ===== ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡∏ß‡πå =====
function startTimer(){
  timeLeft = 60;
  timerId = setInterval(()=>{
    if(!running) return;
    timeLeft -= 1; updateHUD();
    if(timeLeft <= 0) finishGame();
  }, 1000);
}

function startGame(){
  running = true; score = 0; lives = 3; totalItems = 0;
  buildScene();
  showNewFood();
  startTimer();
  btn.start.textContent = 'Finish';
  track('GameStart',{});
}
function finishGame(){
  running = false;
  if(timerId){ clearInterval(timerId); timerId = null; }
  btn.start.textContent = 'Start';

  // ‡∏î‡∏≤‡∏ß‡∏á‡πà‡∏≤‡∏¢ ‡πÜ: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‚â•30 = 3 ‡∏î‡∏≤‡∏ß, ‚â•20 = 2 ‡∏î‡∏≤‡∏ß, ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ = 1 ‡∏î‡∏≤‡∏ß
  let stars = 1, face='üôÇ', msg='‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏µ ‡∏•‡∏≠‡∏á‡∏ù‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
  if(score >= 30){ stars=3; face='üòä'; msg='‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'; }
  else if(score >= 20){ stars=2; face='üòÉ'; msg='‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏•‡πâ‡∏ß'; }

  setHUD(`${face}  ${'‚≠ê'.repeat(stars)}${'‚òÜ'.repeat(3-stars)}\n${msg}`, `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î  ${score}`);
  track('GameFinish',{score, items: totalItems, timeLeft});
}
function resetGame(){
  running = false;
  if(timerId){ clearInterval(timerId); timerId = null; }
  clearChildren(gameRoot);
  setHUD('‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°','');
  btn.start.textContent = 'Start';
  track('Reset',{});
}

// ===== ‡∏õ‡∏∏‡πà‡∏° UI =====
btn.start.onclick = ()=>{ if(!running) startGame(); else finishGame(); };
btn.reset.onclick = resetGame;

// boot
resetGame();

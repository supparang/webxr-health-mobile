// Nutrition VR ‚Äî No-Image Edition (Multiline HUD)
// - ‡πÑ‡∏°‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÅ‡∏ó‡∏ô
// - HUD ‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
// - OK click + Fuse(1200ms), Import/Export JSON

const GAME_ID = "Nutrition";
function track(eventName, props = {}) {
  try { if (window.plausible) window.plausible(eventName, { props: { game: GAME_ID, ...props } }); } catch(e){}
}

const $ = id => document.getElementById(id);
const shelfRoot = $('shelfRoot');
const plateRoot = $('plateRoot');
const totalsText = $('totalsText');

const BTN = {
  start: $('btnStart'),
  reset: $('btnReset'),
  export: $('btnExport'),
  sample: $('btnSample'),
  file: $('fileInput')
};

let running = false;

// ---------- ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏µ icon) ----------
let foods = [
  { id:'f001', name:'‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢',       kcal:200, protein:4,  carb:44, fat:0.4 },
  { id:'f002', name:'‡πÅ‡∏Å‡∏á‡∏à‡∏∑‡∏î‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ',   kcal:120, protein:8,  carb:6,  fat:6   },
  { id:'f003', name:'‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏£‡∏ß‡∏°',     kcal:150, protein:3,  carb:18, fat:7   },
  { id:'f004', name:'‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á',       kcal:165, protein:25, carb:0,  fat:6   },
  { id:'f005', name:'‡πÑ‡∏Ç‡πà‡∏ï‡πâ‡∏°',       kcal:78,  protein:6,  carb:0.6,fat:5   },
  { id:'f006', name:'‡∏õ‡∏•‡∏≤‡∏¢‡πà‡∏≤‡∏á',       kcal:160, protein:22, carb:0,  fat:7   },
  { id:'f007', name:'‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏£‡∏ß‡∏°',     kcal:90,  protein:1,  carb:22, fat:0.2 },
  { id:'f008', name:'‡∏ô‡∏°‡∏à‡∏∑‡∏î 1 ‡∏Å‡∏•‡πà‡∏≠‡∏á', kcal:130, protein:8,  carb:12, fat:4.5 }
];

let plate = []; // [{...food, qty}]

function clearEntity(root){ while(root.firstChild) root.removeChild(root.firstChild); }
function fmt(n){ return Math.round(n*10)/10; }

// ---------- ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÅ‡∏ó‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô ----------
function foodEmoji(name=''){
  const n = name.toLowerCase();
  if (n.includes('‡∏Ç‡πâ‡∏≤‡∏ß')) return 'üçö';
  if (n.includes('‡∏õ‡∏•‡∏≤')) return 'üêü';
  if (n.includes('‡πÑ‡∏Å‡πà')) return 'üçó';
  if (n.includes('‡∏´‡∏°‡∏π')) return 'ü•©';
  if (n.includes('‡∏ú‡∏±‡∏Å') || n.includes('‡∏™‡∏•‡∏±‡∏î')) return 'ü•ó';
  if (n.includes('‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ') || n.includes('‡∏ã‡∏∏‡∏õ')) return 'üç≤';
  if (n.includes('‡πÑ‡∏Ç‡πà')) return 'ü•ö';
  if (n.includes('‡∏ú‡∏•‡πÑ‡∏°‡πâ') || n.includes('‡∏Å‡∏•‡πâ‡∏ß‡∏¢') || n.includes('‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•')) return 'üçé';
  if (n.includes('‡∏ô‡∏°')) return 'ü•õ';
  return 'üçΩÔ∏è';
}

// ---------- ‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á (‡πÉ‡∏´‡∏ç‡πà/‡∏ä‡∏±‡∏î + ‡πÅ‡∏ú‡∏á‡∏´‡∏•‡∏±‡∏á) ----------
function renderShelf(){
  clearEntity(shelfRoot);

  const backdrop = document.createElement('a-plane');
  backdrop.setAttribute('width','2.6');
  backdrop.setAttribute('height','1.6');
  backdrop.setAttribute('color','#0a0f1a');
  backdrop.setAttribute('position','0 0 -0.02');
  backdrop.setAttribute('material','shader: flat; opacity: 0.95');
  shelfRoot.appendChild(backdrop);

  const shelf = document.createElement('a-box');
  shelf.setAttribute('width','2.4'); shelf.setAttribute('height','0.06'); shelf.setAttribute('depth','0.45');
  shelf.setAttribute('color','#0b1220'); shelf.setAttribute('position','0 -0.2 0');
  shelfRoot.appendChild(shelf);

  const cols = 3, gapX = 0.75, gapY = 0.48;
  foods.forEach((f, i)=>{
    const col = i % cols;
    const row = Math.floor(i / cols);
    const x = (col - (cols-1)/2) * gapX;
    const y = 0.55 - row * gapY;

    const card = createFoodCard(f);
    card.setAttribute('position', `${x} ${y} 0.01`);
    shelfRoot.appendChild(card);
  });

  const title = document.createElement('a-entity');
  title.setAttribute('text', 'value:‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á; width:5; color:#E8F0FF; align:center');
  title.setAttribute('position','0 0.95 0.01');
  shelfRoot.appendChild(title);
}

// ---------- ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏°‡∏µ <a-image> ‡πÉ‡∏ä‡πâ emoji + ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°) ----------
function createFoodCard(food){
  const card = document.createElement('a-entity');
  card.classList.add('clickable','food');

  card.setAttribute('geometry', 'primitive: plane; width: 0.68; height: 0.36');
  card.setAttribute('material', 'color: #111827; opacity: 0.98; shader: flat; transparent:true');

  const shadow = document.createElement('a-plane');
  shadow.setAttribute('width','0.72'); shadow.setAttribute('height','0.40');
  shadow.setAttribute('position','0 0 -0.001');
  shadow.setAttribute('color','#000'); shadow.setAttribute('opacity','0.25');
  shadow.setAttribute('material','shader: flat');
  card.appendChild(shadow);

  const emoji = document.createElement('a-entity');
  emoji.setAttribute('text', `value:${foodEmoji(food.name)}; width:2.2; align:center; color:#fff`);
  emoji.setAttribute('position','-0.20 0 0.002');
  card.appendChild(emoji);

  const txt = `${food.name}\n${fmt(food.kcal)} kcal`;
  const label = document.createElement('a-entity');
  label.setAttribute('text', `value:${txt}; width:2.8; color:#F5F7FF; align:left; baseline:top`);
  label.setAttribute('position','-0.02 0.10 0.002');
  card.appendChild(label);

  card.addEventListener('click', ()=> addToPlate(food));
  card.addEventListener('mouseenter', ()=> card.setAttribute('scale','1.05 1.05 1'));
  card.addEventListener('mouseleave', ()=> card.setAttribute('scale','1 1 1'));

  return card;
}

// ---------- ‡∏à‡∏≤‡∏ô (‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ + ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡∏ç‡πà) ----------
function renderPlate(){
  clearEntity(plateRoot);

  const base = document.createElement('a-circle');
  base.setAttribute('radius','0.65'); base.setAttribute('color','#0b1220');
  base.setAttribute('rotation','-90 0 0'); base.setAttribute('position','0 -0.35 0');
  plateRoot.appendChild(base);

  const head = document.createElement('a-entity');
  head.setAttribute('text','value:‡∏à‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô (‡∏Ñ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô/‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å); width:5.5; color:#E8F0FF; align:center');
  head.setAttribute('position','0 0.55 0.02');
  plateRoot.appendChild(head);

  const cols = 2, gapX = 0.5, gapY = 0.36;
  plate.forEach((p, i)=>{
    const col = i % cols;
    const row = Math.floor(i / cols);
    const x = (col - (cols-1)/2) * gapX;
    const y = 0.22 - row * gapY;

    const item = document.createElement('a-entity');
    item.classList.add('clickable','plate-item');
    item.setAttribute('geometry','primitive: plane; width: 0.58; height: 0.28');
    item.setAttribute('material','color:#0f172a; opacity:0.98; shader:flat; transparent:true');
    item.setAttribute('position', `${x} ${y} 0.02`);

    const emoji = document.createElement('a-entity');
    emoji.setAttribute('text', `value:${foodEmoji(p.name)}; width:2.2; align:center; color:#fff`);
    emoji.setAttribute('position','-0.20 0 0.002');
    item.appendChild(emoji);

    const txt = `${p.name} √ó${p.qty}\n${fmt(p.kcal*p.qty)} kcal`;
    const label = document.createElement('a-entity');
    label.setAttribute('text', `value:${txt}; width:2.6; color:#DDE7FF; align:left; baseline:top`);
    label.setAttribute('position','-0.06 0.08 0.002');
    item.appendChild(label);

    item.addEventListener('click', ()=> removeFromPlate(p.id));
    item.addEventListener('mouseenter', ()=> item.setAttribute('scale','1.03 1.03 1'));
    item.addEventListener('mouseleave', ()=> item.setAttribute('scale','1 1 1'));
    plateRoot.appendChild(item);
  });
}

// ---------- ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÉ‡∏™‡πà-‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å ----------
function addToPlate(food){
  const f = plate.find(x=>x.id===food.id);
  if (f) f.qty += 1;
  else plate.push({ ...food, qty:1 });
  renderPlate(); updateTotalsHUD();
  track('AddFood', { id: food.id, name: food.name });
}
function removeFromPlate(foodId){
  const idx = plate.findIndex(p=>p.id===foodId);
  if (idx>=0){
    if (plate[idx].qty>1) plate[idx].qty -= 1;
    else plate.splice(idx,1);
    renderPlate(); updateTotalsHUD();
    track('RemoveFood', { id: foodId });
  }
}

// ---------- HUD ‡∏£‡∏ß‡∏°‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ (‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î) ----------
function updateTotalsHUD(){
  const total = plate.reduce((a, p)=>{
    a.kcal   += (p.kcal||0)   * p.qty;
    a.protein+= (p.protein||0)* p.qty;
    a.carb   += (p.carb||0)   * p.qty;
    a.fat    += (p.fat||0)    * p.qty;
    return a;
  }, {kcal:0,protein:0,carb:0,fat:0});

  // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠
  totalsText.style.whiteSpace = 'pre-line';
  totalsText.textContent =
    `${fmt(total.kcal)} kcal\n` +
    `P:${fmt(total.protein)}g  C:${fmt(total.carb)}g  F:${fmt(total.fat)}g`;

  return total;
}

// ---------- Import / Export ----------
BTN.file.addEventListener('change', async (e)=>{
  const file = e.target.files?.[0]; if (!file) return;
  try{
    const text = await file.text();
    const data = JSON.parse(text);
    if (!Array.isArray(data)) throw new Error('JSON ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡πÄ‡∏£‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£');
    foods = data.map(x=>({
      id: String(x.id || crypto.randomUUID()),
      name: String(x.name || '‡πÄ‡∏°‡∏ô‡∏π'),
      kcal: +x.kcal||0, protein:+x.protein||0, carb:+x.carb||0, fat:+x.fat||0
    }));
    renderShelf();
    track('ImportMenu', { count: foods.length });
    alert('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ)');
  }catch(err){
    alert('‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + err.message);
  } finally { e.target.value = ''; }
});

BTN.sample.onclick = ()=>{
  const sample = [
    { id:'r01', name:'‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏•‡πâ‡∏≠‡∏á', kcal:220, protein:5, carb:46, fat:1 },
    { id:'c01', name:'‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡∏™‡∏≤‡∏´‡∏£‡πà‡∏≤‡∏¢', kcal:95, protein:6, carb:5, fat:4 },
    { id:'m01', name:'‡∏´‡∏°‡∏π‡∏≠‡∏ö', kcal:210, protein:20, carb:6, fat:12 },
    { id:'v01', name:'‡∏¢‡∏≥‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô', kcal:160, protein:9, carb:24, fat:3 },
    { id:'f01', name:'‡∏Å‡∏•‡πâ‡∏ß‡∏¢', kcal:89, protein:1.1, carb:23, fat:0.3 }
  ];
  foods = sample; renderShelf(); alert('‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ)');
};

BTN.export.onclick = ()=>{
  const total = updateTotalsHUD();
  const payload = {
    version: '1.2-noimg-ml',
    game: GAME_ID,
    exportedAt: new Date().toISOString(),
    items: plate.map(p=>({ id:p.id, name:p.name, qty:p.qty, kcal:p.kcal, protein:p.protein, carb:p.carb, fat:p.fat })),
    total
  };
  const blob = new Blob([JSON.stringify(payload,null,2)], {type:'application/json'});
  const now=new Date(); const pad=n=>String(n).padStart(2,'0');
  const filename=`nutrition_plate_${now.getFullYear()}${pad(now.getMonth()+1)}${pad(now.getDate())}_${pad(now.getHours())}${pad(now.getMinutes())}${pad(now.getSeconds())}.json`;
  const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download=filename;
  document.body.appendChild(a); a.click(); setTimeout(()=>{ URL.revokeObjectURL(a.href); a.remove(); },0);
  track('ExportPlate', { count: plate.length, kcal: total.kcal });
};

// ---------- Start / Reset ----------
BTN.start.onclick = ()=>{ running=true; renderShelf(); renderPlate(); updateTotalsHUD(); track('GameStart', {}); };
BTN.reset.onclick = ()=>{ plate=[]; renderPlate(); updateTotalsHUD(); track('ResetPlate', {}); };

// boot
renderShelf(); renderPlate(); updateTotalsHUD();
